
CGS - Orienteering Device.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004594  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  08004654  08004654  00014654  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080046c0  080046c0  00020008  2**0
                  CONTENTS
  4 .ARM          00000008  080046c0  080046c0  000146c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080046c8  080046c8  00020008  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080046c8  080046c8  000146c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080046cc  080046cc  000146cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000008  20000000  080046d0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000055c  20000008  080046d8  00020008  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000564  080046d8  00020564  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020008  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e933  00000000  00000000  00020030  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002369  00000000  00000000  0002e963  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000ec0  00000000  00000000  00030cd0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000d78  00000000  00000000  00031b90  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000154c3  00000000  00000000  00032908  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000cdeb  00000000  00000000  00047dcb  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00082452  00000000  00000000  00054bb6  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000d7008  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003440  00000000  00000000  000d7084  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000008 	.word	0x20000008
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800463c 	.word	0x0800463c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000000c 	.word	0x2000000c
 8000104:	0800463c 	.word	0x0800463c

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_uldivmod>:
 8000220:	2b00      	cmp	r3, #0
 8000222:	d111      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000224:	2a00      	cmp	r2, #0
 8000226:	d10f      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000228:	2900      	cmp	r1, #0
 800022a:	d100      	bne.n	800022e <__aeabi_uldivmod+0xe>
 800022c:	2800      	cmp	r0, #0
 800022e:	d002      	beq.n	8000236 <__aeabi_uldivmod+0x16>
 8000230:	2100      	movs	r1, #0
 8000232:	43c9      	mvns	r1, r1
 8000234:	1c08      	adds	r0, r1, #0
 8000236:	b407      	push	{r0, r1, r2}
 8000238:	4802      	ldr	r0, [pc, #8]	; (8000244 <__aeabi_uldivmod+0x24>)
 800023a:	a102      	add	r1, pc, #8	; (adr r1, 8000244 <__aeabi_uldivmod+0x24>)
 800023c:	1840      	adds	r0, r0, r1
 800023e:	9002      	str	r0, [sp, #8]
 8000240:	bd03      	pop	{r0, r1, pc}
 8000242:	46c0      	nop			; (mov r8, r8)
 8000244:	ffffffd9 	.word	0xffffffd9
 8000248:	b403      	push	{r0, r1}
 800024a:	4668      	mov	r0, sp
 800024c:	b501      	push	{r0, lr}
 800024e:	9802      	ldr	r0, [sp, #8]
 8000250:	f000 f806 	bl	8000260 <__udivmoddi4>
 8000254:	9b01      	ldr	r3, [sp, #4]
 8000256:	469e      	mov	lr, r3
 8000258:	b002      	add	sp, #8
 800025a:	bc0c      	pop	{r2, r3}
 800025c:	4770      	bx	lr
 800025e:	46c0      	nop			; (mov r8, r8)

08000260 <__udivmoddi4>:
 8000260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000262:	464f      	mov	r7, r9
 8000264:	4646      	mov	r6, r8
 8000266:	46d6      	mov	lr, sl
 8000268:	b5c0      	push	{r6, r7, lr}
 800026a:	0004      	movs	r4, r0
 800026c:	b082      	sub	sp, #8
 800026e:	000d      	movs	r5, r1
 8000270:	4691      	mov	r9, r2
 8000272:	4698      	mov	r8, r3
 8000274:	428b      	cmp	r3, r1
 8000276:	d82f      	bhi.n	80002d8 <__udivmoddi4+0x78>
 8000278:	d02c      	beq.n	80002d4 <__udivmoddi4+0x74>
 800027a:	4641      	mov	r1, r8
 800027c:	4648      	mov	r0, r9
 800027e:	f000 f8b1 	bl	80003e4 <__clzdi2>
 8000282:	0029      	movs	r1, r5
 8000284:	0006      	movs	r6, r0
 8000286:	0020      	movs	r0, r4
 8000288:	f000 f8ac 	bl	80003e4 <__clzdi2>
 800028c:	1a33      	subs	r3, r6, r0
 800028e:	469c      	mov	ip, r3
 8000290:	3b20      	subs	r3, #32
 8000292:	469a      	mov	sl, r3
 8000294:	d500      	bpl.n	8000298 <__udivmoddi4+0x38>
 8000296:	e076      	b.n	8000386 <__udivmoddi4+0x126>
 8000298:	464b      	mov	r3, r9
 800029a:	4652      	mov	r2, sl
 800029c:	4093      	lsls	r3, r2
 800029e:	001f      	movs	r7, r3
 80002a0:	464b      	mov	r3, r9
 80002a2:	4662      	mov	r2, ip
 80002a4:	4093      	lsls	r3, r2
 80002a6:	001e      	movs	r6, r3
 80002a8:	42af      	cmp	r7, r5
 80002aa:	d828      	bhi.n	80002fe <__udivmoddi4+0x9e>
 80002ac:	d025      	beq.n	80002fa <__udivmoddi4+0x9a>
 80002ae:	4653      	mov	r3, sl
 80002b0:	1ba4      	subs	r4, r4, r6
 80002b2:	41bd      	sbcs	r5, r7
 80002b4:	2b00      	cmp	r3, #0
 80002b6:	da00      	bge.n	80002ba <__udivmoddi4+0x5a>
 80002b8:	e07b      	b.n	80003b2 <__udivmoddi4+0x152>
 80002ba:	2200      	movs	r2, #0
 80002bc:	2300      	movs	r3, #0
 80002be:	9200      	str	r2, [sp, #0]
 80002c0:	9301      	str	r3, [sp, #4]
 80002c2:	2301      	movs	r3, #1
 80002c4:	4652      	mov	r2, sl
 80002c6:	4093      	lsls	r3, r2
 80002c8:	9301      	str	r3, [sp, #4]
 80002ca:	2301      	movs	r3, #1
 80002cc:	4662      	mov	r2, ip
 80002ce:	4093      	lsls	r3, r2
 80002d0:	9300      	str	r3, [sp, #0]
 80002d2:	e018      	b.n	8000306 <__udivmoddi4+0xa6>
 80002d4:	4282      	cmp	r2, r0
 80002d6:	d9d0      	bls.n	800027a <__udivmoddi4+0x1a>
 80002d8:	2200      	movs	r2, #0
 80002da:	2300      	movs	r3, #0
 80002dc:	9200      	str	r2, [sp, #0]
 80002de:	9301      	str	r3, [sp, #4]
 80002e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	d001      	beq.n	80002ea <__udivmoddi4+0x8a>
 80002e6:	601c      	str	r4, [r3, #0]
 80002e8:	605d      	str	r5, [r3, #4]
 80002ea:	9800      	ldr	r0, [sp, #0]
 80002ec:	9901      	ldr	r1, [sp, #4]
 80002ee:	b002      	add	sp, #8
 80002f0:	bc1c      	pop	{r2, r3, r4}
 80002f2:	4690      	mov	r8, r2
 80002f4:	4699      	mov	r9, r3
 80002f6:	46a2      	mov	sl, r4
 80002f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002fa:	42a3      	cmp	r3, r4
 80002fc:	d9d7      	bls.n	80002ae <__udivmoddi4+0x4e>
 80002fe:	2200      	movs	r2, #0
 8000300:	2300      	movs	r3, #0
 8000302:	9200      	str	r2, [sp, #0]
 8000304:	9301      	str	r3, [sp, #4]
 8000306:	4663      	mov	r3, ip
 8000308:	2b00      	cmp	r3, #0
 800030a:	d0e9      	beq.n	80002e0 <__udivmoddi4+0x80>
 800030c:	07fb      	lsls	r3, r7, #31
 800030e:	4698      	mov	r8, r3
 8000310:	4641      	mov	r1, r8
 8000312:	0872      	lsrs	r2, r6, #1
 8000314:	430a      	orrs	r2, r1
 8000316:	087b      	lsrs	r3, r7, #1
 8000318:	4666      	mov	r6, ip
 800031a:	e00e      	b.n	800033a <__udivmoddi4+0xda>
 800031c:	42ab      	cmp	r3, r5
 800031e:	d101      	bne.n	8000324 <__udivmoddi4+0xc4>
 8000320:	42a2      	cmp	r2, r4
 8000322:	d80c      	bhi.n	800033e <__udivmoddi4+0xde>
 8000324:	1aa4      	subs	r4, r4, r2
 8000326:	419d      	sbcs	r5, r3
 8000328:	2001      	movs	r0, #1
 800032a:	1924      	adds	r4, r4, r4
 800032c:	416d      	adcs	r5, r5
 800032e:	2100      	movs	r1, #0
 8000330:	3e01      	subs	r6, #1
 8000332:	1824      	adds	r4, r4, r0
 8000334:	414d      	adcs	r5, r1
 8000336:	2e00      	cmp	r6, #0
 8000338:	d006      	beq.n	8000348 <__udivmoddi4+0xe8>
 800033a:	42ab      	cmp	r3, r5
 800033c:	d9ee      	bls.n	800031c <__udivmoddi4+0xbc>
 800033e:	3e01      	subs	r6, #1
 8000340:	1924      	adds	r4, r4, r4
 8000342:	416d      	adcs	r5, r5
 8000344:	2e00      	cmp	r6, #0
 8000346:	d1f8      	bne.n	800033a <__udivmoddi4+0xda>
 8000348:	9800      	ldr	r0, [sp, #0]
 800034a:	9901      	ldr	r1, [sp, #4]
 800034c:	4653      	mov	r3, sl
 800034e:	1900      	adds	r0, r0, r4
 8000350:	4169      	adcs	r1, r5
 8000352:	2b00      	cmp	r3, #0
 8000354:	db23      	blt.n	800039e <__udivmoddi4+0x13e>
 8000356:	002b      	movs	r3, r5
 8000358:	4652      	mov	r2, sl
 800035a:	40d3      	lsrs	r3, r2
 800035c:	002a      	movs	r2, r5
 800035e:	4664      	mov	r4, ip
 8000360:	40e2      	lsrs	r2, r4
 8000362:	001c      	movs	r4, r3
 8000364:	4653      	mov	r3, sl
 8000366:	0015      	movs	r5, r2
 8000368:	2b00      	cmp	r3, #0
 800036a:	db2d      	blt.n	80003c8 <__udivmoddi4+0x168>
 800036c:	0026      	movs	r6, r4
 800036e:	4657      	mov	r7, sl
 8000370:	40be      	lsls	r6, r7
 8000372:	0033      	movs	r3, r6
 8000374:	0026      	movs	r6, r4
 8000376:	4667      	mov	r7, ip
 8000378:	40be      	lsls	r6, r7
 800037a:	0032      	movs	r2, r6
 800037c:	1a80      	subs	r0, r0, r2
 800037e:	4199      	sbcs	r1, r3
 8000380:	9000      	str	r0, [sp, #0]
 8000382:	9101      	str	r1, [sp, #4]
 8000384:	e7ac      	b.n	80002e0 <__udivmoddi4+0x80>
 8000386:	4662      	mov	r2, ip
 8000388:	2320      	movs	r3, #32
 800038a:	1a9b      	subs	r3, r3, r2
 800038c:	464a      	mov	r2, r9
 800038e:	40da      	lsrs	r2, r3
 8000390:	4661      	mov	r1, ip
 8000392:	0013      	movs	r3, r2
 8000394:	4642      	mov	r2, r8
 8000396:	408a      	lsls	r2, r1
 8000398:	0017      	movs	r7, r2
 800039a:	431f      	orrs	r7, r3
 800039c:	e780      	b.n	80002a0 <__udivmoddi4+0x40>
 800039e:	4662      	mov	r2, ip
 80003a0:	2320      	movs	r3, #32
 80003a2:	1a9b      	subs	r3, r3, r2
 80003a4:	002a      	movs	r2, r5
 80003a6:	4666      	mov	r6, ip
 80003a8:	409a      	lsls	r2, r3
 80003aa:	0023      	movs	r3, r4
 80003ac:	40f3      	lsrs	r3, r6
 80003ae:	4313      	orrs	r3, r2
 80003b0:	e7d4      	b.n	800035c <__udivmoddi4+0xfc>
 80003b2:	4662      	mov	r2, ip
 80003b4:	2320      	movs	r3, #32
 80003b6:	2100      	movs	r1, #0
 80003b8:	1a9b      	subs	r3, r3, r2
 80003ba:	2200      	movs	r2, #0
 80003bc:	9100      	str	r1, [sp, #0]
 80003be:	9201      	str	r2, [sp, #4]
 80003c0:	2201      	movs	r2, #1
 80003c2:	40da      	lsrs	r2, r3
 80003c4:	9201      	str	r2, [sp, #4]
 80003c6:	e780      	b.n	80002ca <__udivmoddi4+0x6a>
 80003c8:	2320      	movs	r3, #32
 80003ca:	4662      	mov	r2, ip
 80003cc:	0026      	movs	r6, r4
 80003ce:	1a9b      	subs	r3, r3, r2
 80003d0:	40de      	lsrs	r6, r3
 80003d2:	002f      	movs	r7, r5
 80003d4:	46b0      	mov	r8, r6
 80003d6:	4666      	mov	r6, ip
 80003d8:	40b7      	lsls	r7, r6
 80003da:	4646      	mov	r6, r8
 80003dc:	003b      	movs	r3, r7
 80003de:	4333      	orrs	r3, r6
 80003e0:	e7c8      	b.n	8000374 <__udivmoddi4+0x114>
 80003e2:	46c0      	nop			; (mov r8, r8)

080003e4 <__clzdi2>:
 80003e4:	b510      	push	{r4, lr}
 80003e6:	2900      	cmp	r1, #0
 80003e8:	d103      	bne.n	80003f2 <__clzdi2+0xe>
 80003ea:	f000 f807 	bl	80003fc <__clzsi2>
 80003ee:	3020      	adds	r0, #32
 80003f0:	e002      	b.n	80003f8 <__clzdi2+0x14>
 80003f2:	1c08      	adds	r0, r1, #0
 80003f4:	f000 f802 	bl	80003fc <__clzsi2>
 80003f8:	bd10      	pop	{r4, pc}
 80003fa:	46c0      	nop			; (mov r8, r8)

080003fc <__clzsi2>:
 80003fc:	211c      	movs	r1, #28
 80003fe:	2301      	movs	r3, #1
 8000400:	041b      	lsls	r3, r3, #16
 8000402:	4298      	cmp	r0, r3
 8000404:	d301      	bcc.n	800040a <__clzsi2+0xe>
 8000406:	0c00      	lsrs	r0, r0, #16
 8000408:	3910      	subs	r1, #16
 800040a:	0a1b      	lsrs	r3, r3, #8
 800040c:	4298      	cmp	r0, r3
 800040e:	d301      	bcc.n	8000414 <__clzsi2+0x18>
 8000410:	0a00      	lsrs	r0, r0, #8
 8000412:	3908      	subs	r1, #8
 8000414:	091b      	lsrs	r3, r3, #4
 8000416:	4298      	cmp	r0, r3
 8000418:	d301      	bcc.n	800041e <__clzsi2+0x22>
 800041a:	0900      	lsrs	r0, r0, #4
 800041c:	3904      	subs	r1, #4
 800041e:	a202      	add	r2, pc, #8	; (adr r2, 8000428 <__clzsi2+0x2c>)
 8000420:	5c10      	ldrb	r0, [r2, r0]
 8000422:	1840      	adds	r0, r0, r1
 8000424:	4770      	bx	lr
 8000426:	46c0      	nop			; (mov r8, r8)
 8000428:	02020304 	.word	0x02020304
 800042c:	01010101 	.word	0x01010101
	...

08000438 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000438:	b590      	push	{r4, r7, lr}
 800043a:	b089      	sub	sp, #36	; 0x24
 800043c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800043e:	240c      	movs	r4, #12
 8000440:	193b      	adds	r3, r7, r4
 8000442:	0018      	movs	r0, r3
 8000444:	2314      	movs	r3, #20
 8000446:	001a      	movs	r2, r3
 8000448:	2100      	movs	r1, #0
 800044a:	f004 f8ee 	bl	800462a <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800044e:	4b4c      	ldr	r3, [pc, #304]	; (8000580 <MX_GPIO_Init+0x148>)
 8000450:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000452:	4b4b      	ldr	r3, [pc, #300]	; (8000580 <MX_GPIO_Init+0x148>)
 8000454:	2104      	movs	r1, #4
 8000456:	430a      	orrs	r2, r1
 8000458:	62da      	str	r2, [r3, #44]	; 0x2c
 800045a:	4b49      	ldr	r3, [pc, #292]	; (8000580 <MX_GPIO_Init+0x148>)
 800045c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800045e:	2204      	movs	r2, #4
 8000460:	4013      	ands	r3, r2
 8000462:	60bb      	str	r3, [r7, #8]
 8000464:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000466:	4b46      	ldr	r3, [pc, #280]	; (8000580 <MX_GPIO_Init+0x148>)
 8000468:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800046a:	4b45      	ldr	r3, [pc, #276]	; (8000580 <MX_GPIO_Init+0x148>)
 800046c:	2101      	movs	r1, #1
 800046e:	430a      	orrs	r2, r1
 8000470:	62da      	str	r2, [r3, #44]	; 0x2c
 8000472:	4b43      	ldr	r3, [pc, #268]	; (8000580 <MX_GPIO_Init+0x148>)
 8000474:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000476:	2201      	movs	r2, #1
 8000478:	4013      	ands	r3, r2
 800047a:	607b      	str	r3, [r7, #4]
 800047c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800047e:	4b40      	ldr	r3, [pc, #256]	; (8000580 <MX_GPIO_Init+0x148>)
 8000480:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000482:	4b3f      	ldr	r3, [pc, #252]	; (8000580 <MX_GPIO_Init+0x148>)
 8000484:	2102      	movs	r1, #2
 8000486:	430a      	orrs	r2, r1
 8000488:	62da      	str	r2, [r3, #44]	; 0x2c
 800048a:	4b3d      	ldr	r3, [pc, #244]	; (8000580 <MX_GPIO_Init+0x148>)
 800048c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800048e:	2202      	movs	r2, #2
 8000490:	4013      	ands	r3, r2
 8000492:	603b      	str	r3, [r7, #0]
 8000494:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RSSI_3_ED_Pin|RSSI_2_LED_Pin|RSSI_1_LED_Pin|TX_LED_Pin 
 8000496:	493b      	ldr	r1, [pc, #236]	; (8000584 <MX_GPIO_Init+0x14c>)
 8000498:	23a0      	movs	r3, #160	; 0xa0
 800049a:	05db      	lsls	r3, r3, #23
 800049c:	2200      	movs	r2, #0
 800049e:	0018      	movs	r0, r3
 80004a0:	f001 fc7d 	bl	8001d9e <HAL_GPIO_WritePin>
                          |XBEE_RESETn_Pin|GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MASTER_LED_Pin|STATUS_LED_Pin, GPIO_PIN_RESET);
 80004a4:	4b38      	ldr	r3, [pc, #224]	; (8000588 <MX_GPIO_Init+0x150>)
 80004a6:	2200      	movs	r2, #0
 80004a8:	2103      	movs	r1, #3
 80004aa:	0018      	movs	r0, r3
 80004ac:	f001 fc77 	bl	8001d9e <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SWITCH_Pin;
 80004b0:	193b      	adds	r3, r7, r4
 80004b2:	2280      	movs	r2, #128	; 0x80
 80004b4:	01d2      	lsls	r2, r2, #7
 80004b6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80004b8:	193b      	adds	r3, r7, r4
 80004ba:	2200      	movs	r2, #0
 80004bc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004be:	193b      	adds	r3, r7, r4
 80004c0:	2200      	movs	r2, #0
 80004c2:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(SWITCH_GPIO_Port, &GPIO_InitStruct);
 80004c4:	193b      	adds	r3, r7, r4
 80004c6:	4a31      	ldr	r2, [pc, #196]	; (800058c <MX_GPIO_Init+0x154>)
 80004c8:	0019      	movs	r1, r3
 80004ca:	0010      	movs	r0, r2
 80004cc:	f001 facc 	bl	8001a68 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = HEARTBEAT_Pin;
 80004d0:	0021      	movs	r1, r4
 80004d2:	187b      	adds	r3, r7, r1
 80004d4:	2280      	movs	r2, #128	; 0x80
 80004d6:	0212      	lsls	r2, r2, #8
 80004d8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80004da:	000c      	movs	r4, r1
 80004dc:	193b      	adds	r3, r7, r4
 80004de:	4a2c      	ldr	r2, [pc, #176]	; (8000590 <MX_GPIO_Init+0x158>)
 80004e0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004e2:	193b      	adds	r3, r7, r4
 80004e4:	2200      	movs	r2, #0
 80004e6:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(HEARTBEAT_GPIO_Port, &GPIO_InitStruct);
 80004e8:	193b      	adds	r3, r7, r4
 80004ea:	4a28      	ldr	r2, [pc, #160]	; (800058c <MX_GPIO_Init+0x154>)
 80004ec:	0019      	movs	r1, r3
 80004ee:	0010      	movs	r0, r2
 80004f0:	f001 faba 	bl	8001a68 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin 
                           PAPin PA12 */
  GPIO_InitStruct.Pin = RSSI_3_ED_Pin|RSSI_2_LED_Pin|RSSI_1_LED_Pin|TX_LED_Pin 
 80004f4:	193b      	adds	r3, r7, r4
 80004f6:	4a23      	ldr	r2, [pc, #140]	; (8000584 <MX_GPIO_Init+0x14c>)
 80004f8:	601a      	str	r2, [r3, #0]
                          |XBEE_RESETn_Pin|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004fa:	193b      	adds	r3, r7, r4
 80004fc:	2201      	movs	r2, #1
 80004fe:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000500:	193b      	adds	r3, r7, r4
 8000502:	2200      	movs	r2, #0
 8000504:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000506:	193b      	adds	r3, r7, r4
 8000508:	2200      	movs	r2, #0
 800050a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800050c:	193a      	adds	r2, r7, r4
 800050e:	23a0      	movs	r3, #160	; 0xa0
 8000510:	05db      	lsls	r3, r3, #23
 8000512:	0011      	movs	r1, r2
 8000514:	0018      	movs	r0, r3
 8000516:	f001 faa7 	bl	8001a68 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = MASTER_LED_Pin|STATUS_LED_Pin;
 800051a:	0021      	movs	r1, r4
 800051c:	187b      	adds	r3, r7, r1
 800051e:	2203      	movs	r2, #3
 8000520:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000522:	187b      	adds	r3, r7, r1
 8000524:	2201      	movs	r2, #1
 8000526:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000528:	187b      	adds	r3, r7, r1
 800052a:	2200      	movs	r2, #0
 800052c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800052e:	187b      	adds	r3, r7, r1
 8000530:	2200      	movs	r2, #0
 8000532:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000534:	000c      	movs	r4, r1
 8000536:	187b      	adds	r3, r7, r1
 8000538:	4a13      	ldr	r2, [pc, #76]	; (8000588 <MX_GPIO_Init+0x150>)
 800053a:	0019      	movs	r1, r3
 800053c:	0010      	movs	r0, r2
 800053e:	f001 fa93 	bl	8001a68 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA11 PAPin */
  GPIO_InitStruct.Pin = GPIO_PIN_11|BAT_LOW_Pin;
 8000542:	0021      	movs	r1, r4
 8000544:	187b      	adds	r3, r7, r1
 8000546:	2288      	movs	r2, #136	; 0x88
 8000548:	0212      	lsls	r2, r2, #8
 800054a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800054c:	187b      	adds	r3, r7, r1
 800054e:	2200      	movs	r2, #0
 8000550:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000552:	187b      	adds	r3, r7, r1
 8000554:	2200      	movs	r2, #0
 8000556:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000558:	187a      	adds	r2, r7, r1
 800055a:	23a0      	movs	r3, #160	; 0xa0
 800055c:	05db      	lsls	r3, r3, #23
 800055e:	0011      	movs	r1, r2
 8000560:	0018      	movs	r0, r3
 8000562:	f001 fa81 	bl	8001a68 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8000566:	2200      	movs	r2, #0
 8000568:	2100      	movs	r1, #0
 800056a:	2007      	movs	r0, #7
 800056c:	f001 fa02 	bl	8001974 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8000570:	2007      	movs	r0, #7
 8000572:	f001 fa14 	bl	800199e <HAL_NVIC_EnableIRQ>

}
 8000576:	46c0      	nop			; (mov r8, r8)
 8000578:	46bd      	mov	sp, r7
 800057a:	b009      	add	sp, #36	; 0x24
 800057c:	bd90      	pop	{r4, r7, pc}
 800057e:	46c0      	nop			; (mov r8, r8)
 8000580:	40021000 	.word	0x40021000
 8000584:	000011f0 	.word	0x000011f0
 8000588:	50000400 	.word	0x50000400
 800058c:	50000800 	.word	0x50000800
 8000590:	10210000 	.word	0x10210000

08000594 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8000598:	4b1b      	ldr	r3, [pc, #108]	; (8000608 <MX_I2C1_Init+0x74>)
 800059a:	4a1c      	ldr	r2, [pc, #112]	; (800060c <MX_I2C1_Init+0x78>)
 800059c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 800059e:	4b1a      	ldr	r3, [pc, #104]	; (8000608 <MX_I2C1_Init+0x74>)
 80005a0:	4a1b      	ldr	r2, [pc, #108]	; (8000610 <MX_I2C1_Init+0x7c>)
 80005a2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80005a4:	4b18      	ldr	r3, [pc, #96]	; (8000608 <MX_I2C1_Init+0x74>)
 80005a6:	2200      	movs	r2, #0
 80005a8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80005aa:	4b17      	ldr	r3, [pc, #92]	; (8000608 <MX_I2C1_Init+0x74>)
 80005ac:	2201      	movs	r2, #1
 80005ae:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80005b0:	4b15      	ldr	r3, [pc, #84]	; (8000608 <MX_I2C1_Init+0x74>)
 80005b2:	2200      	movs	r2, #0
 80005b4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80005b6:	4b14      	ldr	r3, [pc, #80]	; (8000608 <MX_I2C1_Init+0x74>)
 80005b8:	2200      	movs	r2, #0
 80005ba:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80005bc:	4b12      	ldr	r3, [pc, #72]	; (8000608 <MX_I2C1_Init+0x74>)
 80005be:	2200      	movs	r2, #0
 80005c0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80005c2:	4b11      	ldr	r3, [pc, #68]	; (8000608 <MX_I2C1_Init+0x74>)
 80005c4:	2200      	movs	r2, #0
 80005c6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80005c8:	4b0f      	ldr	r3, [pc, #60]	; (8000608 <MX_I2C1_Init+0x74>)
 80005ca:	2200      	movs	r2, #0
 80005cc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80005ce:	4b0e      	ldr	r3, [pc, #56]	; (8000608 <MX_I2C1_Init+0x74>)
 80005d0:	0018      	movs	r0, r3
 80005d2:	f001 fc39 	bl	8001e48 <HAL_I2C_Init>
 80005d6:	1e03      	subs	r3, r0, #0
 80005d8:	d001      	beq.n	80005de <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80005da:	f000 fd59 	bl	8001090 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80005de:	4b0a      	ldr	r3, [pc, #40]	; (8000608 <MX_I2C1_Init+0x74>)
 80005e0:	2100      	movs	r1, #0
 80005e2:	0018      	movs	r0, r3
 80005e4:	f001 fcc6 	bl	8001f74 <HAL_I2CEx_ConfigAnalogFilter>
 80005e8:	1e03      	subs	r3, r0, #0
 80005ea:	d001      	beq.n	80005f0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80005ec:	f000 fd50 	bl	8001090 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80005f0:	4b05      	ldr	r3, [pc, #20]	; (8000608 <MX_I2C1_Init+0x74>)
 80005f2:	2100      	movs	r1, #0
 80005f4:	0018      	movs	r0, r3
 80005f6:	f001 fd09 	bl	800200c <HAL_I2CEx_ConfigDigitalFilter>
 80005fa:	1e03      	subs	r3, r0, #0
 80005fc:	d001      	beq.n	8000602 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80005fe:	f000 fd47 	bl	8001090 <Error_Handler>
  }

}
 8000602:	46c0      	nop			; (mov r8, r8)
 8000604:	46bd      	mov	sp, r7
 8000606:	bd80      	pop	{r7, pc}
 8000608:	20000040 	.word	0x20000040
 800060c:	40005400 	.word	0x40005400
 8000610:	00707cbb 	.word	0x00707cbb

08000614 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b088      	sub	sp, #32
 8000618:	af00      	add	r7, sp, #0
 800061a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800061c:	230c      	movs	r3, #12
 800061e:	18fb      	adds	r3, r7, r3
 8000620:	0018      	movs	r0, r3
 8000622:	2314      	movs	r3, #20
 8000624:	001a      	movs	r2, r3
 8000626:	2100      	movs	r1, #0
 8000628:	f003 ffff 	bl	800462a <memset>
  if(i2cHandle->Instance==I2C1)
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	4a17      	ldr	r2, [pc, #92]	; (8000690 <HAL_I2C_MspInit+0x7c>)
 8000632:	4293      	cmp	r3, r2
 8000634:	d128      	bne.n	8000688 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000636:	4b17      	ldr	r3, [pc, #92]	; (8000694 <HAL_I2C_MspInit+0x80>)
 8000638:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800063a:	4b16      	ldr	r3, [pc, #88]	; (8000694 <HAL_I2C_MspInit+0x80>)
 800063c:	2102      	movs	r1, #2
 800063e:	430a      	orrs	r2, r1
 8000640:	62da      	str	r2, [r3, #44]	; 0x2c
 8000642:	4b14      	ldr	r3, [pc, #80]	; (8000694 <HAL_I2C_MspInit+0x80>)
 8000644:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000646:	2202      	movs	r2, #2
 8000648:	4013      	ands	r3, r2
 800064a:	60bb      	str	r3, [r7, #8]
 800064c:	68bb      	ldr	r3, [r7, #8]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800064e:	210c      	movs	r1, #12
 8000650:	187b      	adds	r3, r7, r1
 8000652:	22c0      	movs	r2, #192	; 0xc0
 8000654:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000656:	187b      	adds	r3, r7, r1
 8000658:	2212      	movs	r2, #18
 800065a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800065c:	187b      	adds	r3, r7, r1
 800065e:	2201      	movs	r2, #1
 8000660:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000662:	187b      	adds	r3, r7, r1
 8000664:	2203      	movs	r2, #3
 8000666:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8000668:	187b      	adds	r3, r7, r1
 800066a:	2201      	movs	r2, #1
 800066c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800066e:	187b      	adds	r3, r7, r1
 8000670:	4a09      	ldr	r2, [pc, #36]	; (8000698 <HAL_I2C_MspInit+0x84>)
 8000672:	0019      	movs	r1, r3
 8000674:	0010      	movs	r0, r2
 8000676:	f001 f9f7 	bl	8001a68 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800067a:	4b06      	ldr	r3, [pc, #24]	; (8000694 <HAL_I2C_MspInit+0x80>)
 800067c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800067e:	4b05      	ldr	r3, [pc, #20]	; (8000694 <HAL_I2C_MspInit+0x80>)
 8000680:	2180      	movs	r1, #128	; 0x80
 8000682:	0389      	lsls	r1, r1, #14
 8000684:	430a      	orrs	r2, r1
 8000686:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000688:	46c0      	nop			; (mov r8, r8)
 800068a:	46bd      	mov	sp, r7
 800068c:	b008      	add	sp, #32
 800068e:	bd80      	pop	{r7, pc}
 8000690:	40005400 	.word	0x40005400
 8000694:	40021000 	.word	0x40021000
 8000698:	50000400 	.word	0x50000400

0800069c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b082      	sub	sp, #8
 80006a0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006a2:	f001 f841 	bl	8001728 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006a6:	f000 f96d 	bl	8000984 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006aa:	f7ff fec5 	bl	8000438 <MX_GPIO_Init>
  MX_I2C1_Init();
 80006ae:	f7ff ff71 	bl	8000594 <MX_I2C1_Init>
  MX_TIM3_Init();
 80006b2:	f000 fd93 	bl	80011dc <MX_TIM3_Init>
  MX_USART1_UART_Init();
 80006b6:	f000 fe51 	bl	800135c <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80006ba:	f000 fe7f 	bl	80013bc <MX_USART2_UART_Init>
  MX_USART4_UART_Init();
 80006be:	f000 fead 	bl	800141c <MX_USART4_UART_Init>
  MX_USART5_UART_Init();
 80006c2:	f000 fedb 	bl	800147c <MX_USART5_UART_Init>
  /* USER CODE BEGIN 2 */

  /* Read the switch to see if we are a master or slave */
  mode = (bool)(HAL_GPIO_ReadPin(GPIOC, SWITCH_Pin));
 80006c6:	2380      	movs	r3, #128	; 0x80
 80006c8:	01db      	lsls	r3, r3, #7
 80006ca:	4a90      	ldr	r2, [pc, #576]	; (800090c <main+0x270>)
 80006cc:	0019      	movs	r1, r3
 80006ce:	0010      	movs	r0, r2
 80006d0:	f001 fb48 	bl	8001d64 <HAL_GPIO_ReadPin>
 80006d4:	0003      	movs	r3, r0
 80006d6:	1e5a      	subs	r2, r3, #1
 80006d8:	4193      	sbcs	r3, r2
 80006da:	b2da      	uxtb	r2, r3
 80006dc:	4b8c      	ldr	r3, [pc, #560]	; (8000910 <main+0x274>)
 80006de:	701a      	strb	r2, [r3, #0]

  /* If we are in slave mode, enable 3 radio inputs, and the XBee channel */
  if (mode == SLAVE)
 80006e0:	4b8b      	ldr	r3, [pc, #556]	; (8000910 <main+0x274>)
 80006e2:	781b      	ldrb	r3, [r3, #0]
 80006e4:	2201      	movs	r2, #1
 80006e6:	4053      	eors	r3, r2
 80006e8:	b2db      	uxtb	r3, r3
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d018      	beq.n	8000720 <main+0x84>
  {
	  HAL_UART_Receive_IT(&huart4, &radioRedIn, 1);
 80006ee:	4989      	ldr	r1, [pc, #548]	; (8000914 <main+0x278>)
 80006f0:	4b89      	ldr	r3, [pc, #548]	; (8000918 <main+0x27c>)
 80006f2:	2201      	movs	r2, #1
 80006f4:	0018      	movs	r0, r3
 80006f6:	f002 ffef 	bl	80036d8 <HAL_UART_Receive_IT>
	  HAL_UART_Receive_IT(&huart2, &radioBlueIn, 1);
 80006fa:	4988      	ldr	r1, [pc, #544]	; (800091c <main+0x280>)
 80006fc:	4b88      	ldr	r3, [pc, #544]	; (8000920 <main+0x284>)
 80006fe:	2201      	movs	r2, #1
 8000700:	0018      	movs	r0, r3
 8000702:	f002 ffe9 	bl	80036d8 <HAL_UART_Receive_IT>
	  HAL_UART_Receive_IT(&huart5, &radioAuxIn, 1);
 8000706:	4987      	ldr	r1, [pc, #540]	; (8000924 <main+0x288>)
 8000708:	4b87      	ldr	r3, [pc, #540]	; (8000928 <main+0x28c>)
 800070a:	2201      	movs	r2, #1
 800070c:	0018      	movs	r0, r3
 800070e:	f002 ffe3 	bl	80036d8 <HAL_UART_Receive_IT>
	  HAL_UART_Receive_IT(&huart1, xbeeBuffer, 1);
 8000712:	4986      	ldr	r1, [pc, #536]	; (800092c <main+0x290>)
 8000714:	4b86      	ldr	r3, [pc, #536]	; (8000930 <main+0x294>)
 8000716:	2201      	movs	r2, #1
 8000718:	0018      	movs	r0, r3
 800071a:	f002 ffdd 	bl	80036d8 <HAL_UART_Receive_IT>
 800071e:	e00f      	b.n	8000740 <main+0xa4>
  }
  /* If we are in master mode, enable PC communications and the XBee channel */
  else if (mode == MASTER)
 8000720:	4b7b      	ldr	r3, [pc, #492]	; (8000910 <main+0x274>)
 8000722:	781b      	ldrb	r3, [r3, #0]
 8000724:	2b00      	cmp	r3, #0
 8000726:	d00b      	beq.n	8000740 <main+0xa4>
  {
	  HAL_UART_Receive_IT(&huart5, &PCIn, 1);
 8000728:	4982      	ldr	r1, [pc, #520]	; (8000934 <main+0x298>)
 800072a:	4b7f      	ldr	r3, [pc, #508]	; (8000928 <main+0x28c>)
 800072c:	2201      	movs	r2, #1
 800072e:	0018      	movs	r0, r3
 8000730:	f002 ffd2 	bl	80036d8 <HAL_UART_Receive_IT>
	  HAL_UART_Receive_IT(&huart1, xbeeBuffer, 1);
 8000734:	497d      	ldr	r1, [pc, #500]	; (800092c <main+0x290>)
 8000736:	4b7e      	ldr	r3, [pc, #504]	; (8000930 <main+0x294>)
 8000738:	2201      	movs	r2, #1
 800073a:	0018      	movs	r0, r3
 800073c:	f002 ffcc 	bl	80036d8 <HAL_UART_Receive_IT>
  }

  /* Wake up the XBee */
  HAL_GPIO_WritePin(GPIOA, XBEE_RESETn_Pin, GPIO_PIN_SET);
 8000740:	2380      	movs	r3, #128	; 0x80
 8000742:	0059      	lsls	r1, r3, #1
 8000744:	23a0      	movs	r3, #160	; 0xa0
 8000746:	05db      	lsls	r3, r3, #23
 8000748:	2201      	movs	r2, #1
 800074a:	0018      	movs	r0, r3
 800074c:	f001 fb27 	bl	8001d9e <HAL_GPIO_WritePin>

  /* Boot up the system */
  Boot_Sequence(mode);
 8000750:	4b6f      	ldr	r3, [pc, #444]	; (8000910 <main+0x274>)
 8000752:	781b      	ldrb	r3, [r3, #0]
 8000754:	0018      	movs	r0, r3
 8000756:	f000 f98d 	bl	8000a74 <Boot_Sequence>
		/* Here, 4 things could happen:	 */
		/* - A packet from the red radio comes in. We send this out via the XBee */
		/* - A packet from the blue radio comes in. We send this out via the XBee */
		/* - A packet from the aux radio comes in. We send this out via the XBee */
		/* - A packet from the XBee comes in. We handle this command */
		if (mode == SLAVE)
 800075a:	4b6d      	ldr	r3, [pc, #436]	; (8000910 <main+0x274>)
 800075c:	781b      	ldrb	r3, [r3, #0]
 800075e:	2201      	movs	r2, #1
 8000760:	4053      	eors	r3, r2
 8000762:	b2db      	uxtb	r3, r3
 8000764:	2b00      	cmp	r3, #0
 8000766:	d044      	beq.n	80007f2 <main+0x156>
		{

			if (radioRedPacketComplete == true)
 8000768:	4b73      	ldr	r3, [pc, #460]	; (8000938 <main+0x29c>)
 800076a:	781b      	ldrb	r3, [r3, #0]
 800076c:	2b00      	cmp	r3, #0
 800076e:	d012      	beq.n	8000796 <main+0xfa>
			{

				XBee_Transmit(radioRedBuffer, radioRedTracker);
 8000770:	4b72      	ldr	r3, [pc, #456]	; (800093c <main+0x2a0>)
 8000772:	781a      	ldrb	r2, [r3, #0]
 8000774:	4b72      	ldr	r3, [pc, #456]	; (8000940 <main+0x2a4>)
 8000776:	0011      	movs	r1, r2
 8000778:	0018      	movs	r0, r3
 800077a:	f000 fa85 	bl	8000c88 <XBee_Transmit>

				memset(radioRedBuffer, 0, 100);
 800077e:	4b70      	ldr	r3, [pc, #448]	; (8000940 <main+0x2a4>)
 8000780:	2264      	movs	r2, #100	; 0x64
 8000782:	2100      	movs	r1, #0
 8000784:	0018      	movs	r0, r3
 8000786:	f003 ff50 	bl	800462a <memset>
				radioRedTracker = 0;
 800078a:	4b6c      	ldr	r3, [pc, #432]	; (800093c <main+0x2a0>)
 800078c:	2200      	movs	r2, #0
 800078e:	701a      	strb	r2, [r3, #0]

				radioRedPacketComplete = false;
 8000790:	4b69      	ldr	r3, [pc, #420]	; (8000938 <main+0x29c>)
 8000792:	2200      	movs	r2, #0
 8000794:	701a      	strb	r2, [r3, #0]

			}

			if (radioBluePacketComplete == true)
 8000796:	4b6b      	ldr	r3, [pc, #428]	; (8000944 <main+0x2a8>)
 8000798:	781b      	ldrb	r3, [r3, #0]
 800079a:	2b00      	cmp	r3, #0
 800079c:	d012      	beq.n	80007c4 <main+0x128>
			{

				XBee_Transmit(radioBlueBuffer, radioBlueTracker);
 800079e:	4b6a      	ldr	r3, [pc, #424]	; (8000948 <main+0x2ac>)
 80007a0:	781a      	ldrb	r2, [r3, #0]
 80007a2:	4b6a      	ldr	r3, [pc, #424]	; (800094c <main+0x2b0>)
 80007a4:	0011      	movs	r1, r2
 80007a6:	0018      	movs	r0, r3
 80007a8:	f000 fa6e 	bl	8000c88 <XBee_Transmit>

				memset(radioBlueBuffer, 0, 100);
 80007ac:	4b67      	ldr	r3, [pc, #412]	; (800094c <main+0x2b0>)
 80007ae:	2264      	movs	r2, #100	; 0x64
 80007b0:	2100      	movs	r1, #0
 80007b2:	0018      	movs	r0, r3
 80007b4:	f003 ff39 	bl	800462a <memset>
				radioBlueTracker = 0;
 80007b8:	4b63      	ldr	r3, [pc, #396]	; (8000948 <main+0x2ac>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	701a      	strb	r2, [r3, #0]

				radioBluePacketComplete = false;
 80007be:	4b61      	ldr	r3, [pc, #388]	; (8000944 <main+0x2a8>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	701a      	strb	r2, [r3, #0]

			}

			if (radioAuxPacketComplete == true)
 80007c4:	4b62      	ldr	r3, [pc, #392]	; (8000950 <main+0x2b4>)
 80007c6:	781b      	ldrb	r3, [r3, #0]
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d012      	beq.n	80007f2 <main+0x156>
			{

				XBee_Transmit(radioAuxBuffer, radioAuxTracker);
 80007cc:	4b61      	ldr	r3, [pc, #388]	; (8000954 <main+0x2b8>)
 80007ce:	781a      	ldrb	r2, [r3, #0]
 80007d0:	4b61      	ldr	r3, [pc, #388]	; (8000958 <main+0x2bc>)
 80007d2:	0011      	movs	r1, r2
 80007d4:	0018      	movs	r0, r3
 80007d6:	f000 fa57 	bl	8000c88 <XBee_Transmit>

				memset(radioAuxBuffer, 0, 100);
 80007da:	4b5f      	ldr	r3, [pc, #380]	; (8000958 <main+0x2bc>)
 80007dc:	2264      	movs	r2, #100	; 0x64
 80007de:	2100      	movs	r1, #0
 80007e0:	0018      	movs	r0, r3
 80007e2:	f003 ff22 	bl	800462a <memset>
				radioAuxTracker = 0;
 80007e6:	4b5b      	ldr	r3, [pc, #364]	; (8000954 <main+0x2b8>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	701a      	strb	r2, [r3, #0]

				radioAuxPacketComplete = false;
 80007ec:	4b58      	ldr	r3, [pc, #352]	; (8000950 <main+0x2b4>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	701a      	strb	r2, [r3, #0]
		/* Handle the master mode */
		/* Here, 3 things could happen:	 */
		/* - A packet from the Xbee comes in. We handle this data */
		/* - A packet from the PC comes in. We handle this command (TODO) */
		/* - The heartbeat button is pushed. We send out a signal to make the slaves blink (TODO) */
		if (mode == MASTER)
 80007f2:	4b47      	ldr	r3, [pc, #284]	; (8000910 <main+0x274>)
 80007f4:	781b      	ldrb	r3, [r3, #0]
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d060      	beq.n	80008bc <main+0x220>
		{

			if (xbeePacketComplete == true)
 80007fa:	4b58      	ldr	r3, [pc, #352]	; (800095c <main+0x2c0>)
 80007fc:	781b      	ldrb	r3, [r3, #0]
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d04c      	beq.n	800089c <main+0x200>
				/* If this exact key isn't received, then we can discard it and it must be noise or some message we aren't interested in */
				/* This is STILL flawed though! THere's a chance the XBee might have that exact ^ structure embedded in its header */
				uint8_t index;
				uint8_t radioPacketLength;

				for (index = 0; index <= 100; index++)
 8000802:	1dfb      	adds	r3, r7, #7
 8000804:	2200      	movs	r2, #0
 8000806:	701a      	strb	r2, [r3, #0]
 8000808:	e035      	b.n	8000876 <main+0x1da>
				{

					/* See if this matches the start of a valid punch data radio packet */
					if (xbeeBuffer[index] == 0xFF && xbeeBuffer[index + 1] == 0x02 && xbeeBuffer[index + 2] == 0xD3)
 800080a:	1dfb      	adds	r3, r7, #7
 800080c:	781b      	ldrb	r3, [r3, #0]
 800080e:	4a47      	ldr	r2, [pc, #284]	; (800092c <main+0x290>)
 8000810:	5cd3      	ldrb	r3, [r2, r3]
 8000812:	b2db      	uxtb	r3, r3
 8000814:	2bff      	cmp	r3, #255	; 0xff
 8000816:	d129      	bne.n	800086c <main+0x1d0>
 8000818:	1dfb      	adds	r3, r7, #7
 800081a:	781b      	ldrb	r3, [r3, #0]
 800081c:	3301      	adds	r3, #1
 800081e:	4a43      	ldr	r2, [pc, #268]	; (800092c <main+0x290>)
 8000820:	5cd3      	ldrb	r3, [r2, r3]
 8000822:	b2db      	uxtb	r3, r3
 8000824:	2b02      	cmp	r3, #2
 8000826:	d121      	bne.n	800086c <main+0x1d0>
 8000828:	1dfb      	adds	r3, r7, #7
 800082a:	781b      	ldrb	r3, [r3, #0]
 800082c:	3302      	adds	r3, #2
 800082e:	4a3f      	ldr	r2, [pc, #252]	; (800092c <main+0x290>)
 8000830:	5cd3      	ldrb	r3, [r2, r3]
 8000832:	b2db      	uxtb	r3, r3
 8000834:	2bd3      	cmp	r3, #211	; 0xd3
 8000836:	d119      	bne.n	800086c <main+0x1d0>
					{

						/* Grab the length - this is the next byte, but also add back in the overhead (4 bytes) and checksum (3 bytes) */
						/* This means rather than the interesting data, we are transmitting exactly as if the SRR was plugged into the PC */
						/* This can be easily removed later, if we don't want to worry about the checksum and overhead and just want the pure punch data */
						radioPacketLength = xbeeBuffer[index + 3] + 4 + 3;
 8000838:	1dfb      	adds	r3, r7, #7
 800083a:	781b      	ldrb	r3, [r3, #0]
 800083c:	3303      	adds	r3, #3
 800083e:	4a3b      	ldr	r2, [pc, #236]	; (800092c <main+0x290>)
 8000840:	5cd3      	ldrb	r3, [r2, r3]
 8000842:	b2da      	uxtb	r2, r3
 8000844:	1dbb      	adds	r3, r7, #6
 8000846:	3207      	adds	r2, #7
 8000848:	701a      	strb	r2, [r3, #0]

						memcpy(transmitBuffer, &xbeeBuffer[index], radioPacketLength);
 800084a:	1dfb      	adds	r3, r7, #7
 800084c:	781a      	ldrb	r2, [r3, #0]
 800084e:	4b37      	ldr	r3, [pc, #220]	; (800092c <main+0x290>)
 8000850:	18d1      	adds	r1, r2, r3
 8000852:	1dbb      	adds	r3, r7, #6
 8000854:	781a      	ldrb	r2, [r3, #0]
 8000856:	4b42      	ldr	r3, [pc, #264]	; (8000960 <main+0x2c4>)
 8000858:	0018      	movs	r0, r3
 800085a:	f003 fedd 	bl	8004618 <memcpy>
						HAL_UART_Transmit(&huart5, transmitBuffer, 20, 100);
 800085e:	4940      	ldr	r1, [pc, #256]	; (8000960 <main+0x2c4>)
 8000860:	4831      	ldr	r0, [pc, #196]	; (8000928 <main+0x28c>)
 8000862:	2364      	movs	r3, #100	; 0x64
 8000864:	2214      	movs	r2, #20
 8000866:	f002 fe8f 	bl	8003588 <HAL_UART_Transmit>
						break;
 800086a:	e008      	b.n	800087e <main+0x1e2>
				for (index = 0; index <= 100; index++)
 800086c:	1dfb      	adds	r3, r7, #7
 800086e:	781a      	ldrb	r2, [r3, #0]
 8000870:	1dfb      	adds	r3, r7, #7
 8000872:	3201      	adds	r2, #1
 8000874:	701a      	strb	r2, [r3, #0]
 8000876:	1dfb      	adds	r3, r7, #7
 8000878:	781b      	ldrb	r3, [r3, #0]
 800087a:	2b64      	cmp	r3, #100	; 0x64
 800087c:	d9c5      	bls.n	800080a <main+0x16e>
					}

				}

				/* If the for loop ends normally, then nothing was transmitted and the message was discarded */
				memset(xbeeBuffer, 0, 100);
 800087e:	4b2b      	ldr	r3, [pc, #172]	; (800092c <main+0x290>)
 8000880:	2264      	movs	r2, #100	; 0x64
 8000882:	2100      	movs	r1, #0
 8000884:	0018      	movs	r0, r3
 8000886:	f003 fed0 	bl	800462a <memset>
				xbeePacketComplete = false;
 800088a:	4b34      	ldr	r3, [pc, #208]	; (800095c <main+0x2c0>)
 800088c:	2200      	movs	r2, #0
 800088e:	701a      	strb	r2, [r3, #0]

				HAL_UART_Receive_IT(&huart1, xbeeBuffer, 1);
 8000890:	4926      	ldr	r1, [pc, #152]	; (800092c <main+0x290>)
 8000892:	4b27      	ldr	r3, [pc, #156]	; (8000930 <main+0x294>)
 8000894:	2201      	movs	r2, #1
 8000896:	0018      	movs	r0, r3
 8000898:	f002 ff1e 	bl	80036d8 <HAL_UART_Receive_IT>

			}

			if (PCPacketComplete == true)
 800089c:	4b31      	ldr	r3, [pc, #196]	; (8000964 <main+0x2c8>)
 800089e:	781b      	ldrb	r3, [r3, #0]
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d00b      	beq.n	80008bc <main+0x220>
			{


				/* Do something with the PC Packet */

				memset(PCBuffer, 0, 100);
 80008a4:	4b30      	ldr	r3, [pc, #192]	; (8000968 <main+0x2cc>)
 80008a6:	2264      	movs	r2, #100	; 0x64
 80008a8:	2100      	movs	r1, #0
 80008aa:	0018      	movs	r0, r3
 80008ac:	f003 febd 	bl	800462a <memset>
				PCTracker = 0;
 80008b0:	4b2e      	ldr	r3, [pc, #184]	; (800096c <main+0x2d0>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	701a      	strb	r2, [r3, #0]

				PCPacketComplete = false;
 80008b6:	4b2b      	ldr	r3, [pc, #172]	; (8000964 <main+0x2c8>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	701a      	strb	r2, [r3, #0]
			}

		}

	  	/* In either master or slave mode, blink the status LED */
		if (HAL_GetTick() - timeSinceLastBlink > 500)
 80008bc:	f000 ff8a 	bl	80017d4 <HAL_GetTick>
 80008c0:	0002      	movs	r2, r0
 80008c2:	4b2b      	ldr	r3, [pc, #172]	; (8000970 <main+0x2d4>)
 80008c4:	681b      	ldr	r3, [r3, #0]
 80008c6:	1ad2      	subs	r2, r2, r3
 80008c8:	23fa      	movs	r3, #250	; 0xfa
 80008ca:	005b      	lsls	r3, r3, #1
 80008cc:	429a      	cmp	r2, r3
 80008ce:	d909      	bls.n	80008e4 <main+0x248>
		{
			HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_1);
 80008d0:	4b28      	ldr	r3, [pc, #160]	; (8000974 <main+0x2d8>)
 80008d2:	2102      	movs	r1, #2
 80008d4:	0018      	movs	r0, r3
 80008d6:	f001 fa7f 	bl	8001dd8 <HAL_GPIO_TogglePin>
			timeSinceLastBlink = HAL_GetTick();
 80008da:	f000 ff7b 	bl	80017d4 <HAL_GetTick>
 80008de:	0002      	movs	r2, r0
 80008e0:	4b23      	ldr	r3, [pc, #140]	; (8000970 <main+0x2d4>)
 80008e2:	601a      	str	r2, [r3, #0]
		}

		/* If it's taken 100ms to get through the process of receiving a whole Xbee packet, it must have failed */
		/* So, we reset the steps */
		if ((HAL_GetTick() - xbeeTimeout) > 100)
 80008e4:	f000 ff76 	bl	80017d4 <HAL_GetTick>
 80008e8:	0002      	movs	r2, r0
 80008ea:	4b23      	ldr	r3, [pc, #140]	; (8000978 <main+0x2dc>)
 80008ec:	681b      	ldr	r3, [r3, #0]
 80008ee:	1ad3      	subs	r3, r2, r3
 80008f0:	2b64      	cmp	r3, #100	; 0x64
 80008f2:	d800      	bhi.n	80008f6 <main+0x25a>
 80008f4:	e731      	b.n	800075a <main+0xbe>
		{
			xbeeStep = 1;
 80008f6:	4b21      	ldr	r3, [pc, #132]	; (800097c <main+0x2e0>)
 80008f8:	2201      	movs	r2, #1
 80008fa:	701a      	strb	r2, [r3, #0]
			HAL_UART_Receive_IT(&huart1, &xbeeBuffer[1], 1);
 80008fc:	4920      	ldr	r1, [pc, #128]	; (8000980 <main+0x2e4>)
 80008fe:	4b0c      	ldr	r3, [pc, #48]	; (8000930 <main+0x294>)
 8000900:	2201      	movs	r2, #1
 8000902:	0018      	movs	r0, r3
 8000904:	f002 fee8 	bl	80036d8 <HAL_UART_Receive_IT>
		if (mode == SLAVE)
 8000908:	e727      	b.n	800075a <main+0xbe>
 800090a:	46c0      	nop			; (mov r8, r8)
 800090c:	50000800 	.word	0x50000800
 8000910:	20000154 	.word	0x20000154
 8000914:	20000024 	.word	0x20000024
 8000918:	20000460 	.word	0x20000460
 800091c:	20000025 	.word	0x20000025
 8000920:	200004e0 	.word	0x200004e0
 8000924:	20000026 	.word	0x20000026
 8000928:	20000360 	.word	0x20000360
 800092c:	20000194 	.word	0x20000194
 8000930:	200003e0 	.word	0x200003e0
 8000934:	20000027 	.word	0x20000027
 8000938:	2000002c 	.word	0x2000002c
 800093c:	20000028 	.word	0x20000028
 8000940:	2000025c 	.word	0x2000025c
 8000944:	2000002d 	.word	0x2000002d
 8000948:	20000029 	.word	0x20000029
 800094c:	200001f8 	.word	0x200001f8
 8000950:	2000002e 	.word	0x2000002e
 8000954:	2000002a 	.word	0x2000002a
 8000958:	2000008c 	.word	0x2000008c
 800095c:	20000030 	.word	0x20000030
 8000960:	200002c0 	.word	0x200002c0
 8000964:	2000002f 	.word	0x2000002f
 8000968:	200000f0 	.word	0x200000f0
 800096c:	2000002b 	.word	0x2000002b
 8000970:	2000003c 	.word	0x2000003c
 8000974:	50000400 	.word	0x50000400
 8000978:	20000034 	.word	0x20000034
 800097c:	20000000 	.word	0x20000000
 8000980:	20000195 	.word	0x20000195

08000984 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000984:	b590      	push	{r4, r7, lr}
 8000986:	b09d      	sub	sp, #116	; 0x74
 8000988:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800098a:	2438      	movs	r4, #56	; 0x38
 800098c:	193b      	adds	r3, r7, r4
 800098e:	0018      	movs	r0, r3
 8000990:	2338      	movs	r3, #56	; 0x38
 8000992:	001a      	movs	r2, r3
 8000994:	2100      	movs	r1, #0
 8000996:	f003 fe48 	bl	800462a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800099a:	2324      	movs	r3, #36	; 0x24
 800099c:	18fb      	adds	r3, r7, r3
 800099e:	0018      	movs	r0, r3
 80009a0:	2314      	movs	r3, #20
 80009a2:	001a      	movs	r2, r3
 80009a4:	2100      	movs	r1, #0
 80009a6:	f003 fe40 	bl	800462a <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80009aa:	003b      	movs	r3, r7
 80009ac:	0018      	movs	r0, r3
 80009ae:	2324      	movs	r3, #36	; 0x24
 80009b0:	001a      	movs	r2, r3
 80009b2:	2100      	movs	r1, #0
 80009b4:	f003 fe39 	bl	800462a <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80009b8:	4b2c      	ldr	r3, [pc, #176]	; (8000a6c <SystemClock_Config+0xe8>)
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	4a2c      	ldr	r2, [pc, #176]	; (8000a70 <SystemClock_Config+0xec>)
 80009be:	401a      	ands	r2, r3
 80009c0:	4b2a      	ldr	r3, [pc, #168]	; (8000a6c <SystemClock_Config+0xe8>)
 80009c2:	2180      	movs	r1, #128	; 0x80
 80009c4:	0109      	lsls	r1, r1, #4
 80009c6:	430a      	orrs	r2, r1
 80009c8:	601a      	str	r2, [r3, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80009ca:	0021      	movs	r1, r4
 80009cc:	187b      	adds	r3, r7, r1
 80009ce:	2202      	movs	r2, #2
 80009d0:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80009d2:	187b      	adds	r3, r7, r1
 80009d4:	2201      	movs	r2, #1
 80009d6:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80009d8:	187b      	adds	r3, r7, r1
 80009da:	2210      	movs	r2, #16
 80009dc:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009de:	187b      	adds	r3, r7, r1
 80009e0:	2202      	movs	r2, #2
 80009e2:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80009e4:	187b      	adds	r3, r7, r1
 80009e6:	2200      	movs	r2, #0
 80009e8:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_4;
 80009ea:	187b      	adds	r3, r7, r1
 80009ec:	2280      	movs	r2, #128	; 0x80
 80009ee:	02d2      	lsls	r2, r2, #11
 80009f0:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 80009f2:	187b      	adds	r3, r7, r1
 80009f4:	2280      	movs	r2, #128	; 0x80
 80009f6:	03d2      	lsls	r2, r2, #15
 80009f8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009fa:	187b      	adds	r3, r7, r1
 80009fc:	0018      	movs	r0, r3
 80009fe:	f001 fb51 	bl	80020a4 <HAL_RCC_OscConfig>
 8000a02:	1e03      	subs	r3, r0, #0
 8000a04:	d001      	beq.n	8000a0a <SystemClock_Config+0x86>
  {
    Error_Handler();
 8000a06:	f000 fb43 	bl	8001090 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a0a:	2124      	movs	r1, #36	; 0x24
 8000a0c:	187b      	adds	r3, r7, r1
 8000a0e:	220f      	movs	r2, #15
 8000a10:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a12:	187b      	adds	r3, r7, r1
 8000a14:	2203      	movs	r2, #3
 8000a16:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a18:	187b      	adds	r3, r7, r1
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a1e:	187b      	adds	r3, r7, r1
 8000a20:	2200      	movs	r2, #0
 8000a22:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a24:	187b      	adds	r3, r7, r1
 8000a26:	2200      	movs	r2, #0
 8000a28:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000a2a:	187b      	adds	r3, r7, r1
 8000a2c:	2101      	movs	r1, #1
 8000a2e:	0018      	movs	r0, r3
 8000a30:	f001 ff08 	bl	8002844 <HAL_RCC_ClockConfig>
 8000a34:	1e03      	subs	r3, r0, #0
 8000a36:	d001      	beq.n	8000a3c <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8000a38:	f000 fb2a 	bl	8001090 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2
 8000a3c:	003b      	movs	r3, r7
 8000a3e:	220b      	movs	r2, #11
 8000a40:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_I2C1;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000a42:	003b      	movs	r3, r7
 8000a44:	2200      	movs	r2, #0
 8000a46:	609a      	str	r2, [r3, #8]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000a48:	003b      	movs	r3, r7
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	60da      	str	r2, [r3, #12]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000a4e:	003b      	movs	r3, r7
 8000a50:	2200      	movs	r2, #0
 8000a52:	615a      	str	r2, [r3, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a54:	003b      	movs	r3, r7
 8000a56:	0018      	movs	r0, r3
 8000a58:	f002 f8d8 	bl	8002c0c <HAL_RCCEx_PeriphCLKConfig>
 8000a5c:	1e03      	subs	r3, r0, #0
 8000a5e:	d001      	beq.n	8000a64 <SystemClock_Config+0xe0>
  {
    Error_Handler();
 8000a60:	f000 fb16 	bl	8001090 <Error_Handler>
  }
}
 8000a64:	46c0      	nop			; (mov r8, r8)
 8000a66:	46bd      	mov	sp, r7
 8000a68:	b01d      	add	sp, #116	; 0x74
 8000a6a:	bd90      	pop	{r4, r7, pc}
 8000a6c:	40007000 	.word	0x40007000
 8000a70:	ffffe7ff 	.word	0xffffe7ff

08000a74 <Boot_Sequence>:

/* USER CODE BEGIN 4 */

static void Boot_Sequence(bool mode)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b082      	sub	sp, #8
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	0002      	movs	r2, r0
 8000a7c:	1dfb      	adds	r3, r7, #7
 8000a7e:	701a      	strb	r2, [r3, #0]

	if (mode == SLAVE)
 8000a80:	1dfb      	adds	r3, r7, #7
 8000a82:	781b      	ldrb	r3, [r3, #0]
 8000a84:	2201      	movs	r2, #1
 8000a86:	4053      	eors	r3, r2
 8000a88:	b2db      	uxtb	r3, r3
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d06c      	beq.n	8000b68 <Boot_Sequence+0xf4>
	{

		/* Turn LEDS ON and OFF and make buzzer beep once and longer */
		HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8000a8e:	4b7c      	ldr	r3, [pc, #496]	; (8000c80 <Boot_Sequence+0x20c>)
 8000a90:	2104      	movs	r1, #4
 8000a92:	0018      	movs	r0, r3
 8000a94:	f002 fa3e 	bl	8002f14 <HAL_TIM_PWM_Start>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);
 8000a98:	4b7a      	ldr	r3, [pc, #488]	; (8000c84 <Boot_Sequence+0x210>)
 8000a9a:	2201      	movs	r2, #1
 8000a9c:	2102      	movs	r1, #2
 8000a9e:	0018      	movs	r0, r3
 8000aa0:	f001 f97d 	bl	8001d9e <HAL_GPIO_WritePin>
		HAL_Delay(200);
 8000aa4:	20c8      	movs	r0, #200	; 0xc8
 8000aa6:	f000 fe9f 	bl	80017e8 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 8000aaa:	4b76      	ldr	r3, [pc, #472]	; (8000c84 <Boot_Sequence+0x210>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	2102      	movs	r1, #2
 8000ab0:	0018      	movs	r0, r3
 8000ab2:	f001 f974 	bl	8001d9e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 8000ab6:	4b73      	ldr	r3, [pc, #460]	; (8000c84 <Boot_Sequence+0x210>)
 8000ab8:	2201      	movs	r2, #1
 8000aba:	2101      	movs	r1, #1
 8000abc:	0018      	movs	r0, r3
 8000abe:	f001 f96e 	bl	8001d9e <HAL_GPIO_WritePin>
		HAL_Delay(200);
 8000ac2:	20c8      	movs	r0, #200	; 0xc8
 8000ac4:	f000 fe90 	bl	80017e8 <HAL_Delay>
		HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_2);
 8000ac8:	4b6d      	ldr	r3, [pc, #436]	; (8000c80 <Boot_Sequence+0x20c>)
 8000aca:	2104      	movs	r1, #4
 8000acc:	0018      	movs	r0, r3
 8000ace:	f002 fa43 	bl	8002f58 <HAL_TIM_PWM_Stop>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8000ad2:	4b6c      	ldr	r3, [pc, #432]	; (8000c84 <Boot_Sequence+0x210>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	2101      	movs	r1, #1
 8000ad8:	0018      	movs	r0, r3
 8000ada:	f001 f960 	bl	8001d9e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET);
 8000ade:	23a0      	movs	r3, #160	; 0xa0
 8000ae0:	05db      	lsls	r3, r3, #23
 8000ae2:	2201      	movs	r2, #1
 8000ae4:	2180      	movs	r1, #128	; 0x80
 8000ae6:	0018      	movs	r0, r3
 8000ae8:	f001 f959 	bl	8001d9e <HAL_GPIO_WritePin>
		HAL_Delay(200);
 8000aec:	20c8      	movs	r0, #200	; 0xc8
 8000aee:	f000 fe7b 	bl	80017e8 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 8000af2:	23a0      	movs	r3, #160	; 0xa0
 8000af4:	05db      	lsls	r3, r3, #23
 8000af6:	2200      	movs	r2, #0
 8000af8:	2180      	movs	r1, #128	; 0x80
 8000afa:	0018      	movs	r0, r3
 8000afc:	f001 f94f 	bl	8001d9e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);
 8000b00:	23a0      	movs	r3, #160	; 0xa0
 8000b02:	05db      	lsls	r3, r3, #23
 8000b04:	2201      	movs	r2, #1
 8000b06:	2140      	movs	r1, #64	; 0x40
 8000b08:	0018      	movs	r0, r3
 8000b0a:	f001 f948 	bl	8001d9e <HAL_GPIO_WritePin>
		HAL_Delay(200);
 8000b0e:	20c8      	movs	r0, #200	; 0xc8
 8000b10:	f000 fe6a 	bl	80017e8 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 8000b14:	23a0      	movs	r3, #160	; 0xa0
 8000b16:	05db      	lsls	r3, r3, #23
 8000b18:	2200      	movs	r2, #0
 8000b1a:	2140      	movs	r1, #64	; 0x40
 8000b1c:	0018      	movs	r0, r3
 8000b1e:	f001 f93e 	bl	8001d9e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8000b22:	23a0      	movs	r3, #160	; 0xa0
 8000b24:	05db      	lsls	r3, r3, #23
 8000b26:	2201      	movs	r2, #1
 8000b28:	2120      	movs	r1, #32
 8000b2a:	0018      	movs	r0, r3
 8000b2c:	f001 f937 	bl	8001d9e <HAL_GPIO_WritePin>
		HAL_Delay(200);
 8000b30:	20c8      	movs	r0, #200	; 0xc8
 8000b32:	f000 fe59 	bl	80017e8 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000b36:	23a0      	movs	r3, #160	; 0xa0
 8000b38:	05db      	lsls	r3, r3, #23
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	2120      	movs	r1, #32
 8000b3e:	0018      	movs	r0, r3
 8000b40:	f001 f92d 	bl	8001d9e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8000b44:	23a0      	movs	r3, #160	; 0xa0
 8000b46:	05db      	lsls	r3, r3, #23
 8000b48:	2201      	movs	r2, #1
 8000b4a:	2110      	movs	r1, #16
 8000b4c:	0018      	movs	r0, r3
 8000b4e:	f001 f926 	bl	8001d9e <HAL_GPIO_WritePin>
		HAL_Delay(200);
 8000b52:	20c8      	movs	r0, #200	; 0xc8
 8000b54:	f000 fe48 	bl	80017e8 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8000b58:	23a0      	movs	r3, #160	; 0xa0
 8000b5a:	05db      	lsls	r3, r3, #23
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	2110      	movs	r1, #16
 8000b60:	0018      	movs	r0, r3
 8000b62:	f001 f91c 	bl	8001d9e <HAL_GPIO_WritePin>

		/* Lastly, turn the MASTER LED on, and don't change it */
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);

	}
}
 8000b66:	e086      	b.n	8000c76 <Boot_Sequence+0x202>
	else if (mode == MASTER)
 8000b68:	1dfb      	adds	r3, r7, #7
 8000b6a:	781b      	ldrb	r3, [r3, #0]
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d100      	bne.n	8000b72 <Boot_Sequence+0xfe>
 8000b70:	e081      	b.n	8000c76 <Boot_Sequence+0x202>
		HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8000b72:	4b43      	ldr	r3, [pc, #268]	; (8000c80 <Boot_Sequence+0x20c>)
 8000b74:	2104      	movs	r1, #4
 8000b76:	0018      	movs	r0, r3
 8000b78:	f002 f9cc 	bl	8002f14 <HAL_TIM_PWM_Start>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);
 8000b7c:	4b41      	ldr	r3, [pc, #260]	; (8000c84 <Boot_Sequence+0x210>)
 8000b7e:	2201      	movs	r2, #1
 8000b80:	2102      	movs	r1, #2
 8000b82:	0018      	movs	r0, r3
 8000b84:	f001 f90b 	bl	8001d9e <HAL_GPIO_WritePin>
		HAL_Delay(100);
 8000b88:	2064      	movs	r0, #100	; 0x64
 8000b8a:	f000 fe2d 	bl	80017e8 <HAL_Delay>
		HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_2);
 8000b8e:	4b3c      	ldr	r3, [pc, #240]	; (8000c80 <Boot_Sequence+0x20c>)
 8000b90:	2104      	movs	r1, #4
 8000b92:	0018      	movs	r0, r3
 8000b94:	f002 f9e0 	bl	8002f58 <HAL_TIM_PWM_Stop>
		HAL_Delay(100);
 8000b98:	2064      	movs	r0, #100	; 0x64
 8000b9a:	f000 fe25 	bl	80017e8 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 8000b9e:	4b39      	ldr	r3, [pc, #228]	; (8000c84 <Boot_Sequence+0x210>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	2102      	movs	r1, #2
 8000ba4:	0018      	movs	r0, r3
 8000ba6:	f001 f8fa 	bl	8001d9e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 8000baa:	4b36      	ldr	r3, [pc, #216]	; (8000c84 <Boot_Sequence+0x210>)
 8000bac:	2201      	movs	r2, #1
 8000bae:	2101      	movs	r1, #1
 8000bb0:	0018      	movs	r0, r3
 8000bb2:	f001 f8f4 	bl	8001d9e <HAL_GPIO_WritePin>
		HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8000bb6:	4b32      	ldr	r3, [pc, #200]	; (8000c80 <Boot_Sequence+0x20c>)
 8000bb8:	2104      	movs	r1, #4
 8000bba:	0018      	movs	r0, r3
 8000bbc:	f002 f9aa 	bl	8002f14 <HAL_TIM_PWM_Start>
		HAL_Delay(100);
 8000bc0:	2064      	movs	r0, #100	; 0x64
 8000bc2:	f000 fe11 	bl	80017e8 <HAL_Delay>
		HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_2);
 8000bc6:	4b2e      	ldr	r3, [pc, #184]	; (8000c80 <Boot_Sequence+0x20c>)
 8000bc8:	2104      	movs	r1, #4
 8000bca:	0018      	movs	r0, r3
 8000bcc:	f002 f9c4 	bl	8002f58 <HAL_TIM_PWM_Stop>
		HAL_Delay(100);
 8000bd0:	2064      	movs	r0, #100	; 0x64
 8000bd2:	f000 fe09 	bl	80017e8 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8000bd6:	4b2b      	ldr	r3, [pc, #172]	; (8000c84 <Boot_Sequence+0x210>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	2101      	movs	r1, #1
 8000bdc:	0018      	movs	r0, r3
 8000bde:	f001 f8de 	bl	8001d9e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET);
 8000be2:	23a0      	movs	r3, #160	; 0xa0
 8000be4:	05db      	lsls	r3, r3, #23
 8000be6:	2201      	movs	r2, #1
 8000be8:	2180      	movs	r1, #128	; 0x80
 8000bea:	0018      	movs	r0, r3
 8000bec:	f001 f8d7 	bl	8001d9e <HAL_GPIO_WritePin>
		HAL_Delay(200);
 8000bf0:	20c8      	movs	r0, #200	; 0xc8
 8000bf2:	f000 fdf9 	bl	80017e8 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 8000bf6:	23a0      	movs	r3, #160	; 0xa0
 8000bf8:	05db      	lsls	r3, r3, #23
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	2180      	movs	r1, #128	; 0x80
 8000bfe:	0018      	movs	r0, r3
 8000c00:	f001 f8cd 	bl	8001d9e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);
 8000c04:	23a0      	movs	r3, #160	; 0xa0
 8000c06:	05db      	lsls	r3, r3, #23
 8000c08:	2201      	movs	r2, #1
 8000c0a:	2140      	movs	r1, #64	; 0x40
 8000c0c:	0018      	movs	r0, r3
 8000c0e:	f001 f8c6 	bl	8001d9e <HAL_GPIO_WritePin>
		HAL_Delay(200);
 8000c12:	20c8      	movs	r0, #200	; 0xc8
 8000c14:	f000 fde8 	bl	80017e8 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 8000c18:	23a0      	movs	r3, #160	; 0xa0
 8000c1a:	05db      	lsls	r3, r3, #23
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	2140      	movs	r1, #64	; 0x40
 8000c20:	0018      	movs	r0, r3
 8000c22:	f001 f8bc 	bl	8001d9e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8000c26:	23a0      	movs	r3, #160	; 0xa0
 8000c28:	05db      	lsls	r3, r3, #23
 8000c2a:	2201      	movs	r2, #1
 8000c2c:	2120      	movs	r1, #32
 8000c2e:	0018      	movs	r0, r3
 8000c30:	f001 f8b5 	bl	8001d9e <HAL_GPIO_WritePin>
		HAL_Delay(200);
 8000c34:	20c8      	movs	r0, #200	; 0xc8
 8000c36:	f000 fdd7 	bl	80017e8 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000c3a:	23a0      	movs	r3, #160	; 0xa0
 8000c3c:	05db      	lsls	r3, r3, #23
 8000c3e:	2200      	movs	r2, #0
 8000c40:	2120      	movs	r1, #32
 8000c42:	0018      	movs	r0, r3
 8000c44:	f001 f8ab 	bl	8001d9e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8000c48:	23a0      	movs	r3, #160	; 0xa0
 8000c4a:	05db      	lsls	r3, r3, #23
 8000c4c:	2201      	movs	r2, #1
 8000c4e:	2110      	movs	r1, #16
 8000c50:	0018      	movs	r0, r3
 8000c52:	f001 f8a4 	bl	8001d9e <HAL_GPIO_WritePin>
		HAL_Delay(200);
 8000c56:	20c8      	movs	r0, #200	; 0xc8
 8000c58:	f000 fdc6 	bl	80017e8 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8000c5c:	23a0      	movs	r3, #160	; 0xa0
 8000c5e:	05db      	lsls	r3, r3, #23
 8000c60:	2200      	movs	r2, #0
 8000c62:	2110      	movs	r1, #16
 8000c64:	0018      	movs	r0, r3
 8000c66:	f001 f89a 	bl	8001d9e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 8000c6a:	4b06      	ldr	r3, [pc, #24]	; (8000c84 <Boot_Sequence+0x210>)
 8000c6c:	2201      	movs	r2, #1
 8000c6e:	2101      	movs	r1, #1
 8000c70:	0018      	movs	r0, r3
 8000c72:	f001 f894 	bl	8001d9e <HAL_GPIO_WritePin>
}
 8000c76:	46c0      	nop			; (mov r8, r8)
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	b002      	add	sp, #8
 8000c7c:	bd80      	pop	{r7, pc}
 8000c7e:	46c0      	nop			; (mov r8, r8)
 8000c80:	20000324 	.word	0x20000324
 8000c84:	50000400 	.word	0x50000400

08000c88 <XBee_Transmit>:

void XBee_Transmit(uint8_t* txBuffer, uint8_t txBufferSize)
{
 8000c88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c8a:	b085      	sub	sp, #20
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
 8000c90:	000a      	movs	r2, r1
 8000c92:	1cfb      	adds	r3, r7, #3
 8000c94:	701a      	strb	r2, [r3, #0]
	uint16_t packetLength;
	uint8_t checksum;

	/* Let's build the packet */
	/* First, it's the Start of File indicator byte */
	xbeeTXBuffer[0] = SOF;
 8000c96:	4b33      	ldr	r3, [pc, #204]	; (8000d64 <XBee_Transmit+0xdc>)
 8000c98:	227e      	movs	r2, #126	; 0x7e
 8000c9a:	701a      	strb	r2, [r3, #0]

	/* Second, the Packet Length. This equals Payload Length + 14 Bytes (CMD-ID(1B) + frame id(1B) +  64-bit addr + 16 bit-addr + 2B) */
	packetLength = txBufferSize + 14;
 8000c9c:	1cfb      	adds	r3, r7, #3
 8000c9e:	781b      	ldrb	r3, [r3, #0]
 8000ca0:	b29a      	uxth	r2, r3
 8000ca2:	250e      	movs	r5, #14
 8000ca4:	197b      	adds	r3, r7, r5
 8000ca6:	320e      	adds	r2, #14
 8000ca8:	801a      	strh	r2, [r3, #0]

	xbeeTXBuffer[1] = (uint8_t) (packetLength >> 8);
 8000caa:	197b      	adds	r3, r7, r5
 8000cac:	881b      	ldrh	r3, [r3, #0]
 8000cae:	0a1b      	lsrs	r3, r3, #8
 8000cb0:	b29b      	uxth	r3, r3
 8000cb2:	b2da      	uxtb	r2, r3
 8000cb4:	4b2b      	ldr	r3, [pc, #172]	; (8000d64 <XBee_Transmit+0xdc>)
 8000cb6:	705a      	strb	r2, [r3, #1]
	xbeeTXBuffer[2] = (uint8_t) (packetLength);
 8000cb8:	197b      	adds	r3, r7, r5
 8000cba:	881b      	ldrh	r3, [r3, #0]
 8000cbc:	b2da      	uxtb	r2, r3
 8000cbe:	4b29      	ldr	r3, [pc, #164]	; (8000d64 <XBee_Transmit+0xdc>)
 8000cc0:	709a      	strb	r2, [r3, #2]

	/* Command ID */
	xbeeTXBuffer[3] = CMD_TX_REQUEST;
 8000cc2:	4b28      	ldr	r3, [pc, #160]	; (8000d64 <XBee_Transmit+0xdc>)
 8000cc4:	2210      	movs	r2, #16
 8000cc6:	70da      	strb	r2, [r3, #3]

	/* Frame ID */
	xbeeTXBuffer[4] = 0x00;
 8000cc8:	4b26      	ldr	r3, [pc, #152]	; (8000d64 <XBee_Transmit+0xdc>)
 8000cca:	2200      	movs	r2, #0
 8000ccc:	711a      	strb	r2, [r3, #4]

	/* 64-Bit Destination Address. In broadcast mode, this is 0x000000000000FFFF */
	xbeeTXBuffer[5] = 0x00;
 8000cce:	4b25      	ldr	r3, [pc, #148]	; (8000d64 <XBee_Transmit+0xdc>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	715a      	strb	r2, [r3, #5]
	xbeeTXBuffer[6] = 0x00;
 8000cd4:	4b23      	ldr	r3, [pc, #140]	; (8000d64 <XBee_Transmit+0xdc>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	719a      	strb	r2, [r3, #6]
	xbeeTXBuffer[7] = 0x00;
 8000cda:	4b22      	ldr	r3, [pc, #136]	; (8000d64 <XBee_Transmit+0xdc>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	71da      	strb	r2, [r3, #7]
	xbeeTXBuffer[8] = 0x00;
 8000ce0:	4b20      	ldr	r3, [pc, #128]	; (8000d64 <XBee_Transmit+0xdc>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	721a      	strb	r2, [r3, #8]
	xbeeTXBuffer[9] = 0x00;
 8000ce6:	4b1f      	ldr	r3, [pc, #124]	; (8000d64 <XBee_Transmit+0xdc>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	725a      	strb	r2, [r3, #9]
	xbeeTXBuffer[10] = 0x00;
 8000cec:	4b1d      	ldr	r3, [pc, #116]	; (8000d64 <XBee_Transmit+0xdc>)
 8000cee:	2200      	movs	r2, #0
 8000cf0:	729a      	strb	r2, [r3, #10]
	xbeeTXBuffer[11] = 0xFF;
 8000cf2:	4b1c      	ldr	r3, [pc, #112]	; (8000d64 <XBee_Transmit+0xdc>)
 8000cf4:	22ff      	movs	r2, #255	; 0xff
 8000cf6:	72da      	strb	r2, [r3, #11]
	xbeeTXBuffer[12] = 0xFF;
 8000cf8:	4b1a      	ldr	r3, [pc, #104]	; (8000d64 <XBee_Transmit+0xdc>)
 8000cfa:	22ff      	movs	r2, #255	; 0xff
 8000cfc:	731a      	strb	r2, [r3, #12]

	/* 16-Bit Address. In broadcast mode, this is 0xFFFE */
	xbeeTXBuffer[13] = 0xFF;
 8000cfe:	4b19      	ldr	r3, [pc, #100]	; (8000d64 <XBee_Transmit+0xdc>)
 8000d00:	22ff      	movs	r2, #255	; 0xff
 8000d02:	735a      	strb	r2, [r3, #13]
	xbeeTXBuffer[14] = 0xFE;
 8000d04:	4b17      	ldr	r3, [pc, #92]	; (8000d64 <XBee_Transmit+0xdc>)
 8000d06:	22fe      	movs	r2, #254	; 0xfe
 8000d08:	739a      	strb	r2, [r3, #14]

	/* Broadcast Radius. We'll set this to 1 */
	xbeeTXBuffer[15] = 0x01;
 8000d0a:	4b16      	ldr	r3, [pc, #88]	; (8000d64 <XBee_Transmit+0xdc>)
 8000d0c:	2201      	movs	r2, #1
 8000d0e:	73da      	strb	r2, [r3, #15]

	/* Transmit Options. We won't use any here */
	xbeeTXBuffer[16] = 0x00;
 8000d10:	4b14      	ldr	r3, [pc, #80]	; (8000d64 <XBee_Transmit+0xdc>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	741a      	strb	r2, [r3, #16]

	/* Paste the payload in */
	memcpy(&xbeeTXBuffer[17], txBuffer, txBufferSize);
 8000d16:	1cfb      	adds	r3, r7, #3
 8000d18:	781a      	ldrb	r2, [r3, #0]
 8000d1a:	6879      	ldr	r1, [r7, #4]
 8000d1c:	4b12      	ldr	r3, [pc, #72]	; (8000d68 <XBee_Transmit+0xe0>)
 8000d1e:	0018      	movs	r0, r3
 8000d20:	f003 fc7a 	bl	8004618 <memcpy>

	/* Calculate the checksum */
	checksum = XBee_Checksum(&xbeeTXBuffer[3], packetLength);
 8000d24:	260d      	movs	r6, #13
 8000d26:	19bc      	adds	r4, r7, r6
 8000d28:	197b      	adds	r3, r7, r5
 8000d2a:	881a      	ldrh	r2, [r3, #0]
 8000d2c:	4b0f      	ldr	r3, [pc, #60]	; (8000d6c <XBee_Transmit+0xe4>)
 8000d2e:	0011      	movs	r1, r2
 8000d30:	0018      	movs	r0, r3
 8000d32:	f000 f81f 	bl	8000d74 <XBee_Checksum>
 8000d36:	0003      	movs	r3, r0
 8000d38:	7023      	strb	r3, [r4, #0]

	/* Insert the checksum */
	xbeeTXBuffer[17 + txBufferSize] = checksum;
 8000d3a:	1cfb      	adds	r3, r7, #3
 8000d3c:	781b      	ldrb	r3, [r3, #0]
 8000d3e:	3311      	adds	r3, #17
 8000d40:	4a08      	ldr	r2, [pc, #32]	; (8000d64 <XBee_Transmit+0xdc>)
 8000d42:	19b9      	adds	r1, r7, r6
 8000d44:	7809      	ldrb	r1, [r1, #0]
 8000d46:	54d1      	strb	r1, [r2, r3]

	/* Transmit the packet to the XBee */
	HAL_UART_Transmit(&huart1, xbeeTXBuffer, packetLength + 4, 100);
 8000d48:	197b      	adds	r3, r7, r5
 8000d4a:	881b      	ldrh	r3, [r3, #0]
 8000d4c:	3304      	adds	r3, #4
 8000d4e:	b29a      	uxth	r2, r3
 8000d50:	4904      	ldr	r1, [pc, #16]	; (8000d64 <XBee_Transmit+0xdc>)
 8000d52:	4807      	ldr	r0, [pc, #28]	; (8000d70 <XBee_Transmit+0xe8>)
 8000d54:	2364      	movs	r3, #100	; 0x64
 8000d56:	f002 fc17 	bl	8003588 <HAL_UART_Transmit>

}
 8000d5a:	46c0      	nop			; (mov r8, r8)
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	b005      	add	sp, #20
 8000d60:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000d62:	46c0      	nop			; (mov r8, r8)
 8000d64:	20000158 	.word	0x20000158
 8000d68:	20000169 	.word	0x20000169
 8000d6c:	2000015b 	.word	0x2000015b
 8000d70:	200003e0 	.word	0x200003e0

08000d74 <XBee_Checksum>:

static uint8_t XBee_Checksum(uint8_t *buffer, uint16_t length)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b084      	sub	sp, #16
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
 8000d7c:	000a      	movs	r2, r1
 8000d7e:	1cbb      	adds	r3, r7, #2
 8000d80:	801a      	strh	r2, [r3, #0]
	uint16_t add = 0;
 8000d82:	230e      	movs	r3, #14
 8000d84:	18fb      	adds	r3, r7, r3
 8000d86:	2200      	movs	r2, #0
 8000d88:	801a      	strh	r2, [r3, #0]
	uint16_t i;
	uint8_t checksum;

	for (i = 0; i < length; ++i)
 8000d8a:	230c      	movs	r3, #12
 8000d8c:	18fb      	adds	r3, r7, r3
 8000d8e:	2200      	movs	r2, #0
 8000d90:	801a      	strh	r2, [r3, #0]
 8000d92:	e011      	b.n	8000db8 <XBee_Checksum+0x44>
	{
		add += buffer[i];
 8000d94:	200c      	movs	r0, #12
 8000d96:	183b      	adds	r3, r7, r0
 8000d98:	881b      	ldrh	r3, [r3, #0]
 8000d9a:	687a      	ldr	r2, [r7, #4]
 8000d9c:	18d3      	adds	r3, r2, r3
 8000d9e:	781b      	ldrb	r3, [r3, #0]
 8000da0:	b299      	uxth	r1, r3
 8000da2:	220e      	movs	r2, #14
 8000da4:	18bb      	adds	r3, r7, r2
 8000da6:	18ba      	adds	r2, r7, r2
 8000da8:	8812      	ldrh	r2, [r2, #0]
 8000daa:	188a      	adds	r2, r1, r2
 8000dac:	801a      	strh	r2, [r3, #0]
	for (i = 0; i < length; ++i)
 8000dae:	183b      	adds	r3, r7, r0
 8000db0:	183a      	adds	r2, r7, r0
 8000db2:	8812      	ldrh	r2, [r2, #0]
 8000db4:	3201      	adds	r2, #1
 8000db6:	801a      	strh	r2, [r3, #0]
 8000db8:	230c      	movs	r3, #12
 8000dba:	18fa      	adds	r2, r7, r3
 8000dbc:	1cbb      	adds	r3, r7, #2
 8000dbe:	8812      	ldrh	r2, [r2, #0]
 8000dc0:	881b      	ldrh	r3, [r3, #0]
 8000dc2:	429a      	cmp	r2, r3
 8000dc4:	d3e6      	bcc.n	8000d94 <XBee_Checksum+0x20>
	}

	// Keep only the lowest 8 bits of the result
	add = add & 0x00FF;
 8000dc6:	200e      	movs	r0, #14
 8000dc8:	183b      	adds	r3, r7, r0
 8000dca:	183a      	adds	r2, r7, r0
 8000dcc:	8812      	ldrh	r2, [r2, #0]
 8000dce:	21ff      	movs	r1, #255	; 0xff
 8000dd0:	400a      	ands	r2, r1
 8000dd2:	801a      	strh	r2, [r3, #0]

	checksum = 0xFF - (uint8_t)add;
 8000dd4:	183b      	adds	r3, r7, r0
 8000dd6:	881b      	ldrh	r3, [r3, #0]
 8000dd8:	b2da      	uxtb	r2, r3
 8000dda:	210b      	movs	r1, #11
 8000ddc:	187b      	adds	r3, r7, r1
 8000dde:	43d2      	mvns	r2, r2
 8000de0:	701a      	strb	r2, [r3, #0]

	return checksum;
 8000de2:	187b      	adds	r3, r7, r1
 8000de4:	781b      	ldrb	r3, [r3, #0]
}
 8000de6:	0018      	movs	r0, r3
 8000de8:	46bd      	mov	sp, r7
 8000dea:	b004      	add	sp, #16
 8000dec:	bd80      	pop	{r7, pc}
	...

08000df0 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b082      	sub	sp, #8
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]

	/* Unlike PC where we just look for newline ('\n'), or the radios where we look for NAK/ETX byte, this isn't trivial */
	/* First, we look for the SOF (start of file) byte. When we get this, we know the next 2 bytes will be the length */
	/* Second, we read the length which is 2 bytes. Then, we use this information to wait for the final amount of data incoming */
	/* Third and final, we read the rest of the data */
	if (huart->Instance == USART1)
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	4a84      	ldr	r2, [pc, #528]	; (8001010 <HAL_UART_RxCpltCallback+0x220>)
 8000dfe:	4293      	cmp	r3, r2
 8000e00:	d16d      	bne.n	8000ede <HAL_UART_RxCpltCallback+0xee>
	{

		xbeeTimeout = HAL_GetTick();
 8000e02:	f000 fce7 	bl	80017d4 <HAL_GetTick>
 8000e06:	0002      	movs	r2, r0
 8000e08:	4b82      	ldr	r3, [pc, #520]	; (8001014 <HAL_UART_RxCpltCallback+0x224>)
 8000e0a:	601a      	str	r2, [r3, #0]

		if (xbeeStep == 1)
 8000e0c:	4b82      	ldr	r3, [pc, #520]	; (8001018 <HAL_UART_RxCpltCallback+0x228>)
 8000e0e:	781b      	ldrb	r3, [r3, #0]
 8000e10:	b2db      	uxtb	r3, r3
 8000e12:	2b01      	cmp	r3, #1
 8000e14:	d11d      	bne.n	8000e52 <HAL_UART_RxCpltCallback+0x62>
		{

			/* This is a valid XBee packet */
			/* Proceed to the next step, shift the buffer pointer up 1, and wait for 2 bytes */
			/* These 2 bytes will be the length */
			if (xbeeBuffer[0] == SOF)
 8000e16:	4b81      	ldr	r3, [pc, #516]	; (800101c <HAL_UART_RxCpltCallback+0x22c>)
 8000e18:	781b      	ldrb	r3, [r3, #0]
 8000e1a:	b2db      	uxtb	r3, r3
 8000e1c:	2b7e      	cmp	r3, #126	; 0x7e
 8000e1e:	d10e      	bne.n	8000e3e <HAL_UART_RxCpltCallback+0x4e>
			{

				xbeeStep = 2;
 8000e20:	4b7d      	ldr	r3, [pc, #500]	; (8001018 <HAL_UART_RxCpltCallback+0x228>)
 8000e22:	2202      	movs	r2, #2
 8000e24:	701a      	strb	r2, [r3, #0]
				xbeeSize = 2;
 8000e26:	4b7e      	ldr	r3, [pc, #504]	; (8001020 <HAL_UART_RxCpltCallback+0x230>)
 8000e28:	2202      	movs	r2, #2
 8000e2a:	801a      	strh	r2, [r3, #0]
				HAL_UART_Receive_IT(&huart1, &xbeeBuffer[1], xbeeSize);
 8000e2c:	4b7c      	ldr	r3, [pc, #496]	; (8001020 <HAL_UART_RxCpltCallback+0x230>)
 8000e2e:	881b      	ldrh	r3, [r3, #0]
 8000e30:	b29a      	uxth	r2, r3
 8000e32:	497c      	ldr	r1, [pc, #496]	; (8001024 <HAL_UART_RxCpltCallback+0x234>)
 8000e34:	4b7c      	ldr	r3, [pc, #496]	; (8001028 <HAL_UART_RxCpltCallback+0x238>)
 8000e36:	0018      	movs	r0, r3
 8000e38:	f002 fc4e 	bl	80036d8 <HAL_UART_Receive_IT>
 8000e3c:	e04f      	b.n	8000ede <HAL_UART_RxCpltCallback+0xee>
			}
			/* Otherwise, this is an invalid packet/we got out of sync */
			/* Restart and continue the hunt for a valid packet */
			else
			{
				xbeeStep = 1;
 8000e3e:	4b76      	ldr	r3, [pc, #472]	; (8001018 <HAL_UART_RxCpltCallback+0x228>)
 8000e40:	2201      	movs	r2, #1
 8000e42:	701a      	strb	r2, [r3, #0]
				HAL_UART_Receive_IT(&huart1, xbeeBuffer, 1);
 8000e44:	4975      	ldr	r1, [pc, #468]	; (800101c <HAL_UART_RxCpltCallback+0x22c>)
 8000e46:	4b78      	ldr	r3, [pc, #480]	; (8001028 <HAL_UART_RxCpltCallback+0x238>)
 8000e48:	2201      	movs	r2, #1
 8000e4a:	0018      	movs	r0, r3
 8000e4c:	f002 fc44 	bl	80036d8 <HAL_UART_Receive_IT>
 8000e50:	e045      	b.n	8000ede <HAL_UART_RxCpltCallback+0xee>
			}

		}
		else if (xbeeStep == 2)
 8000e52:	4b71      	ldr	r3, [pc, #452]	; (8001018 <HAL_UART_RxCpltCallback+0x228>)
 8000e54:	781b      	ldrb	r3, [r3, #0]
 8000e56:	b2db      	uxtb	r3, r3
 8000e58:	2b02      	cmp	r3, #2
 8000e5a:	d12f      	bne.n	8000ebc <HAL_UART_RxCpltCallback+0xcc>
		{

			/* Here, we calculate the length of the packet incoming */
			/* This is then used for the final step where we grab the data we want */
			xbeeSize = (xbeeBuffer[1] << 8) | (xbeeBuffer[2] << 0);
 8000e5c:	4b6f      	ldr	r3, [pc, #444]	; (800101c <HAL_UART_RxCpltCallback+0x22c>)
 8000e5e:	785b      	ldrb	r3, [r3, #1]
 8000e60:	b2db      	uxtb	r3, r3
 8000e62:	021b      	lsls	r3, r3, #8
 8000e64:	b21a      	sxth	r2, r3
 8000e66:	4b6d      	ldr	r3, [pc, #436]	; (800101c <HAL_UART_RxCpltCallback+0x22c>)
 8000e68:	789b      	ldrb	r3, [r3, #2]
 8000e6a:	b2db      	uxtb	r3, r3
 8000e6c:	b21b      	sxth	r3, r3
 8000e6e:	4313      	orrs	r3, r2
 8000e70:	b21b      	sxth	r3, r3
 8000e72:	b29a      	uxth	r2, r3
 8000e74:	4b6a      	ldr	r3, [pc, #424]	; (8001020 <HAL_UART_RxCpltCallback+0x230>)
 8000e76:	801a      	strh	r2, [r3, #0]

			/* The real size is an additional 1 bytes on top of this for the checksum */
			xbeeSize += 1;
 8000e78:	4b69      	ldr	r3, [pc, #420]	; (8001020 <HAL_UART_RxCpltCallback+0x230>)
 8000e7a:	881b      	ldrh	r3, [r3, #0]
 8000e7c:	b29b      	uxth	r3, r3
 8000e7e:	3301      	adds	r3, #1
 8000e80:	b29a      	uxth	r2, r3
 8000e82:	4b67      	ldr	r3, [pc, #412]	; (8001020 <HAL_UART_RxCpltCallback+0x230>)
 8000e84:	801a      	strh	r2, [r3, #0]

			/* We add a check here to make sure the length is sensible */
			/* If it is sensible, we move up the buffer a few positions and look for the remaining packet size */
			if (xbeeSize <= XBEE_MAX_PACKET_SIZE)
 8000e86:	4b66      	ldr	r3, [pc, #408]	; (8001020 <HAL_UART_RxCpltCallback+0x230>)
 8000e88:	881b      	ldrh	r3, [r3, #0]
 8000e8a:	b29b      	uxth	r3, r3
 8000e8c:	2b3c      	cmp	r3, #60	; 0x3c
 8000e8e:	d80b      	bhi.n	8000ea8 <HAL_UART_RxCpltCallback+0xb8>
			{
				xbeeStep = 3;
 8000e90:	4b61      	ldr	r3, [pc, #388]	; (8001018 <HAL_UART_RxCpltCallback+0x228>)
 8000e92:	2203      	movs	r2, #3
 8000e94:	701a      	strb	r2, [r3, #0]
				HAL_UART_Receive_IT(&huart1, &xbeeBuffer[3], xbeeSize);
 8000e96:	4b62      	ldr	r3, [pc, #392]	; (8001020 <HAL_UART_RxCpltCallback+0x230>)
 8000e98:	881b      	ldrh	r3, [r3, #0]
 8000e9a:	b29a      	uxth	r2, r3
 8000e9c:	4963      	ldr	r1, [pc, #396]	; (800102c <HAL_UART_RxCpltCallback+0x23c>)
 8000e9e:	4b62      	ldr	r3, [pc, #392]	; (8001028 <HAL_UART_RxCpltCallback+0x238>)
 8000ea0:	0018      	movs	r0, r3
 8000ea2:	f002 fc19 	bl	80036d8 <HAL_UART_Receive_IT>
 8000ea6:	e01a      	b.n	8000ede <HAL_UART_RxCpltCallback+0xee>
			}
			/* Otherwise, this is an invalid packet/we got out of sync */
			/* Restart and continue the hunt for a valid packet */
			else
			{
				xbeeStep = 1;
 8000ea8:	4b5b      	ldr	r3, [pc, #364]	; (8001018 <HAL_UART_RxCpltCallback+0x228>)
 8000eaa:	2201      	movs	r2, #1
 8000eac:	701a      	strb	r2, [r3, #0]
				HAL_UART_Receive_IT(&huart1, xbeeBuffer, 1);
 8000eae:	495b      	ldr	r1, [pc, #364]	; (800101c <HAL_UART_RxCpltCallback+0x22c>)
 8000eb0:	4b5d      	ldr	r3, [pc, #372]	; (8001028 <HAL_UART_RxCpltCallback+0x238>)
 8000eb2:	2201      	movs	r2, #1
 8000eb4:	0018      	movs	r0, r3
 8000eb6:	f002 fc0f 	bl	80036d8 <HAL_UART_Receive_IT>
 8000eba:	e010      	b.n	8000ede <HAL_UART_RxCpltCallback+0xee>
			}
		}
		else if (xbeeStep == 3)
 8000ebc:	4b56      	ldr	r3, [pc, #344]	; (8001018 <HAL_UART_RxCpltCallback+0x228>)
 8000ebe:	781b      	ldrb	r3, [r3, #0]
 8000ec0:	b2db      	uxtb	r3, r3
 8000ec2:	2b03      	cmp	r3, #3
 8000ec4:	d10b      	bne.n	8000ede <HAL_UART_RxCpltCallback+0xee>
			/* First, check that it's a valid Orienteering Device packet */
//			if (xbeeBuffer[0] == OD_ID
//			 && xbeeBuffer[1] == currentChannel)
//			{

				xbeePacketComplete = true;
 8000ec6:	4b5a      	ldr	r3, [pc, #360]	; (8001030 <HAL_UART_RxCpltCallback+0x240>)
 8000ec8:	2201      	movs	r2, #1
 8000eca:	701a      	strb	r2, [r3, #0]

//			}
			/* Whether it was a valid packet or not, we begin scanning again for new data */
			xbeeStep = 1;
 8000ecc:	4b52      	ldr	r3, [pc, #328]	; (8001018 <HAL_UART_RxCpltCallback+0x228>)
 8000ece:	2201      	movs	r2, #1
 8000ed0:	701a      	strb	r2, [r3, #0]
			HAL_UART_Receive_IT(&huart1, xbeeBuffer, 1);
 8000ed2:	4952      	ldr	r1, [pc, #328]	; (800101c <HAL_UART_RxCpltCallback+0x22c>)
 8000ed4:	4b54      	ldr	r3, [pc, #336]	; (8001028 <HAL_UART_RxCpltCallback+0x238>)
 8000ed6:	2201      	movs	r2, #1
 8000ed8:	0018      	movs	r0, r3
 8000eda:	f002 fbfd 	bl	80036d8 <HAL_UART_Receive_IT>
		}

	}

	/* Manage data coming in from the radios */
	if (mode == SLAVE)
 8000ede:	4b55      	ldr	r3, [pc, #340]	; (8001034 <HAL_UART_RxCpltCallback+0x244>)
 8000ee0:	781b      	ldrb	r3, [r3, #0]
 8000ee2:	2201      	movs	r2, #1
 8000ee4:	4053      	eors	r3, r2
 8000ee6:	b2db      	uxtb	r3, r3
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d069      	beq.n	8000fc0 <HAL_UART_RxCpltCallback+0x1d0>
	{

		/* Handle Red Radio input */
		if (huart->Instance == USART4)
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	4a51      	ldr	r2, [pc, #324]	; (8001038 <HAL_UART_RxCpltCallback+0x248>)
 8000ef2:	4293      	cmp	r3, r2
 8000ef4:	d11d      	bne.n	8000f32 <HAL_UART_RxCpltCallback+0x142>
		{
			radioRedBuffer[radioRedTracker] = radioRedIn;
 8000ef6:	4b51      	ldr	r3, [pc, #324]	; (800103c <HAL_UART_RxCpltCallback+0x24c>)
 8000ef8:	781b      	ldrb	r3, [r3, #0]
 8000efa:	001a      	movs	r2, r3
 8000efc:	4b50      	ldr	r3, [pc, #320]	; (8001040 <HAL_UART_RxCpltCallback+0x250>)
 8000efe:	7819      	ldrb	r1, [r3, #0]
 8000f00:	4b50      	ldr	r3, [pc, #320]	; (8001044 <HAL_UART_RxCpltCallback+0x254>)
 8000f02:	5499      	strb	r1, [r3, r2]
			radioRedTracker++;
 8000f04:	4b4d      	ldr	r3, [pc, #308]	; (800103c <HAL_UART_RxCpltCallback+0x24c>)
 8000f06:	781b      	ldrb	r3, [r3, #0]
 8000f08:	3301      	adds	r3, #1
 8000f0a:	b2da      	uxtb	r2, r3
 8000f0c:	4b4b      	ldr	r3, [pc, #300]	; (800103c <HAL_UART_RxCpltCallback+0x24c>)
 8000f0e:	701a      	strb	r2, [r3, #0]

			if (radioRedIn == NAK || radioRedIn == ETX)
 8000f10:	4b4b      	ldr	r3, [pc, #300]	; (8001040 <HAL_UART_RxCpltCallback+0x250>)
 8000f12:	781b      	ldrb	r3, [r3, #0]
 8000f14:	2b15      	cmp	r3, #21
 8000f16:	d003      	beq.n	8000f20 <HAL_UART_RxCpltCallback+0x130>
 8000f18:	4b49      	ldr	r3, [pc, #292]	; (8001040 <HAL_UART_RxCpltCallback+0x250>)
 8000f1a:	781b      	ldrb	r3, [r3, #0]
 8000f1c:	2b03      	cmp	r3, #3
 8000f1e:	d102      	bne.n	8000f26 <HAL_UART_RxCpltCallback+0x136>
			{
				radioRedPacketComplete = true;
 8000f20:	4b49      	ldr	r3, [pc, #292]	; (8001048 <HAL_UART_RxCpltCallback+0x258>)
 8000f22:	2201      	movs	r2, #1
 8000f24:	701a      	strb	r2, [r3, #0]
			}

			HAL_UART_Receive_IT(&huart4, &radioRedIn, 1);
 8000f26:	4946      	ldr	r1, [pc, #280]	; (8001040 <HAL_UART_RxCpltCallback+0x250>)
 8000f28:	4b48      	ldr	r3, [pc, #288]	; (800104c <HAL_UART_RxCpltCallback+0x25c>)
 8000f2a:	2201      	movs	r2, #1
 8000f2c:	0018      	movs	r0, r3
 8000f2e:	f002 fbd3 	bl	80036d8 <HAL_UART_Receive_IT>

		}

		/* Handle Blue Radio input */
		if (huart->Instance == USART2)
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	4a46      	ldr	r2, [pc, #280]	; (8001050 <HAL_UART_RxCpltCallback+0x260>)
 8000f38:	4293      	cmp	r3, r2
 8000f3a:	d11d      	bne.n	8000f78 <HAL_UART_RxCpltCallback+0x188>
		{
			radioBlueBuffer[radioBlueTracker] = radioBlueIn;
 8000f3c:	4b45      	ldr	r3, [pc, #276]	; (8001054 <HAL_UART_RxCpltCallback+0x264>)
 8000f3e:	781b      	ldrb	r3, [r3, #0]
 8000f40:	001a      	movs	r2, r3
 8000f42:	4b45      	ldr	r3, [pc, #276]	; (8001058 <HAL_UART_RxCpltCallback+0x268>)
 8000f44:	7819      	ldrb	r1, [r3, #0]
 8000f46:	4b45      	ldr	r3, [pc, #276]	; (800105c <HAL_UART_RxCpltCallback+0x26c>)
 8000f48:	5499      	strb	r1, [r3, r2]
			radioBlueTracker++;
 8000f4a:	4b42      	ldr	r3, [pc, #264]	; (8001054 <HAL_UART_RxCpltCallback+0x264>)
 8000f4c:	781b      	ldrb	r3, [r3, #0]
 8000f4e:	3301      	adds	r3, #1
 8000f50:	b2da      	uxtb	r2, r3
 8000f52:	4b40      	ldr	r3, [pc, #256]	; (8001054 <HAL_UART_RxCpltCallback+0x264>)
 8000f54:	701a      	strb	r2, [r3, #0]

			if (radioBlueIn == NAK || radioBlueIn == ETX)
 8000f56:	4b40      	ldr	r3, [pc, #256]	; (8001058 <HAL_UART_RxCpltCallback+0x268>)
 8000f58:	781b      	ldrb	r3, [r3, #0]
 8000f5a:	2b15      	cmp	r3, #21
 8000f5c:	d003      	beq.n	8000f66 <HAL_UART_RxCpltCallback+0x176>
 8000f5e:	4b3e      	ldr	r3, [pc, #248]	; (8001058 <HAL_UART_RxCpltCallback+0x268>)
 8000f60:	781b      	ldrb	r3, [r3, #0]
 8000f62:	2b03      	cmp	r3, #3
 8000f64:	d102      	bne.n	8000f6c <HAL_UART_RxCpltCallback+0x17c>
			{
				radioBluePacketComplete = true;
 8000f66:	4b3e      	ldr	r3, [pc, #248]	; (8001060 <HAL_UART_RxCpltCallback+0x270>)
 8000f68:	2201      	movs	r2, #1
 8000f6a:	701a      	strb	r2, [r3, #0]
			}

			HAL_UART_Receive_IT(&huart2, &radioBlueIn, 1);
 8000f6c:	493a      	ldr	r1, [pc, #232]	; (8001058 <HAL_UART_RxCpltCallback+0x268>)
 8000f6e:	4b3d      	ldr	r3, [pc, #244]	; (8001064 <HAL_UART_RxCpltCallback+0x274>)
 8000f70:	2201      	movs	r2, #1
 8000f72:	0018      	movs	r0, r3
 8000f74:	f002 fbb0 	bl	80036d8 <HAL_UART_Receive_IT>

		}

		/* Handle Auxiliary Radio input */
		if (huart->Instance == USART5)
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	4a3a      	ldr	r2, [pc, #232]	; (8001068 <HAL_UART_RxCpltCallback+0x278>)
 8000f7e:	4293      	cmp	r3, r2
 8000f80:	d141      	bne.n	8001006 <HAL_UART_RxCpltCallback+0x216>
		{
			radioAuxBuffer[radioAuxTracker] = radioAuxIn;
 8000f82:	4b3a      	ldr	r3, [pc, #232]	; (800106c <HAL_UART_RxCpltCallback+0x27c>)
 8000f84:	781b      	ldrb	r3, [r3, #0]
 8000f86:	001a      	movs	r2, r3
 8000f88:	4b39      	ldr	r3, [pc, #228]	; (8001070 <HAL_UART_RxCpltCallback+0x280>)
 8000f8a:	7819      	ldrb	r1, [r3, #0]
 8000f8c:	4b39      	ldr	r3, [pc, #228]	; (8001074 <HAL_UART_RxCpltCallback+0x284>)
 8000f8e:	5499      	strb	r1, [r3, r2]
			radioAuxTracker++;
 8000f90:	4b36      	ldr	r3, [pc, #216]	; (800106c <HAL_UART_RxCpltCallback+0x27c>)
 8000f92:	781b      	ldrb	r3, [r3, #0]
 8000f94:	3301      	adds	r3, #1
 8000f96:	b2da      	uxtb	r2, r3
 8000f98:	4b34      	ldr	r3, [pc, #208]	; (800106c <HAL_UART_RxCpltCallback+0x27c>)
 8000f9a:	701a      	strb	r2, [r3, #0]

			if (radioAuxIn == NAK || radioAuxIn == ETX)
 8000f9c:	4b34      	ldr	r3, [pc, #208]	; (8001070 <HAL_UART_RxCpltCallback+0x280>)
 8000f9e:	781b      	ldrb	r3, [r3, #0]
 8000fa0:	2b15      	cmp	r3, #21
 8000fa2:	d003      	beq.n	8000fac <HAL_UART_RxCpltCallback+0x1bc>
 8000fa4:	4b32      	ldr	r3, [pc, #200]	; (8001070 <HAL_UART_RxCpltCallback+0x280>)
 8000fa6:	781b      	ldrb	r3, [r3, #0]
 8000fa8:	2b03      	cmp	r3, #3
 8000faa:	d102      	bne.n	8000fb2 <HAL_UART_RxCpltCallback+0x1c2>
			{
				radioAuxPacketComplete = true;
 8000fac:	4b32      	ldr	r3, [pc, #200]	; (8001078 <HAL_UART_RxCpltCallback+0x288>)
 8000fae:	2201      	movs	r2, #1
 8000fb0:	701a      	strb	r2, [r3, #0]
			}

			HAL_UART_Receive_IT(&huart5, &radioAuxIn, 1);
 8000fb2:	492f      	ldr	r1, [pc, #188]	; (8001070 <HAL_UART_RxCpltCallback+0x280>)
 8000fb4:	4b31      	ldr	r3, [pc, #196]	; (800107c <HAL_UART_RxCpltCallback+0x28c>)
 8000fb6:	2201      	movs	r2, #1
 8000fb8:	0018      	movs	r0, r3
 8000fba:	f002 fb8d 	bl	80036d8 <HAL_UART_Receive_IT>
		}

	}


}
 8000fbe:	e022      	b.n	8001006 <HAL_UART_RxCpltCallback+0x216>
	else if (mode == MASTER)
 8000fc0:	4b1c      	ldr	r3, [pc, #112]	; (8001034 <HAL_UART_RxCpltCallback+0x244>)
 8000fc2:	781b      	ldrb	r3, [r3, #0]
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d01e      	beq.n	8001006 <HAL_UART_RxCpltCallback+0x216>
		if (huart->Instance == USART5)
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	4a26      	ldr	r2, [pc, #152]	; (8001068 <HAL_UART_RxCpltCallback+0x278>)
 8000fce:	4293      	cmp	r3, r2
 8000fd0:	d119      	bne.n	8001006 <HAL_UART_RxCpltCallback+0x216>
			PCBuffer[PCTracker] = PCIn;
 8000fd2:	4b2b      	ldr	r3, [pc, #172]	; (8001080 <HAL_UART_RxCpltCallback+0x290>)
 8000fd4:	781b      	ldrb	r3, [r3, #0]
 8000fd6:	001a      	movs	r2, r3
 8000fd8:	4b2a      	ldr	r3, [pc, #168]	; (8001084 <HAL_UART_RxCpltCallback+0x294>)
 8000fda:	7819      	ldrb	r1, [r3, #0]
 8000fdc:	4b2a      	ldr	r3, [pc, #168]	; (8001088 <HAL_UART_RxCpltCallback+0x298>)
 8000fde:	5499      	strb	r1, [r3, r2]
			PCTracker++;
 8000fe0:	4b27      	ldr	r3, [pc, #156]	; (8001080 <HAL_UART_RxCpltCallback+0x290>)
 8000fe2:	781b      	ldrb	r3, [r3, #0]
 8000fe4:	3301      	adds	r3, #1
 8000fe6:	b2da      	uxtb	r2, r3
 8000fe8:	4b25      	ldr	r3, [pc, #148]	; (8001080 <HAL_UART_RxCpltCallback+0x290>)
 8000fea:	701a      	strb	r2, [r3, #0]
			if (PCIn == '\n')
 8000fec:	4b25      	ldr	r3, [pc, #148]	; (8001084 <HAL_UART_RxCpltCallback+0x294>)
 8000fee:	781b      	ldrb	r3, [r3, #0]
 8000ff0:	2b0a      	cmp	r3, #10
 8000ff2:	d102      	bne.n	8000ffa <HAL_UART_RxCpltCallback+0x20a>
				PCPacketComplete = true;
 8000ff4:	4b25      	ldr	r3, [pc, #148]	; (800108c <HAL_UART_RxCpltCallback+0x29c>)
 8000ff6:	2201      	movs	r2, #1
 8000ff8:	701a      	strb	r2, [r3, #0]
			HAL_UART_Receive_IT(&huart5, &PCIn, 1);
 8000ffa:	4922      	ldr	r1, [pc, #136]	; (8001084 <HAL_UART_RxCpltCallback+0x294>)
 8000ffc:	4b1f      	ldr	r3, [pc, #124]	; (800107c <HAL_UART_RxCpltCallback+0x28c>)
 8000ffe:	2201      	movs	r2, #1
 8001000:	0018      	movs	r0, r3
 8001002:	f002 fb69 	bl	80036d8 <HAL_UART_Receive_IT>
}
 8001006:	46c0      	nop			; (mov r8, r8)
 8001008:	46bd      	mov	sp, r7
 800100a:	b002      	add	sp, #8
 800100c:	bd80      	pop	{r7, pc}
 800100e:	46c0      	nop			; (mov r8, r8)
 8001010:	40013800 	.word	0x40013800
 8001014:	20000034 	.word	0x20000034
 8001018:	20000000 	.word	0x20000000
 800101c:	20000194 	.word	0x20000194
 8001020:	20000038 	.word	0x20000038
 8001024:	20000195 	.word	0x20000195
 8001028:	200003e0 	.word	0x200003e0
 800102c:	20000197 	.word	0x20000197
 8001030:	20000030 	.word	0x20000030
 8001034:	20000154 	.word	0x20000154
 8001038:	40004c00 	.word	0x40004c00
 800103c:	20000028 	.word	0x20000028
 8001040:	20000024 	.word	0x20000024
 8001044:	2000025c 	.word	0x2000025c
 8001048:	2000002c 	.word	0x2000002c
 800104c:	20000460 	.word	0x20000460
 8001050:	40004400 	.word	0x40004400
 8001054:	20000029 	.word	0x20000029
 8001058:	20000025 	.word	0x20000025
 800105c:	200001f8 	.word	0x200001f8
 8001060:	2000002d 	.word	0x2000002d
 8001064:	200004e0 	.word	0x200004e0
 8001068:	40005000 	.word	0x40005000
 800106c:	2000002a 	.word	0x2000002a
 8001070:	20000026 	.word	0x20000026
 8001074:	2000008c 	.word	0x2000008c
 8001078:	2000002e 	.word	0x2000002e
 800107c:	20000360 	.word	0x20000360
 8001080:	2000002b 	.word	0x2000002b
 8001084:	20000027 	.word	0x20000027
 8001088:	200000f0 	.word	0x200000f0
 800108c:	2000002f 	.word	0x2000002f

08001090 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001094:	46c0      	nop			; (mov r8, r8)
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}
	...

0800109c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010a0:	4b07      	ldr	r3, [pc, #28]	; (80010c0 <HAL_MspInit+0x24>)
 80010a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80010a4:	4b06      	ldr	r3, [pc, #24]	; (80010c0 <HAL_MspInit+0x24>)
 80010a6:	2101      	movs	r1, #1
 80010a8:	430a      	orrs	r2, r1
 80010aa:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 80010ac:	4b04      	ldr	r3, [pc, #16]	; (80010c0 <HAL_MspInit+0x24>)
 80010ae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80010b0:	4b03      	ldr	r3, [pc, #12]	; (80010c0 <HAL_MspInit+0x24>)
 80010b2:	2180      	movs	r1, #128	; 0x80
 80010b4:	0549      	lsls	r1, r1, #21
 80010b6:	430a      	orrs	r2, r1
 80010b8:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010ba:	46c0      	nop			; (mov r8, r8)
 80010bc:	46bd      	mov	sp, r7
 80010be:	bd80      	pop	{r7, pc}
 80010c0:	40021000 	.word	0x40021000

080010c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80010c8:	46c0      	nop			; (mov r8, r8)
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd80      	pop	{r7, pc}

080010ce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010ce:	b580      	push	{r7, lr}
 80010d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010d2:	e7fe      	b.n	80010d2 <HardFault_Handler+0x4>

080010d4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80010d8:	46c0      	nop			; (mov r8, r8)
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}

080010de <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010de:	b580      	push	{r7, lr}
 80010e0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010e2:	46c0      	nop			; (mov r8, r8)
 80010e4:	46bd      	mov	sp, r7
 80010e6:	bd80      	pop	{r7, pc}

080010e8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010ec:	f000 fb66 	bl	80017bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010f0:	46c0      	nop			; (mov r8, r8)
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}

080010f6 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 80010f6:	b580      	push	{r7, lr}
 80010f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 80010fa:	2380      	movs	r3, #128	; 0x80
 80010fc:	021b      	lsls	r3, r3, #8
 80010fe:	0018      	movs	r0, r3
 8001100:	f000 fe7c 	bl	8001dfc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8001104:	46c0      	nop			; (mov r8, r8)
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}
	...

0800110c <USART4_5_IRQHandler>:

/**
  * @brief This function handles USART4 and USART5 interrupt.
  */
void USART4_5_IRQHandler(void)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART4_5_IRQn 0 */

  /* USER CODE END USART4_5_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8001110:	4b05      	ldr	r3, [pc, #20]	; (8001128 <USART4_5_IRQHandler+0x1c>)
 8001112:	0018      	movs	r0, r3
 8001114:	f002 fb98 	bl	8003848 <HAL_UART_IRQHandler>
  HAL_UART_IRQHandler(&huart5);
 8001118:	4b04      	ldr	r3, [pc, #16]	; (800112c <USART4_5_IRQHandler+0x20>)
 800111a:	0018      	movs	r0, r3
 800111c:	f002 fb94 	bl	8003848 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART4_5_IRQn 1 */

  /* USER CODE END USART4_5_IRQn 1 */
}
 8001120:	46c0      	nop			; (mov r8, r8)
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}
 8001126:	46c0      	nop			; (mov r8, r8)
 8001128:	20000460 	.word	0x20000460
 800112c:	20000360 	.word	0x20000360

08001130 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001134:	4b03      	ldr	r3, [pc, #12]	; (8001144 <USART1_IRQHandler+0x14>)
 8001136:	0018      	movs	r0, r3
 8001138:	f002 fb86 	bl	8003848 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800113c:	46c0      	nop			; (mov r8, r8)
 800113e:	46bd      	mov	sp, r7
 8001140:	bd80      	pop	{r7, pc}
 8001142:	46c0      	nop			; (mov r8, r8)
 8001144:	200003e0 	.word	0x200003e0

08001148 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800114c:	4b03      	ldr	r3, [pc, #12]	; (800115c <USART2_IRQHandler+0x14>)
 800114e:	0018      	movs	r0, r3
 8001150:	f002 fb7a 	bl	8003848 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001154:	46c0      	nop			; (mov r8, r8)
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}
 800115a:	46c0      	nop			; (mov r8, r8)
 800115c:	200004e0 	.word	0x200004e0

08001160 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	af00      	add	r7, sp, #0
/*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100U;
 8001164:	4b17      	ldr	r3, [pc, #92]	; (80011c4 <SystemInit+0x64>)
 8001166:	681a      	ldr	r2, [r3, #0]
 8001168:	4b16      	ldr	r3, [pc, #88]	; (80011c4 <SystemInit+0x64>)
 800116a:	2180      	movs	r1, #128	; 0x80
 800116c:	0049      	lsls	r1, r1, #1
 800116e:	430a      	orrs	r2, r1
 8001170:	601a      	str	r2, [r3, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t) 0x88FF400CU;
 8001172:	4b14      	ldr	r3, [pc, #80]	; (80011c4 <SystemInit+0x64>)
 8001174:	68da      	ldr	r2, [r3, #12]
 8001176:	4b13      	ldr	r3, [pc, #76]	; (80011c4 <SystemInit+0x64>)
 8001178:	4913      	ldr	r1, [pc, #76]	; (80011c8 <SystemInit+0x68>)
 800117a:	400a      	ands	r2, r1
 800117c:	60da      	str	r2, [r3, #12]

  /*!< Reset HSION, HSIDIVEN, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 800117e:	4b11      	ldr	r3, [pc, #68]	; (80011c4 <SystemInit+0x64>)
 8001180:	681a      	ldr	r2, [r3, #0]
 8001182:	4b10      	ldr	r3, [pc, #64]	; (80011c4 <SystemInit+0x64>)
 8001184:	4911      	ldr	r1, [pc, #68]	; (80011cc <SystemInit+0x6c>)
 8001186:	400a      	ands	r2, r1
 8001188:	601a      	str	r2, [r3, #0]

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 800118a:	4b0e      	ldr	r3, [pc, #56]	; (80011c4 <SystemInit+0x64>)
 800118c:	689a      	ldr	r2, [r3, #8]
 800118e:	4b0d      	ldr	r3, [pc, #52]	; (80011c4 <SystemInit+0x64>)
 8001190:	2101      	movs	r1, #1
 8001192:	438a      	bics	r2, r1
 8001194:	609a      	str	r2, [r3, #8]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 8001196:	4b0b      	ldr	r3, [pc, #44]	; (80011c4 <SystemInit+0x64>)
 8001198:	681a      	ldr	r2, [r3, #0]
 800119a:	4b0a      	ldr	r3, [pc, #40]	; (80011c4 <SystemInit+0x64>)
 800119c:	490c      	ldr	r1, [pc, #48]	; (80011d0 <SystemInit+0x70>)
 800119e:	400a      	ands	r2, r1
 80011a0:	601a      	str	r2, [r3, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFFU;
 80011a2:	4b08      	ldr	r3, [pc, #32]	; (80011c4 <SystemInit+0x64>)
 80011a4:	68da      	ldr	r2, [r3, #12]
 80011a6:	4b07      	ldr	r3, [pc, #28]	; (80011c4 <SystemInit+0x64>)
 80011a8:	490a      	ldr	r1, [pc, #40]	; (80011d4 <SystemInit+0x74>)
 80011aa:	400a      	ands	r2, r1
 80011ac:	60da      	str	r2, [r3, #12]

  /*!< Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80011ae:	4b05      	ldr	r3, [pc, #20]	; (80011c4 <SystemInit+0x64>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	611a      	str	r2, [r3, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80011b4:	4b08      	ldr	r3, [pc, #32]	; (80011d8 <SystemInit+0x78>)
 80011b6:	2280      	movs	r2, #128	; 0x80
 80011b8:	0512      	lsls	r2, r2, #20
 80011ba:	609a      	str	r2, [r3, #8]
#endif
}
 80011bc:	46c0      	nop			; (mov r8, r8)
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd80      	pop	{r7, pc}
 80011c2:	46c0      	nop			; (mov r8, r8)
 80011c4:	40021000 	.word	0x40021000
 80011c8:	88ff400c 	.word	0x88ff400c
 80011cc:	fef6fff6 	.word	0xfef6fff6
 80011d0:	fffbffff 	.word	0xfffbffff
 80011d4:	ff02ffff 	.word	0xff02ffff
 80011d8:	e000ed00 	.word	0xe000ed00

080011dc <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b086      	sub	sp, #24
 80011e0:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011e2:	2310      	movs	r3, #16
 80011e4:	18fb      	adds	r3, r7, r3
 80011e6:	0018      	movs	r0, r3
 80011e8:	2308      	movs	r3, #8
 80011ea:	001a      	movs	r2, r3
 80011ec:	2100      	movs	r1, #0
 80011ee:	f003 fa1c 	bl	800462a <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80011f2:	003b      	movs	r3, r7
 80011f4:	0018      	movs	r0, r3
 80011f6:	2310      	movs	r3, #16
 80011f8:	001a      	movs	r2, r3
 80011fa:	2100      	movs	r1, #0
 80011fc:	f003 fa15 	bl	800462a <memset>

  htim3.Instance = TIM3;
 8001200:	4b29      	ldr	r3, [pc, #164]	; (80012a8 <MX_TIM3_Init+0xcc>)
 8001202:	4a2a      	ldr	r2, [pc, #168]	; (80012ac <MX_TIM3_Init+0xd0>)
 8001204:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 32-1;
 8001206:	4b28      	ldr	r3, [pc, #160]	; (80012a8 <MX_TIM3_Init+0xcc>)
 8001208:	221f      	movs	r2, #31
 800120a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800120c:	4b26      	ldr	r3, [pc, #152]	; (80012a8 <MX_TIM3_Init+0xcc>)
 800120e:	2200      	movs	r2, #0
 8001210:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 500-1;
 8001212:	4b25      	ldr	r3, [pc, #148]	; (80012a8 <MX_TIM3_Init+0xcc>)
 8001214:	22f4      	movs	r2, #244	; 0xf4
 8001216:	32ff      	adds	r2, #255	; 0xff
 8001218:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800121a:	4b23      	ldr	r3, [pc, #140]	; (80012a8 <MX_TIM3_Init+0xcc>)
 800121c:	2200      	movs	r2, #0
 800121e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001220:	4b21      	ldr	r3, [pc, #132]	; (80012a8 <MX_TIM3_Init+0xcc>)
 8001222:	2200      	movs	r2, #0
 8001224:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001226:	4b20      	ldr	r3, [pc, #128]	; (80012a8 <MX_TIM3_Init+0xcc>)
 8001228:	0018      	movs	r0, r3
 800122a:	f001 fe47 	bl	8002ebc <HAL_TIM_PWM_Init>
 800122e:	1e03      	subs	r3, r0, #0
 8001230:	d001      	beq.n	8001236 <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 8001232:	f7ff ff2d 	bl	8001090 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001236:	2110      	movs	r1, #16
 8001238:	187b      	adds	r3, r7, r1
 800123a:	2200      	movs	r2, #0
 800123c:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800123e:	187b      	adds	r3, r7, r1
 8001240:	2200      	movs	r2, #0
 8001242:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001244:	187a      	adds	r2, r7, r1
 8001246:	4b18      	ldr	r3, [pc, #96]	; (80012a8 <MX_TIM3_Init+0xcc>)
 8001248:	0011      	movs	r1, r2
 800124a:	0018      	movs	r0, r3
 800124c:	f002 f8e7 	bl	800341e <HAL_TIMEx_MasterConfigSynchronization>
 8001250:	1e03      	subs	r3, r0, #0
 8001252:	d001      	beq.n	8001258 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8001254:	f7ff ff1c 	bl	8001090 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001258:	003b      	movs	r3, r7
 800125a:	2260      	movs	r2, #96	; 0x60
 800125c:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 250;
 800125e:	003b      	movs	r3, r7
 8001260:	22fa      	movs	r2, #250	; 0xfa
 8001262:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001264:	003b      	movs	r3, r7
 8001266:	2200      	movs	r2, #0
 8001268:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800126a:	003b      	movs	r3, r7
 800126c:	2200      	movs	r2, #0
 800126e:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001270:	0039      	movs	r1, r7
 8001272:	4b0d      	ldr	r3, [pc, #52]	; (80012a8 <MX_TIM3_Init+0xcc>)
 8001274:	2204      	movs	r2, #4
 8001276:	0018      	movs	r0, r3
 8001278:	f001 fe94 	bl	8002fa4 <HAL_TIM_PWM_ConfigChannel>
 800127c:	1e03      	subs	r3, r0, #0
 800127e:	d001      	beq.n	8001284 <MX_TIM3_Init+0xa8>
  {
    Error_Handler();
 8001280:	f7ff ff06 	bl	8001090 <Error_Handler>
  }
  if (HAL_TIMEx_RemapConfig(&htim3, TIM3_TI2_GPIOB5_AF4) != HAL_OK)
 8001284:	4b08      	ldr	r3, [pc, #32]	; (80012a8 <MX_TIM3_Init+0xcc>)
 8001286:	2108      	movs	r1, #8
 8001288:	0018      	movs	r0, r3
 800128a:	f002 f90b 	bl	80034a4 <HAL_TIMEx_RemapConfig>
 800128e:	1e03      	subs	r3, r0, #0
 8001290:	d001      	beq.n	8001296 <MX_TIM3_Init+0xba>
  {
    Error_Handler();
 8001292:	f7ff fefd 	bl	8001090 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim3);
 8001296:	4b04      	ldr	r3, [pc, #16]	; (80012a8 <MX_TIM3_Init+0xcc>)
 8001298:	0018      	movs	r0, r3
 800129a:	f000 f821 	bl	80012e0 <HAL_TIM_MspPostInit>

}
 800129e:	46c0      	nop			; (mov r8, r8)
 80012a0:	46bd      	mov	sp, r7
 80012a2:	b006      	add	sp, #24
 80012a4:	bd80      	pop	{r7, pc}
 80012a6:	46c0      	nop			; (mov r8, r8)
 80012a8:	20000324 	.word	0x20000324
 80012ac:	40000400 	.word	0x40000400

080012b0 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b082      	sub	sp, #8
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM3)
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	4a06      	ldr	r2, [pc, #24]	; (80012d8 <HAL_TIM_PWM_MspInit+0x28>)
 80012be:	4293      	cmp	r3, r2
 80012c0:	d105      	bne.n	80012ce <HAL_TIM_PWM_MspInit+0x1e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80012c2:	4b06      	ldr	r3, [pc, #24]	; (80012dc <HAL_TIM_PWM_MspInit+0x2c>)
 80012c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80012c6:	4b05      	ldr	r3, [pc, #20]	; (80012dc <HAL_TIM_PWM_MspInit+0x2c>)
 80012c8:	2102      	movs	r1, #2
 80012ca:	430a      	orrs	r2, r1
 80012cc:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80012ce:	46c0      	nop			; (mov r8, r8)
 80012d0:	46bd      	mov	sp, r7
 80012d2:	b002      	add	sp, #8
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	46c0      	nop			; (mov r8, r8)
 80012d8:	40000400 	.word	0x40000400
 80012dc:	40021000 	.word	0x40021000

080012e0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b088      	sub	sp, #32
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012e8:	230c      	movs	r3, #12
 80012ea:	18fb      	adds	r3, r7, r3
 80012ec:	0018      	movs	r0, r3
 80012ee:	2314      	movs	r3, #20
 80012f0:	001a      	movs	r2, r3
 80012f2:	2100      	movs	r1, #0
 80012f4:	f003 f999 	bl	800462a <memset>
  if(timHandle->Instance==TIM3)
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	4a14      	ldr	r2, [pc, #80]	; (8001350 <HAL_TIM_MspPostInit+0x70>)
 80012fe:	4293      	cmp	r3, r2
 8001300:	d121      	bne.n	8001346 <HAL_TIM_MspPostInit+0x66>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001302:	4b14      	ldr	r3, [pc, #80]	; (8001354 <HAL_TIM_MspPostInit+0x74>)
 8001304:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001306:	4b13      	ldr	r3, [pc, #76]	; (8001354 <HAL_TIM_MspPostInit+0x74>)
 8001308:	2102      	movs	r1, #2
 800130a:	430a      	orrs	r2, r1
 800130c:	62da      	str	r2, [r3, #44]	; 0x2c
 800130e:	4b11      	ldr	r3, [pc, #68]	; (8001354 <HAL_TIM_MspPostInit+0x74>)
 8001310:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001312:	2202      	movs	r2, #2
 8001314:	4013      	ands	r3, r2
 8001316:	60bb      	str	r3, [r7, #8]
 8001318:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration    
    PB5     ------> TIM3_CH2 
    */
    GPIO_InitStruct.Pin = BUZZER_Pin;
 800131a:	210c      	movs	r1, #12
 800131c:	187b      	adds	r3, r7, r1
 800131e:	2220      	movs	r2, #32
 8001320:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001322:	187b      	adds	r3, r7, r1
 8001324:	2202      	movs	r2, #2
 8001326:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001328:	187b      	adds	r3, r7, r1
 800132a:	2200      	movs	r2, #0
 800132c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800132e:	187b      	adds	r3, r7, r1
 8001330:	2200      	movs	r2, #0
 8001332:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM3;
 8001334:	187b      	adds	r3, r7, r1
 8001336:	2204      	movs	r2, #4
 8001338:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(BUZZER_GPIO_Port, &GPIO_InitStruct);
 800133a:	187b      	adds	r3, r7, r1
 800133c:	4a06      	ldr	r2, [pc, #24]	; (8001358 <HAL_TIM_MspPostInit+0x78>)
 800133e:	0019      	movs	r1, r3
 8001340:	0010      	movs	r0, r2
 8001342:	f000 fb91 	bl	8001a68 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001346:	46c0      	nop			; (mov r8, r8)
 8001348:	46bd      	mov	sp, r7
 800134a:	b008      	add	sp, #32
 800134c:	bd80      	pop	{r7, pc}
 800134e:	46c0      	nop			; (mov r8, r8)
 8001350:	40000400 	.word	0x40000400
 8001354:	40021000 	.word	0x40021000
 8001358:	50000400 	.word	0x50000400

0800135c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart5;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8001360:	4b14      	ldr	r3, [pc, #80]	; (80013b4 <MX_USART1_UART_Init+0x58>)
 8001362:	4a15      	ldr	r2, [pc, #84]	; (80013b8 <MX_USART1_UART_Init+0x5c>)
 8001364:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001366:	4b13      	ldr	r3, [pc, #76]	; (80013b4 <MX_USART1_UART_Init+0x58>)
 8001368:	2296      	movs	r2, #150	; 0x96
 800136a:	0192      	lsls	r2, r2, #6
 800136c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800136e:	4b11      	ldr	r3, [pc, #68]	; (80013b4 <MX_USART1_UART_Init+0x58>)
 8001370:	2200      	movs	r2, #0
 8001372:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001374:	4b0f      	ldr	r3, [pc, #60]	; (80013b4 <MX_USART1_UART_Init+0x58>)
 8001376:	2200      	movs	r2, #0
 8001378:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800137a:	4b0e      	ldr	r3, [pc, #56]	; (80013b4 <MX_USART1_UART_Init+0x58>)
 800137c:	2200      	movs	r2, #0
 800137e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001380:	4b0c      	ldr	r3, [pc, #48]	; (80013b4 <MX_USART1_UART_Init+0x58>)
 8001382:	220c      	movs	r2, #12
 8001384:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001386:	4b0b      	ldr	r3, [pc, #44]	; (80013b4 <MX_USART1_UART_Init+0x58>)
 8001388:	2200      	movs	r2, #0
 800138a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800138c:	4b09      	ldr	r3, [pc, #36]	; (80013b4 <MX_USART1_UART_Init+0x58>)
 800138e:	2200      	movs	r2, #0
 8001390:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001392:	4b08      	ldr	r3, [pc, #32]	; (80013b4 <MX_USART1_UART_Init+0x58>)
 8001394:	2200      	movs	r2, #0
 8001396:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001398:	4b06      	ldr	r3, [pc, #24]	; (80013b4 <MX_USART1_UART_Init+0x58>)
 800139a:	2200      	movs	r2, #0
 800139c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800139e:	4b05      	ldr	r3, [pc, #20]	; (80013b4 <MX_USART1_UART_Init+0x58>)
 80013a0:	0018      	movs	r0, r3
 80013a2:	f002 f89d 	bl	80034e0 <HAL_UART_Init>
 80013a6:	1e03      	subs	r3, r0, #0
 80013a8:	d001      	beq.n	80013ae <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80013aa:	f7ff fe71 	bl	8001090 <Error_Handler>
  }

}
 80013ae:	46c0      	nop			; (mov r8, r8)
 80013b0:	46bd      	mov	sp, r7
 80013b2:	bd80      	pop	{r7, pc}
 80013b4:	200003e0 	.word	0x200003e0
 80013b8:	40013800 	.word	0x40013800

080013bc <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 80013c0:	4b14      	ldr	r3, [pc, #80]	; (8001414 <MX_USART2_UART_Init+0x58>)
 80013c2:	4a15      	ldr	r2, [pc, #84]	; (8001418 <MX_USART2_UART_Init+0x5c>)
 80013c4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 80013c6:	4b13      	ldr	r3, [pc, #76]	; (8001414 <MX_USART2_UART_Init+0x58>)
 80013c8:	2296      	movs	r2, #150	; 0x96
 80013ca:	0212      	lsls	r2, r2, #8
 80013cc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80013ce:	4b11      	ldr	r3, [pc, #68]	; (8001414 <MX_USART2_UART_Init+0x58>)
 80013d0:	2200      	movs	r2, #0
 80013d2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80013d4:	4b0f      	ldr	r3, [pc, #60]	; (8001414 <MX_USART2_UART_Init+0x58>)
 80013d6:	2200      	movs	r2, #0
 80013d8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80013da:	4b0e      	ldr	r3, [pc, #56]	; (8001414 <MX_USART2_UART_Init+0x58>)
 80013dc:	2200      	movs	r2, #0
 80013de:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80013e0:	4b0c      	ldr	r3, [pc, #48]	; (8001414 <MX_USART2_UART_Init+0x58>)
 80013e2:	220c      	movs	r2, #12
 80013e4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013e6:	4b0b      	ldr	r3, [pc, #44]	; (8001414 <MX_USART2_UART_Init+0x58>)
 80013e8:	2200      	movs	r2, #0
 80013ea:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80013ec:	4b09      	ldr	r3, [pc, #36]	; (8001414 <MX_USART2_UART_Init+0x58>)
 80013ee:	2200      	movs	r2, #0
 80013f0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80013f2:	4b08      	ldr	r3, [pc, #32]	; (8001414 <MX_USART2_UART_Init+0x58>)
 80013f4:	2200      	movs	r2, #0
 80013f6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80013f8:	4b06      	ldr	r3, [pc, #24]	; (8001414 <MX_USART2_UART_Init+0x58>)
 80013fa:	2200      	movs	r2, #0
 80013fc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80013fe:	4b05      	ldr	r3, [pc, #20]	; (8001414 <MX_USART2_UART_Init+0x58>)
 8001400:	0018      	movs	r0, r3
 8001402:	f002 f86d 	bl	80034e0 <HAL_UART_Init>
 8001406:	1e03      	subs	r3, r0, #0
 8001408:	d001      	beq.n	800140e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800140a:	f7ff fe41 	bl	8001090 <Error_Handler>
  }

}
 800140e:	46c0      	nop			; (mov r8, r8)
 8001410:	46bd      	mov	sp, r7
 8001412:	bd80      	pop	{r7, pc}
 8001414:	200004e0 	.word	0x200004e0
 8001418:	40004400 	.word	0x40004400

0800141c <MX_USART4_UART_Init>:
/* USART4 init function */

void MX_USART4_UART_Init(void)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	af00      	add	r7, sp, #0

  huart4.Instance = USART4;
 8001420:	4b14      	ldr	r3, [pc, #80]	; (8001474 <MX_USART4_UART_Init+0x58>)
 8001422:	4a15      	ldr	r2, [pc, #84]	; (8001478 <MX_USART4_UART_Init+0x5c>)
 8001424:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 38400;
 8001426:	4b13      	ldr	r3, [pc, #76]	; (8001474 <MX_USART4_UART_Init+0x58>)
 8001428:	2296      	movs	r2, #150	; 0x96
 800142a:	0212      	lsls	r2, r2, #8
 800142c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800142e:	4b11      	ldr	r3, [pc, #68]	; (8001474 <MX_USART4_UART_Init+0x58>)
 8001430:	2200      	movs	r2, #0
 8001432:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001434:	4b0f      	ldr	r3, [pc, #60]	; (8001474 <MX_USART4_UART_Init+0x58>)
 8001436:	2200      	movs	r2, #0
 8001438:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800143a:	4b0e      	ldr	r3, [pc, #56]	; (8001474 <MX_USART4_UART_Init+0x58>)
 800143c:	2200      	movs	r2, #0
 800143e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001440:	4b0c      	ldr	r3, [pc, #48]	; (8001474 <MX_USART4_UART_Init+0x58>)
 8001442:	220c      	movs	r2, #12
 8001444:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001446:	4b0b      	ldr	r3, [pc, #44]	; (8001474 <MX_USART4_UART_Init+0x58>)
 8001448:	2200      	movs	r2, #0
 800144a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800144c:	4b09      	ldr	r3, [pc, #36]	; (8001474 <MX_USART4_UART_Init+0x58>)
 800144e:	2200      	movs	r2, #0
 8001450:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001452:	4b08      	ldr	r3, [pc, #32]	; (8001474 <MX_USART4_UART_Init+0x58>)
 8001454:	2200      	movs	r2, #0
 8001456:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001458:	4b06      	ldr	r3, [pc, #24]	; (8001474 <MX_USART4_UART_Init+0x58>)
 800145a:	2200      	movs	r2, #0
 800145c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800145e:	4b05      	ldr	r3, [pc, #20]	; (8001474 <MX_USART4_UART_Init+0x58>)
 8001460:	0018      	movs	r0, r3
 8001462:	f002 f83d 	bl	80034e0 <HAL_UART_Init>
 8001466:	1e03      	subs	r3, r0, #0
 8001468:	d001      	beq.n	800146e <MX_USART4_UART_Init+0x52>
  {
    Error_Handler();
 800146a:	f7ff fe11 	bl	8001090 <Error_Handler>
  }

}
 800146e:	46c0      	nop			; (mov r8, r8)
 8001470:	46bd      	mov	sp, r7
 8001472:	bd80      	pop	{r7, pc}
 8001474:	20000460 	.word	0x20000460
 8001478:	40004c00 	.word	0x40004c00

0800147c <MX_USART5_UART_Init>:
/* USART5 init function */

void MX_USART5_UART_Init(void)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	af00      	add	r7, sp, #0

  huart5.Instance = USART5;
 8001480:	4b14      	ldr	r3, [pc, #80]	; (80014d4 <MX_USART5_UART_Init+0x58>)
 8001482:	4a15      	ldr	r2, [pc, #84]	; (80014d8 <MX_USART5_UART_Init+0x5c>)
 8001484:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 38400;
 8001486:	4b13      	ldr	r3, [pc, #76]	; (80014d4 <MX_USART5_UART_Init+0x58>)
 8001488:	2296      	movs	r2, #150	; 0x96
 800148a:	0212      	lsls	r2, r2, #8
 800148c:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 800148e:	4b11      	ldr	r3, [pc, #68]	; (80014d4 <MX_USART5_UART_Init+0x58>)
 8001490:	2200      	movs	r2, #0
 8001492:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8001494:	4b0f      	ldr	r3, [pc, #60]	; (80014d4 <MX_USART5_UART_Init+0x58>)
 8001496:	2200      	movs	r2, #0
 8001498:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 800149a:	4b0e      	ldr	r3, [pc, #56]	; (80014d4 <MX_USART5_UART_Init+0x58>)
 800149c:	2200      	movs	r2, #0
 800149e:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 80014a0:	4b0c      	ldr	r3, [pc, #48]	; (80014d4 <MX_USART5_UART_Init+0x58>)
 80014a2:	220c      	movs	r2, #12
 80014a4:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014a6:	4b0b      	ldr	r3, [pc, #44]	; (80014d4 <MX_USART5_UART_Init+0x58>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 80014ac:	4b09      	ldr	r3, [pc, #36]	; (80014d4 <MX_USART5_UART_Init+0x58>)
 80014ae:	2200      	movs	r2, #0
 80014b0:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80014b2:	4b08      	ldr	r3, [pc, #32]	; (80014d4 <MX_USART5_UART_Init+0x58>)
 80014b4:	2200      	movs	r2, #0
 80014b6:	621a      	str	r2, [r3, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80014b8:	4b06      	ldr	r3, [pc, #24]	; (80014d4 <MX_USART5_UART_Init+0x58>)
 80014ba:	2200      	movs	r2, #0
 80014bc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart5) != HAL_OK)
 80014be:	4b05      	ldr	r3, [pc, #20]	; (80014d4 <MX_USART5_UART_Init+0x58>)
 80014c0:	0018      	movs	r0, r3
 80014c2:	f002 f80d 	bl	80034e0 <HAL_UART_Init>
 80014c6:	1e03      	subs	r3, r0, #0
 80014c8:	d001      	beq.n	80014ce <MX_USART5_UART_Init+0x52>
  {
    Error_Handler();
 80014ca:	f7ff fde1 	bl	8001090 <Error_Handler>
  }

}
 80014ce:	46c0      	nop			; (mov r8, r8)
 80014d0:	46bd      	mov	sp, r7
 80014d2:	bd80      	pop	{r7, pc}
 80014d4:	20000360 	.word	0x20000360
 80014d8:	40005000 	.word	0x40005000

080014dc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b08c      	sub	sp, #48	; 0x30
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014e4:	231c      	movs	r3, #28
 80014e6:	18fb      	adds	r3, r7, r3
 80014e8:	0018      	movs	r0, r3
 80014ea:	2314      	movs	r3, #20
 80014ec:	001a      	movs	r2, r3
 80014ee:	2100      	movs	r1, #0
 80014f0:	f003 f89b 	bl	800462a <memset>
  if(uartHandle->Instance==USART1)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	4a70      	ldr	r2, [pc, #448]	; (80016bc <HAL_UART_MspInit+0x1e0>)
 80014fa:	4293      	cmp	r3, r2
 80014fc:	d133      	bne.n	8001566 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80014fe:	4b70      	ldr	r3, [pc, #448]	; (80016c0 <HAL_UART_MspInit+0x1e4>)
 8001500:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001502:	4b6f      	ldr	r3, [pc, #444]	; (80016c0 <HAL_UART_MspInit+0x1e4>)
 8001504:	2180      	movs	r1, #128	; 0x80
 8001506:	01c9      	lsls	r1, r1, #7
 8001508:	430a      	orrs	r2, r1
 800150a:	635a      	str	r2, [r3, #52]	; 0x34
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800150c:	4b6c      	ldr	r3, [pc, #432]	; (80016c0 <HAL_UART_MspInit+0x1e4>)
 800150e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001510:	4b6b      	ldr	r3, [pc, #428]	; (80016c0 <HAL_UART_MspInit+0x1e4>)
 8001512:	2101      	movs	r1, #1
 8001514:	430a      	orrs	r2, r1
 8001516:	62da      	str	r2, [r3, #44]	; 0x2c
 8001518:	4b69      	ldr	r3, [pc, #420]	; (80016c0 <HAL_UART_MspInit+0x1e4>)
 800151a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800151c:	2201      	movs	r2, #1
 800151e:	4013      	ands	r3, r2
 8001520:	61bb      	str	r3, [r7, #24]
 8001522:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = XBEE_RX_Pin|XBEE_TX_Pin;
 8001524:	211c      	movs	r1, #28
 8001526:	187b      	adds	r3, r7, r1
 8001528:	22c0      	movs	r2, #192	; 0xc0
 800152a:	00d2      	lsls	r2, r2, #3
 800152c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800152e:	187b      	adds	r3, r7, r1
 8001530:	2202      	movs	r2, #2
 8001532:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001534:	187b      	adds	r3, r7, r1
 8001536:	2200      	movs	r2, #0
 8001538:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800153a:	187b      	adds	r3, r7, r1
 800153c:	2203      	movs	r2, #3
 800153e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8001540:	187b      	adds	r3, r7, r1
 8001542:	2204      	movs	r2, #4
 8001544:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001546:	187a      	adds	r2, r7, r1
 8001548:	23a0      	movs	r3, #160	; 0xa0
 800154a:	05db      	lsls	r3, r3, #23
 800154c:	0011      	movs	r1, r2
 800154e:	0018      	movs	r0, r3
 8001550:	f000 fa8a 	bl	8001a68 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 3, 0);
 8001554:	2200      	movs	r2, #0
 8001556:	2103      	movs	r1, #3
 8001558:	201b      	movs	r0, #27
 800155a:	f000 fa0b 	bl	8001974 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800155e:	201b      	movs	r0, #27
 8001560:	f000 fa1d 	bl	800199e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART4_5_IRQn);
  /* USER CODE BEGIN USART5_MspInit 1 */

  /* USER CODE END USART5_MspInit 1 */
  }
}
 8001564:	e0a5      	b.n	80016b2 <HAL_UART_MspInit+0x1d6>
  else if(uartHandle->Instance==USART2)
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	4a56      	ldr	r2, [pc, #344]	; (80016c4 <HAL_UART_MspInit+0x1e8>)
 800156c:	4293      	cmp	r3, r2
 800156e:	d132      	bne.n	80015d6 <HAL_UART_MspInit+0xfa>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001570:	4b53      	ldr	r3, [pc, #332]	; (80016c0 <HAL_UART_MspInit+0x1e4>)
 8001572:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001574:	4b52      	ldr	r3, [pc, #328]	; (80016c0 <HAL_UART_MspInit+0x1e4>)
 8001576:	2180      	movs	r1, #128	; 0x80
 8001578:	0289      	lsls	r1, r1, #10
 800157a:	430a      	orrs	r2, r1
 800157c:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800157e:	4b50      	ldr	r3, [pc, #320]	; (80016c0 <HAL_UART_MspInit+0x1e4>)
 8001580:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001582:	4b4f      	ldr	r3, [pc, #316]	; (80016c0 <HAL_UART_MspInit+0x1e4>)
 8001584:	2101      	movs	r1, #1
 8001586:	430a      	orrs	r2, r1
 8001588:	62da      	str	r2, [r3, #44]	; 0x2c
 800158a:	4b4d      	ldr	r3, [pc, #308]	; (80016c0 <HAL_UART_MspInit+0x1e4>)
 800158c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800158e:	2201      	movs	r2, #1
 8001590:	4013      	ands	r3, r2
 8001592:	617b      	str	r3, [r7, #20]
 8001594:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = BLUE_RX_Pin|BLUE_TX_Pin;
 8001596:	211c      	movs	r1, #28
 8001598:	187b      	adds	r3, r7, r1
 800159a:	220c      	movs	r2, #12
 800159c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800159e:	187b      	adds	r3, r7, r1
 80015a0:	2202      	movs	r2, #2
 80015a2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a4:	187b      	adds	r3, r7, r1
 80015a6:	2200      	movs	r2, #0
 80015a8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015aa:	187b      	adds	r3, r7, r1
 80015ac:	2203      	movs	r2, #3
 80015ae:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 80015b0:	187b      	adds	r3, r7, r1
 80015b2:	2204      	movs	r2, #4
 80015b4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015b6:	187a      	adds	r2, r7, r1
 80015b8:	23a0      	movs	r3, #160	; 0xa0
 80015ba:	05db      	lsls	r3, r3, #23
 80015bc:	0011      	movs	r1, r2
 80015be:	0018      	movs	r0, r3
 80015c0:	f000 fa52 	bl	8001a68 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 2, 0);
 80015c4:	2200      	movs	r2, #0
 80015c6:	2102      	movs	r1, #2
 80015c8:	201c      	movs	r0, #28
 80015ca:	f000 f9d3 	bl	8001974 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80015ce:	201c      	movs	r0, #28
 80015d0:	f000 f9e5 	bl	800199e <HAL_NVIC_EnableIRQ>
}
 80015d4:	e06d      	b.n	80016b2 <HAL_UART_MspInit+0x1d6>
  else if(uartHandle->Instance==USART4)
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	4a3b      	ldr	r2, [pc, #236]	; (80016c8 <HAL_UART_MspInit+0x1ec>)
 80015dc:	4293      	cmp	r3, r2
 80015de:	d132      	bne.n	8001646 <HAL_UART_MspInit+0x16a>
    __HAL_RCC_USART4_CLK_ENABLE();
 80015e0:	4b37      	ldr	r3, [pc, #220]	; (80016c0 <HAL_UART_MspInit+0x1e4>)
 80015e2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80015e4:	4b36      	ldr	r3, [pc, #216]	; (80016c0 <HAL_UART_MspInit+0x1e4>)
 80015e6:	2180      	movs	r1, #128	; 0x80
 80015e8:	0309      	lsls	r1, r1, #12
 80015ea:	430a      	orrs	r2, r1
 80015ec:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015ee:	4b34      	ldr	r3, [pc, #208]	; (80016c0 <HAL_UART_MspInit+0x1e4>)
 80015f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80015f2:	4b33      	ldr	r3, [pc, #204]	; (80016c0 <HAL_UART_MspInit+0x1e4>)
 80015f4:	2101      	movs	r1, #1
 80015f6:	430a      	orrs	r2, r1
 80015f8:	62da      	str	r2, [r3, #44]	; 0x2c
 80015fa:	4b31      	ldr	r3, [pc, #196]	; (80016c0 <HAL_UART_MspInit+0x1e4>)
 80015fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015fe:	2201      	movs	r2, #1
 8001600:	4013      	ands	r3, r2
 8001602:	613b      	str	r3, [r7, #16]
 8001604:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = RED_RX_Pin|RED_TX_Pin;
 8001606:	211c      	movs	r1, #28
 8001608:	187b      	adds	r3, r7, r1
 800160a:	2203      	movs	r2, #3
 800160c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800160e:	187b      	adds	r3, r7, r1
 8001610:	2202      	movs	r2, #2
 8001612:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001614:	187b      	adds	r3, r7, r1
 8001616:	2200      	movs	r2, #0
 8001618:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800161a:	187b      	adds	r3, r7, r1
 800161c:	2203      	movs	r2, #3
 800161e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_USART4;
 8001620:	187b      	adds	r3, r7, r1
 8001622:	2206      	movs	r2, #6
 8001624:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001626:	187a      	adds	r2, r7, r1
 8001628:	23a0      	movs	r3, #160	; 0xa0
 800162a:	05db      	lsls	r3, r3, #23
 800162c:	0011      	movs	r1, r2
 800162e:	0018      	movs	r0, r3
 8001630:	f000 fa1a 	bl	8001a68 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART4_5_IRQn, 1, 0);
 8001634:	2200      	movs	r2, #0
 8001636:	2101      	movs	r1, #1
 8001638:	200e      	movs	r0, #14
 800163a:	f000 f99b 	bl	8001974 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART4_5_IRQn);
 800163e:	200e      	movs	r0, #14
 8001640:	f000 f9ad 	bl	800199e <HAL_NVIC_EnableIRQ>
}
 8001644:	e035      	b.n	80016b2 <HAL_UART_MspInit+0x1d6>
  else if(uartHandle->Instance==USART5)
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	4a20      	ldr	r2, [pc, #128]	; (80016cc <HAL_UART_MspInit+0x1f0>)
 800164c:	4293      	cmp	r3, r2
 800164e:	d130      	bne.n	80016b2 <HAL_UART_MspInit+0x1d6>
    __HAL_RCC_USART5_CLK_ENABLE();
 8001650:	4b1b      	ldr	r3, [pc, #108]	; (80016c0 <HAL_UART_MspInit+0x1e4>)
 8001652:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001654:	4b1a      	ldr	r3, [pc, #104]	; (80016c0 <HAL_UART_MspInit+0x1e4>)
 8001656:	2180      	movs	r1, #128	; 0x80
 8001658:	0349      	lsls	r1, r1, #13
 800165a:	430a      	orrs	r2, r1
 800165c:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800165e:	4b18      	ldr	r3, [pc, #96]	; (80016c0 <HAL_UART_MspInit+0x1e4>)
 8001660:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001662:	4b17      	ldr	r3, [pc, #92]	; (80016c0 <HAL_UART_MspInit+0x1e4>)
 8001664:	2102      	movs	r1, #2
 8001666:	430a      	orrs	r2, r1
 8001668:	62da      	str	r2, [r3, #44]	; 0x2c
 800166a:	4b15      	ldr	r3, [pc, #84]	; (80016c0 <HAL_UART_MspInit+0x1e4>)
 800166c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800166e:	2202      	movs	r2, #2
 8001670:	4013      	ands	r3, r2
 8001672:	60fb      	str	r3, [r7, #12]
 8001674:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PC_RX_Pin|PC_TX_Pin;
 8001676:	211c      	movs	r1, #28
 8001678:	187b      	adds	r3, r7, r1
 800167a:	2218      	movs	r2, #24
 800167c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800167e:	187b      	adds	r3, r7, r1
 8001680:	2202      	movs	r2, #2
 8001682:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001684:	187b      	adds	r3, r7, r1
 8001686:	2200      	movs	r2, #0
 8001688:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800168a:	187b      	adds	r3, r7, r1
 800168c:	2203      	movs	r2, #3
 800168e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_USART5;
 8001690:	187b      	adds	r3, r7, r1
 8001692:	2206      	movs	r2, #6
 8001694:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001696:	187b      	adds	r3, r7, r1
 8001698:	4a0d      	ldr	r2, [pc, #52]	; (80016d0 <HAL_UART_MspInit+0x1f4>)
 800169a:	0019      	movs	r1, r3
 800169c:	0010      	movs	r0, r2
 800169e:	f000 f9e3 	bl	8001a68 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART4_5_IRQn, 1, 0);
 80016a2:	2200      	movs	r2, #0
 80016a4:	2101      	movs	r1, #1
 80016a6:	200e      	movs	r0, #14
 80016a8:	f000 f964 	bl	8001974 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART4_5_IRQn);
 80016ac:	200e      	movs	r0, #14
 80016ae:	f000 f976 	bl	800199e <HAL_NVIC_EnableIRQ>
}
 80016b2:	46c0      	nop			; (mov r8, r8)
 80016b4:	46bd      	mov	sp, r7
 80016b6:	b00c      	add	sp, #48	; 0x30
 80016b8:	bd80      	pop	{r7, pc}
 80016ba:	46c0      	nop			; (mov r8, r8)
 80016bc:	40013800 	.word	0x40013800
 80016c0:	40021000 	.word	0x40021000
 80016c4:	40004400 	.word	0x40004400
 80016c8:	40004c00 	.word	0x40004c00
 80016cc:	40005000 	.word	0x40005000
 80016d0:	50000400 	.word	0x50000400

080016d4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 80016d4:	480d      	ldr	r0, [pc, #52]	; (800170c <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 80016d6:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 80016d8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80016da:	e003      	b.n	80016e4 <LoopCopyDataInit>

080016dc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80016dc:	4b0c      	ldr	r3, [pc, #48]	; (8001710 <LoopForever+0x6>)
  ldr  r3, [r3, r1]
 80016de:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80016e0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80016e2:	3104      	adds	r1, #4

080016e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr  r0, =_sdata
 80016e4:	480b      	ldr	r0, [pc, #44]	; (8001714 <LoopForever+0xa>)
  ldr  r3, =_edata
 80016e6:	4b0c      	ldr	r3, [pc, #48]	; (8001718 <LoopForever+0xe>)
  adds  r2, r0, r1
 80016e8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80016ea:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80016ec:	d3f6      	bcc.n	80016dc <CopyDataInit>
  ldr  r2, =_sbss
 80016ee:	4a0b      	ldr	r2, [pc, #44]	; (800171c <LoopForever+0x12>)
  b  LoopFillZerobss
 80016f0:	e002      	b.n	80016f8 <LoopFillZerobss>

080016f2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 80016f2:	2300      	movs	r3, #0
  str  r3, [r2]
 80016f4:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016f6:	3204      	adds	r2, #4

080016f8 <LoopFillZerobss>:


LoopFillZerobss:
  ldr  r3, = _ebss
 80016f8:	4b09      	ldr	r3, [pc, #36]	; (8001720 <LoopForever+0x16>)
  cmp  r2, r3
 80016fa:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80016fc:	d3f9      	bcc.n	80016f2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80016fe:	f7ff fd2f 	bl	8001160 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001702:	f002 ff65 	bl	80045d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001706:	f7fe ffc9 	bl	800069c <main>

0800170a <LoopForever>:

LoopForever:
    b LoopForever
 800170a:	e7fe      	b.n	800170a <LoopForever>
   ldr   r0, =_estack
 800170c:	20005000 	.word	0x20005000
  ldr  r3, =_sidata
 8001710:	080046d0 	.word	0x080046d0
  ldr  r0, =_sdata
 8001714:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001718:	20000008 	.word	0x20000008
  ldr  r2, =_sbss
 800171c:	20000008 	.word	0x20000008
  ldr  r3, = _ebss
 8001720:	20000564 	.word	0x20000564

08001724 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001724:	e7fe      	b.n	8001724 <ADC1_COMP_IRQHandler>
	...

08001728 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b082      	sub	sp, #8
 800172c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800172e:	1dfb      	adds	r3, r7, #7
 8001730:	2200      	movs	r2, #0
 8001732:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8001734:	4b0b      	ldr	r3, [pc, #44]	; (8001764 <HAL_Init+0x3c>)
 8001736:	681a      	ldr	r2, [r3, #0]
 8001738:	4b0a      	ldr	r3, [pc, #40]	; (8001764 <HAL_Init+0x3c>)
 800173a:	2140      	movs	r1, #64	; 0x40
 800173c:	430a      	orrs	r2, r1
 800173e:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001740:	2000      	movs	r0, #0
 8001742:	f000 f811 	bl	8001768 <HAL_InitTick>
 8001746:	1e03      	subs	r3, r0, #0
 8001748:	d003      	beq.n	8001752 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 800174a:	1dfb      	adds	r3, r7, #7
 800174c:	2201      	movs	r2, #1
 800174e:	701a      	strb	r2, [r3, #0]
 8001750:	e001      	b.n	8001756 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001752:	f7ff fca3 	bl	800109c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001756:	1dfb      	adds	r3, r7, #7
 8001758:	781b      	ldrb	r3, [r3, #0]
}
 800175a:	0018      	movs	r0, r3
 800175c:	46bd      	mov	sp, r7
 800175e:	b002      	add	sp, #8
 8001760:	bd80      	pop	{r7, pc}
 8001762:	46c0      	nop			; (mov r8, r8)
 8001764:	40022000 	.word	0x40022000

08001768 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b084      	sub	sp, #16
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001770:	230f      	movs	r3, #15
 8001772:	18fb      	adds	r3, r7, r3
 8001774:	2200      	movs	r2, #0
 8001776:	701a      	strb	r2, [r3, #0]

  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock/1000UL) != 0U)
 8001778:	4b0f      	ldr	r3, [pc, #60]	; (80017b8 <HAL_InitTick+0x50>)
 800177a:	681a      	ldr	r2, [r3, #0]
 800177c:	23fa      	movs	r3, #250	; 0xfa
 800177e:	0099      	lsls	r1, r3, #2
 8001780:	0010      	movs	r0, r2
 8001782:	f7fe fcc1 	bl	8000108 <__udivsi3>
 8001786:	0003      	movs	r3, r0
 8001788:	0018      	movs	r0, r3
 800178a:	f000 f918 	bl	80019be <HAL_SYSTICK_Config>
 800178e:	1e03      	subs	r3, r0, #0
 8001790:	d004      	beq.n	800179c <HAL_InitTick+0x34>
  {
    status = HAL_ERROR;
 8001792:	230f      	movs	r3, #15
 8001794:	18fb      	adds	r3, r7, r3
 8001796:	2201      	movs	r2, #1
 8001798:	701a      	strb	r2, [r3, #0]
 800179a:	e006      	b.n	80017aa <HAL_InitTick+0x42>
  }
  else
  {
    /*Configure the SysTick IRQ priority */
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0);
 800179c:	6879      	ldr	r1, [r7, #4]
 800179e:	2301      	movs	r3, #1
 80017a0:	425b      	negs	r3, r3
 80017a2:	2200      	movs	r2, #0
 80017a4:	0018      	movs	r0, r3
 80017a6:	f000 f8e5 	bl	8001974 <HAL_NVIC_SetPriority>
  }

  /* Return function status */
  return status;
 80017aa:	230f      	movs	r3, #15
 80017ac:	18fb      	adds	r3, r7, r3
 80017ae:	781b      	ldrb	r3, [r3, #0]
}
 80017b0:	0018      	movs	r0, r3
 80017b2:	46bd      	mov	sp, r7
 80017b4:	b004      	add	sp, #16
 80017b6:	bd80      	pop	{r7, pc}
 80017b8:	20000004 	.word	0x20000004

080017bc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	af00      	add	r7, sp, #0
  uwTick++;
 80017c0:	4b03      	ldr	r3, [pc, #12]	; (80017d0 <HAL_IncTick+0x14>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	1c5a      	adds	r2, r3, #1
 80017c6:	4b02      	ldr	r3, [pc, #8]	; (80017d0 <HAL_IncTick+0x14>)
 80017c8:	601a      	str	r2, [r3, #0]
}
 80017ca:	46c0      	nop			; (mov r8, r8)
 80017cc:	46bd      	mov	sp, r7
 80017ce:	bd80      	pop	{r7, pc}
 80017d0:	20000560 	.word	0x20000560

080017d4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	af00      	add	r7, sp, #0
  return uwTick;
 80017d8:	4b02      	ldr	r3, [pc, #8]	; (80017e4 <HAL_GetTick+0x10>)
 80017da:	681b      	ldr	r3, [r3, #0]
}
 80017dc:	0018      	movs	r0, r3
 80017de:	46bd      	mov	sp, r7
 80017e0:	bd80      	pop	{r7, pc}
 80017e2:	46c0      	nop			; (mov r8, r8)
 80017e4:	20000560 	.word	0x20000560

080017e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b084      	sub	sp, #16
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80017f0:	f7ff fff0 	bl	80017d4 <HAL_GetTick>
 80017f4:	0003      	movs	r3, r0
 80017f6:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	3301      	adds	r3, #1
 8001800:	d002      	beq.n	8001808 <HAL_Delay+0x20>
  {
    wait++;
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	3301      	adds	r3, #1
 8001806:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001808:	46c0      	nop			; (mov r8, r8)
 800180a:	f7ff ffe3 	bl	80017d4 <HAL_GetTick>
 800180e:	0002      	movs	r2, r0
 8001810:	68bb      	ldr	r3, [r7, #8]
 8001812:	1ad3      	subs	r3, r2, r3
 8001814:	68fa      	ldr	r2, [r7, #12]
 8001816:	429a      	cmp	r2, r3
 8001818:	d8f7      	bhi.n	800180a <HAL_Delay+0x22>
  {
  }
}
 800181a:	46c0      	nop			; (mov r8, r8)
 800181c:	46bd      	mov	sp, r7
 800181e:	b004      	add	sp, #16
 8001820:	bd80      	pop	{r7, pc}
	...

08001824 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b082      	sub	sp, #8
 8001828:	af00      	add	r7, sp, #0
 800182a:	0002      	movs	r2, r0
 800182c:	1dfb      	adds	r3, r7, #7
 800182e:	701a      	strb	r2, [r3, #0]
  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8001830:	1dfb      	adds	r3, r7, #7
 8001832:	781b      	ldrb	r3, [r3, #0]
 8001834:	001a      	movs	r2, r3
 8001836:	231f      	movs	r3, #31
 8001838:	401a      	ands	r2, r3
 800183a:	4b04      	ldr	r3, [pc, #16]	; (800184c <NVIC_EnableIRQ+0x28>)
 800183c:	2101      	movs	r1, #1
 800183e:	4091      	lsls	r1, r2
 8001840:	000a      	movs	r2, r1
 8001842:	601a      	str	r2, [r3, #0]
}
 8001844:	46c0      	nop			; (mov r8, r8)
 8001846:	46bd      	mov	sp, r7
 8001848:	b002      	add	sp, #8
 800184a:	bd80      	pop	{r7, pc}
 800184c:	e000e100 	.word	0xe000e100

08001850 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001850:	b590      	push	{r4, r7, lr}
 8001852:	b083      	sub	sp, #12
 8001854:	af00      	add	r7, sp, #0
 8001856:	0002      	movs	r2, r0
 8001858:	6039      	str	r1, [r7, #0]
 800185a:	1dfb      	adds	r3, r7, #7
 800185c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) < 0)
 800185e:	1dfb      	adds	r3, r7, #7
 8001860:	781b      	ldrb	r3, [r3, #0]
 8001862:	2b7f      	cmp	r3, #127	; 0x7f
 8001864:	d932      	bls.n	80018cc <NVIC_SetPriority+0x7c>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001866:	4a2f      	ldr	r2, [pc, #188]	; (8001924 <NVIC_SetPriority+0xd4>)
 8001868:	1dfb      	adds	r3, r7, #7
 800186a:	781b      	ldrb	r3, [r3, #0]
 800186c:	0019      	movs	r1, r3
 800186e:	230f      	movs	r3, #15
 8001870:	400b      	ands	r3, r1
 8001872:	3b08      	subs	r3, #8
 8001874:	089b      	lsrs	r3, r3, #2
 8001876:	3306      	adds	r3, #6
 8001878:	009b      	lsls	r3, r3, #2
 800187a:	18d3      	adds	r3, r2, r3
 800187c:	3304      	adds	r3, #4
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	1dfa      	adds	r2, r7, #7
 8001882:	7812      	ldrb	r2, [r2, #0]
 8001884:	0011      	movs	r1, r2
 8001886:	2203      	movs	r2, #3
 8001888:	400a      	ands	r2, r1
 800188a:	00d2      	lsls	r2, r2, #3
 800188c:	21ff      	movs	r1, #255	; 0xff
 800188e:	4091      	lsls	r1, r2
 8001890:	000a      	movs	r2, r1
 8001892:	43d2      	mvns	r2, r2
 8001894:	401a      	ands	r2, r3
 8001896:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	019b      	lsls	r3, r3, #6
 800189c:	22ff      	movs	r2, #255	; 0xff
 800189e:	401a      	ands	r2, r3
 80018a0:	1dfb      	adds	r3, r7, #7
 80018a2:	781b      	ldrb	r3, [r3, #0]
 80018a4:	0018      	movs	r0, r3
 80018a6:	2303      	movs	r3, #3
 80018a8:	4003      	ands	r3, r0
 80018aa:	00db      	lsls	r3, r3, #3
 80018ac:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80018ae:	481d      	ldr	r0, [pc, #116]	; (8001924 <NVIC_SetPriority+0xd4>)
 80018b0:	1dfb      	adds	r3, r7, #7
 80018b2:	781b      	ldrb	r3, [r3, #0]
 80018b4:	001c      	movs	r4, r3
 80018b6:	230f      	movs	r3, #15
 80018b8:	4023      	ands	r3, r4
 80018ba:	3b08      	subs	r3, #8
 80018bc:	089b      	lsrs	r3, r3, #2
 80018be:	430a      	orrs	r2, r1
 80018c0:	3306      	adds	r3, #6
 80018c2:	009b      	lsls	r3, r3, #2
 80018c4:	18c3      	adds	r3, r0, r3
 80018c6:	3304      	adds	r3, #4
 80018c8:	601a      	str	r2, [r3, #0]
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80018ca:	e027      	b.n	800191c <NVIC_SetPriority+0xcc>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80018cc:	4a16      	ldr	r2, [pc, #88]	; (8001928 <NVIC_SetPriority+0xd8>)
 80018ce:	1dfb      	adds	r3, r7, #7
 80018d0:	781b      	ldrb	r3, [r3, #0]
 80018d2:	b25b      	sxtb	r3, r3
 80018d4:	089b      	lsrs	r3, r3, #2
 80018d6:	33c0      	adds	r3, #192	; 0xc0
 80018d8:	009b      	lsls	r3, r3, #2
 80018da:	589b      	ldr	r3, [r3, r2]
 80018dc:	1dfa      	adds	r2, r7, #7
 80018de:	7812      	ldrb	r2, [r2, #0]
 80018e0:	0011      	movs	r1, r2
 80018e2:	2203      	movs	r2, #3
 80018e4:	400a      	ands	r2, r1
 80018e6:	00d2      	lsls	r2, r2, #3
 80018e8:	21ff      	movs	r1, #255	; 0xff
 80018ea:	4091      	lsls	r1, r2
 80018ec:	000a      	movs	r2, r1
 80018ee:	43d2      	mvns	r2, r2
 80018f0:	401a      	ands	r2, r3
 80018f2:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80018f4:	683b      	ldr	r3, [r7, #0]
 80018f6:	019b      	lsls	r3, r3, #6
 80018f8:	22ff      	movs	r2, #255	; 0xff
 80018fa:	401a      	ands	r2, r3
 80018fc:	1dfb      	adds	r3, r7, #7
 80018fe:	781b      	ldrb	r3, [r3, #0]
 8001900:	0018      	movs	r0, r3
 8001902:	2303      	movs	r3, #3
 8001904:	4003      	ands	r3, r0
 8001906:	00db      	lsls	r3, r3, #3
 8001908:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800190a:	4807      	ldr	r0, [pc, #28]	; (8001928 <NVIC_SetPriority+0xd8>)
 800190c:	1dfb      	adds	r3, r7, #7
 800190e:	781b      	ldrb	r3, [r3, #0]
 8001910:	b25b      	sxtb	r3, r3
 8001912:	089b      	lsrs	r3, r3, #2
 8001914:	430a      	orrs	r2, r1
 8001916:	33c0      	adds	r3, #192	; 0xc0
 8001918:	009b      	lsls	r3, r3, #2
 800191a:	501a      	str	r2, [r3, r0]
}
 800191c:	46c0      	nop			; (mov r8, r8)
 800191e:	46bd      	mov	sp, r7
 8001920:	b003      	add	sp, #12
 8001922:	bd90      	pop	{r4, r7, pc}
 8001924:	e000ed00 	.word	0xe000ed00
 8001928:	e000e100 	.word	0xe000e100

0800192c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b082      	sub	sp, #8
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	3b01      	subs	r3, #1
 8001938:	4a0c      	ldr	r2, [pc, #48]	; (800196c <SysTick_Config+0x40>)
 800193a:	4293      	cmp	r3, r2
 800193c:	d901      	bls.n	8001942 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800193e:	2301      	movs	r3, #1
 8001940:	e010      	b.n	8001964 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001942:	4b0b      	ldr	r3, [pc, #44]	; (8001970 <SysTick_Config+0x44>)
 8001944:	687a      	ldr	r2, [r7, #4]
 8001946:	3a01      	subs	r2, #1
 8001948:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800194a:	2301      	movs	r3, #1
 800194c:	425b      	negs	r3, r3
 800194e:	2103      	movs	r1, #3
 8001950:	0018      	movs	r0, r3
 8001952:	f7ff ff7d 	bl	8001850 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001956:	4b06      	ldr	r3, [pc, #24]	; (8001970 <SysTick_Config+0x44>)
 8001958:	2200      	movs	r2, #0
 800195a:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800195c:	4b04      	ldr	r3, [pc, #16]	; (8001970 <SysTick_Config+0x44>)
 800195e:	2207      	movs	r2, #7
 8001960:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001962:	2300      	movs	r3, #0
}
 8001964:	0018      	movs	r0, r3
 8001966:	46bd      	mov	sp, r7
 8001968:	b002      	add	sp, #8
 800196a:	bd80      	pop	{r7, pc}
 800196c:	00ffffff 	.word	0x00ffffff
 8001970:	e000e010 	.word	0xe000e010

08001974 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001974:	b580      	push	{r7, lr}
 8001976:	b084      	sub	sp, #16
 8001978:	af00      	add	r7, sp, #0
 800197a:	60b9      	str	r1, [r7, #8]
 800197c:	607a      	str	r2, [r7, #4]
 800197e:	210f      	movs	r1, #15
 8001980:	187b      	adds	r3, r7, r1
 8001982:	1c02      	adds	r2, r0, #0
 8001984:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001986:	68ba      	ldr	r2, [r7, #8]
 8001988:	187b      	adds	r3, r7, r1
 800198a:	781b      	ldrb	r3, [r3, #0]
 800198c:	b25b      	sxtb	r3, r3
 800198e:	0011      	movs	r1, r2
 8001990:	0018      	movs	r0, r3
 8001992:	f7ff ff5d 	bl	8001850 <NVIC_SetPriority>
}
 8001996:	46c0      	nop			; (mov r8, r8)
 8001998:	46bd      	mov	sp, r7
 800199a:	b004      	add	sp, #16
 800199c:	bd80      	pop	{r7, pc}

0800199e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800199e:	b580      	push	{r7, lr}
 80019a0:	b082      	sub	sp, #8
 80019a2:	af00      	add	r7, sp, #0
 80019a4:	0002      	movs	r2, r0
 80019a6:	1dfb      	adds	r3, r7, #7
 80019a8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80019aa:	1dfb      	adds	r3, r7, #7
 80019ac:	781b      	ldrb	r3, [r3, #0]
 80019ae:	b25b      	sxtb	r3, r3
 80019b0:	0018      	movs	r0, r3
 80019b2:	f7ff ff37 	bl	8001824 <NVIC_EnableIRQ>
}
 80019b6:	46c0      	nop			; (mov r8, r8)
 80019b8:	46bd      	mov	sp, r7
 80019ba:	b002      	add	sp, #8
 80019bc:	bd80      	pop	{r7, pc}

080019be <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80019be:	b580      	push	{r7, lr}
 80019c0:	b082      	sub	sp, #8
 80019c2:	af00      	add	r7, sp, #0
 80019c4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	0018      	movs	r0, r3
 80019ca:	f7ff ffaf 	bl	800192c <SysTick_Config>
 80019ce:	0003      	movs	r3, r0
}
 80019d0:	0018      	movs	r0, r3
 80019d2:	46bd      	mov	sp, r7
 80019d4:	b002      	add	sp, #8
 80019d6:	bd80      	pop	{r7, pc}

080019d8 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b084      	sub	sp, #16
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80019e0:	230f      	movs	r3, #15
 80019e2:	18fb      	adds	r3, r7, r3
 80019e4:	2200      	movs	r2, #0
 80019e6:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	2225      	movs	r2, #37	; 0x25
 80019ec:	5c9b      	ldrb	r3, [r3, r2]
 80019ee:	b2db      	uxtb	r3, r3
 80019f0:	2b02      	cmp	r3, #2
 80019f2:	d007      	beq.n	8001a04 <HAL_DMA_Abort_IT+0x2c>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	2204      	movs	r2, #4
 80019f8:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80019fa:	230f      	movs	r3, #15
 80019fc:	18fb      	adds	r3, r7, r3
 80019fe:	2201      	movs	r2, #1
 8001a00:	701a      	strb	r2, [r3, #0]
 8001a02:	e02a      	b.n	8001a5a <HAL_DMA_Abort_IT+0x82>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	681a      	ldr	r2, [r3, #0]
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	210e      	movs	r1, #14
 8001a10:	438a      	bics	r2, r1
 8001a12:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	681a      	ldr	r2, [r3, #0]
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	2101      	movs	r1, #1
 8001a20:	438a      	bics	r2, r1
 8001a22:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a28:	221c      	movs	r2, #28
 8001a2a:	401a      	ands	r2, r3
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a30:	2101      	movs	r1, #1
 8001a32:	4091      	lsls	r1, r2
 8001a34:	000a      	movs	r2, r1
 8001a36:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	2225      	movs	r2, #37	; 0x25
 8001a3c:	2101      	movs	r1, #1
 8001a3e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	2224      	movs	r2, #36	; 0x24
 8001a44:	2100      	movs	r1, #0
 8001a46:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d004      	beq.n	8001a5a <HAL_DMA_Abort_IT+0x82>
    {
      hdma->XferAbortCallback(hdma);
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a54:	687a      	ldr	r2, [r7, #4]
 8001a56:	0010      	movs	r0, r2
 8001a58:	4798      	blx	r3
    }
  }
  return status;
 8001a5a:	230f      	movs	r3, #15
 8001a5c:	18fb      	adds	r3, r7, r3
 8001a5e:	781b      	ldrb	r3, [r3, #0]
}
 8001a60:	0018      	movs	r0, r3
 8001a62:	46bd      	mov	sp, r7
 8001a64:	b004      	add	sp, #16
 8001a66:	bd80      	pop	{r7, pc}

08001a68 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b086      	sub	sp, #24
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
 8001a70:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001a72:	2300      	movs	r3, #0
 8001a74:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001a76:	2300      	movs	r3, #0
 8001a78:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,(GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8001a7e:	e155      	b.n	8001d2c <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	2101      	movs	r1, #1
 8001a86:	697a      	ldr	r2, [r7, #20]
 8001a88:	4091      	lsls	r1, r2
 8001a8a:	000a      	movs	r2, r1
 8001a8c:	4013      	ands	r3, r2
 8001a8e:	60fb      	str	r3, [r7, #12]
    
    if(iocurrent)
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d100      	bne.n	8001a98 <HAL_GPIO_Init+0x30>
 8001a96:	e146      	b.n	8001d26 <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	685b      	ldr	r3, [r3, #4]
 8001a9c:	2b02      	cmp	r3, #2
 8001a9e:	d003      	beq.n	8001aa8 <HAL_GPIO_Init+0x40>
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	685b      	ldr	r3, [r3, #4]
 8001aa4:	2b12      	cmp	r3, #18
 8001aa6:	d123      	bne.n	8001af0 <HAL_GPIO_Init+0x88>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */ 
        temp = GPIOx->AFR[position >> 3U];
 8001aa8:	697b      	ldr	r3, [r7, #20]
 8001aaa:	08da      	lsrs	r2, r3, #3
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	3208      	adds	r2, #8
 8001ab0:	0092      	lsls	r2, r2, #2
 8001ab2:	58d3      	ldr	r3, [r2, r3]
 8001ab4:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U)) ;
 8001ab6:	697b      	ldr	r3, [r7, #20]
 8001ab8:	2207      	movs	r2, #7
 8001aba:	4013      	ands	r3, r2
 8001abc:	009b      	lsls	r3, r3, #2
 8001abe:	220f      	movs	r2, #15
 8001ac0:	409a      	lsls	r2, r3
 8001ac2:	0013      	movs	r3, r2
 8001ac4:	43da      	mvns	r2, r3
 8001ac6:	693b      	ldr	r3, [r7, #16]
 8001ac8:	4013      	ands	r3, r2
 8001aca:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U)) ;
 8001acc:	683b      	ldr	r3, [r7, #0]
 8001ace:	691a      	ldr	r2, [r3, #16]
 8001ad0:	697b      	ldr	r3, [r7, #20]
 8001ad2:	2107      	movs	r1, #7
 8001ad4:	400b      	ands	r3, r1
 8001ad6:	009b      	lsls	r3, r3, #2
 8001ad8:	409a      	lsls	r2, r3
 8001ada:	0013      	movs	r3, r2
 8001adc:	693a      	ldr	r2, [r7, #16]
 8001ade:	4313      	orrs	r3, r2
 8001ae0:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001ae2:	697b      	ldr	r3, [r7, #20]
 8001ae4:	08da      	lsrs	r2, r3, #3
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	3208      	adds	r2, #8
 8001aea:	0092      	lsls	r2, r2, #2
 8001aec:	6939      	ldr	r1, [r7, #16]
 8001aee:	50d1      	str	r1, [r2, r3]
      } 

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	685b      	ldr	r3, [r3, #4]
 8001af4:	2b01      	cmp	r3, #1
 8001af6:	d00b      	beq.n	8001b10 <HAL_GPIO_Init+0xa8>
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	685b      	ldr	r3, [r3, #4]
 8001afc:	2b02      	cmp	r3, #2
 8001afe:	d007      	beq.n	8001b10 <HAL_GPIO_Init+0xa8>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001b04:	2b11      	cmp	r3, #17
 8001b06:	d003      	beq.n	8001b10 <HAL_GPIO_Init+0xa8>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001b08:	683b      	ldr	r3, [r7, #0]
 8001b0a:	685b      	ldr	r3, [r3, #4]
 8001b0c:	2b12      	cmp	r3, #18
 8001b0e:	d130      	bne.n	8001b72 <HAL_GPIO_Init+0x10a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	689b      	ldr	r3, [r3, #8]
 8001b14:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8001b16:	697b      	ldr	r3, [r7, #20]
 8001b18:	005b      	lsls	r3, r3, #1
 8001b1a:	2203      	movs	r2, #3
 8001b1c:	409a      	lsls	r2, r3
 8001b1e:	0013      	movs	r3, r2
 8001b20:	43da      	mvns	r2, r3
 8001b22:	693b      	ldr	r3, [r7, #16]
 8001b24:	4013      	ands	r3, r2
 8001b26:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001b28:	683b      	ldr	r3, [r7, #0]
 8001b2a:	68da      	ldr	r2, [r3, #12]
 8001b2c:	697b      	ldr	r3, [r7, #20]
 8001b2e:	005b      	lsls	r3, r3, #1
 8001b30:	409a      	lsls	r2, r3
 8001b32:	0013      	movs	r3, r2
 8001b34:	693a      	ldr	r2, [r7, #16]
 8001b36:	4313      	orrs	r3, r2
 8001b38:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	693a      	ldr	r2, [r7, #16]
 8001b3e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp= GPIOx->OTYPER;
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	685b      	ldr	r3, [r3, #4]
 8001b44:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b46:	2201      	movs	r2, #1
 8001b48:	697b      	ldr	r3, [r7, #20]
 8001b4a:	409a      	lsls	r2, r3
 8001b4c:	0013      	movs	r3, r2
 8001b4e:	43da      	mvns	r2, r3
 8001b50:	693b      	ldr	r3, [r7, #16]
 8001b52:	4013      	ands	r3, r2
 8001b54:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001b56:	683b      	ldr	r3, [r7, #0]
 8001b58:	685b      	ldr	r3, [r3, #4]
 8001b5a:	091b      	lsrs	r3, r3, #4
 8001b5c:	2201      	movs	r2, #1
 8001b5e:	401a      	ands	r2, r3
 8001b60:	697b      	ldr	r3, [r7, #20]
 8001b62:	409a      	lsls	r2, r3
 8001b64:	0013      	movs	r3, r2
 8001b66:	693a      	ldr	r2, [r7, #16]
 8001b68:	4313      	orrs	r3, r2
 8001b6a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	693a      	ldr	r2, [r7, #16]
 8001b70:	605a      	str	r2, [r3, #4]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001b78:	697b      	ldr	r3, [r7, #20]
 8001b7a:	005b      	lsls	r3, r3, #1
 8001b7c:	2203      	movs	r2, #3
 8001b7e:	409a      	lsls	r2, r3
 8001b80:	0013      	movs	r3, r2
 8001b82:	43da      	mvns	r2, r3
 8001b84:	693b      	ldr	r3, [r7, #16]
 8001b86:	4013      	ands	r3, r2
 8001b88:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001b8a:	683b      	ldr	r3, [r7, #0]
 8001b8c:	685b      	ldr	r3, [r3, #4]
 8001b8e:	2203      	movs	r2, #3
 8001b90:	401a      	ands	r2, r3
 8001b92:	697b      	ldr	r3, [r7, #20]
 8001b94:	005b      	lsls	r3, r3, #1
 8001b96:	409a      	lsls	r2, r3
 8001b98:	0013      	movs	r3, r2
 8001b9a:	693a      	ldr	r2, [r7, #16]
 8001b9c:	4313      	orrs	r3, r2
 8001b9e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	693a      	ldr	r2, [r7, #16]
 8001ba4:	601a      	str	r2, [r3, #0]

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	68db      	ldr	r3, [r3, #12]
 8001baa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001bac:	697b      	ldr	r3, [r7, #20]
 8001bae:	005b      	lsls	r3, r3, #1
 8001bb0:	2203      	movs	r2, #3
 8001bb2:	409a      	lsls	r2, r3
 8001bb4:	0013      	movs	r3, r2
 8001bb6:	43da      	mvns	r2, r3
 8001bb8:	693b      	ldr	r3, [r7, #16]
 8001bba:	4013      	ands	r3, r2
 8001bbc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U)); 
 8001bbe:	683b      	ldr	r3, [r7, #0]
 8001bc0:	689a      	ldr	r2, [r3, #8]
 8001bc2:	697b      	ldr	r3, [r7, #20]
 8001bc4:	005b      	lsls	r3, r3, #1
 8001bc6:	409a      	lsls	r2, r3
 8001bc8:	0013      	movs	r3, r2
 8001bca:	693a      	ldr	r2, [r7, #16]
 8001bcc:	4313      	orrs	r3, r2
 8001bce:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	693a      	ldr	r2, [r7, #16]
 8001bd4:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8001bd6:	683b      	ldr	r3, [r7, #0]
 8001bd8:	685a      	ldr	r2, [r3, #4]
 8001bda:	2380      	movs	r3, #128	; 0x80
 8001bdc:	055b      	lsls	r3, r3, #21
 8001bde:	4013      	ands	r3, r2
 8001be0:	d100      	bne.n	8001be4 <HAL_GPIO_Init+0x17c>
 8001be2:	e0a0      	b.n	8001d26 <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001be4:	4b57      	ldr	r3, [pc, #348]	; (8001d44 <HAL_GPIO_Init+0x2dc>)
 8001be6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001be8:	4b56      	ldr	r3, [pc, #344]	; (8001d44 <HAL_GPIO_Init+0x2dc>)
 8001bea:	2101      	movs	r1, #1
 8001bec:	430a      	orrs	r2, r1
 8001bee:	635a      	str	r2, [r3, #52]	; 0x34
        
        temp = SYSCFG->EXTICR[position >> 2U];
 8001bf0:	4a55      	ldr	r2, [pc, #340]	; (8001d48 <HAL_GPIO_Init+0x2e0>)
 8001bf2:	697b      	ldr	r3, [r7, #20]
 8001bf4:	089b      	lsrs	r3, r3, #2
 8001bf6:	3302      	adds	r3, #2
 8001bf8:	009b      	lsls	r3, r3, #2
 8001bfa:	589b      	ldr	r3, [r3, r2]
 8001bfc:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 8001bfe:	697b      	ldr	r3, [r7, #20]
 8001c00:	2203      	movs	r2, #3
 8001c02:	4013      	ands	r3, r2
 8001c04:	009b      	lsls	r3, r3, #2
 8001c06:	220f      	movs	r2, #15
 8001c08:	409a      	lsls	r2, r3
 8001c0a:	0013      	movs	r3, r2
 8001c0c:	43da      	mvns	r2, r3
 8001c0e:	693b      	ldr	r3, [r7, #16]
 8001c10:	4013      	ands	r3, r2
 8001c12:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8001c14:	687a      	ldr	r2, [r7, #4]
 8001c16:	23a0      	movs	r3, #160	; 0xa0
 8001c18:	05db      	lsls	r3, r3, #23
 8001c1a:	429a      	cmp	r2, r3
 8001c1c:	d01f      	beq.n	8001c5e <HAL_GPIO_Init+0x1f6>
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	4a4a      	ldr	r2, [pc, #296]	; (8001d4c <HAL_GPIO_Init+0x2e4>)
 8001c22:	4293      	cmp	r3, r2
 8001c24:	d019      	beq.n	8001c5a <HAL_GPIO_Init+0x1f2>
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	4a49      	ldr	r2, [pc, #292]	; (8001d50 <HAL_GPIO_Init+0x2e8>)
 8001c2a:	4293      	cmp	r3, r2
 8001c2c:	d013      	beq.n	8001c56 <HAL_GPIO_Init+0x1ee>
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	4a48      	ldr	r2, [pc, #288]	; (8001d54 <HAL_GPIO_Init+0x2ec>)
 8001c32:	4293      	cmp	r3, r2
 8001c34:	d00d      	beq.n	8001c52 <HAL_GPIO_Init+0x1ea>
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	4a47      	ldr	r2, [pc, #284]	; (8001d58 <HAL_GPIO_Init+0x2f0>)
 8001c3a:	4293      	cmp	r3, r2
 8001c3c:	d007      	beq.n	8001c4e <HAL_GPIO_Init+0x1e6>
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	4a46      	ldr	r2, [pc, #280]	; (8001d5c <HAL_GPIO_Init+0x2f4>)
 8001c42:	4293      	cmp	r3, r2
 8001c44:	d101      	bne.n	8001c4a <HAL_GPIO_Init+0x1e2>
 8001c46:	2305      	movs	r3, #5
 8001c48:	e00a      	b.n	8001c60 <HAL_GPIO_Init+0x1f8>
 8001c4a:	2306      	movs	r3, #6
 8001c4c:	e008      	b.n	8001c60 <HAL_GPIO_Init+0x1f8>
 8001c4e:	2304      	movs	r3, #4
 8001c50:	e006      	b.n	8001c60 <HAL_GPIO_Init+0x1f8>
 8001c52:	2303      	movs	r3, #3
 8001c54:	e004      	b.n	8001c60 <HAL_GPIO_Init+0x1f8>
 8001c56:	2302      	movs	r3, #2
 8001c58:	e002      	b.n	8001c60 <HAL_GPIO_Init+0x1f8>
 8001c5a:	2301      	movs	r3, #1
 8001c5c:	e000      	b.n	8001c60 <HAL_GPIO_Init+0x1f8>
 8001c5e:	2300      	movs	r3, #0
 8001c60:	697a      	ldr	r2, [r7, #20]
 8001c62:	2103      	movs	r1, #3
 8001c64:	400a      	ands	r2, r1
 8001c66:	0092      	lsls	r2, r2, #2
 8001c68:	4093      	lsls	r3, r2
 8001c6a:	693a      	ldr	r2, [r7, #16]
 8001c6c:	4313      	orrs	r3, r2
 8001c6e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001c70:	4935      	ldr	r1, [pc, #212]	; (8001d48 <HAL_GPIO_Init+0x2e0>)
 8001c72:	697b      	ldr	r3, [r7, #20]
 8001c74:	089b      	lsrs	r3, r3, #2
 8001c76:	3302      	adds	r3, #2
 8001c78:	009b      	lsls	r3, r3, #2
 8001c7a:	693a      	ldr	r2, [r7, #16]
 8001c7c:	505a      	str	r2, [r3, r1]
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001c7e:	4b38      	ldr	r3, [pc, #224]	; (8001d60 <HAL_GPIO_Init+0x2f8>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	43da      	mvns	r2, r3
 8001c88:	693b      	ldr	r3, [r7, #16]
 8001c8a:	4013      	ands	r3, r2
 8001c8c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001c8e:	683b      	ldr	r3, [r7, #0]
 8001c90:	685a      	ldr	r2, [r3, #4]
 8001c92:	2380      	movs	r3, #128	; 0x80
 8001c94:	025b      	lsls	r3, r3, #9
 8001c96:	4013      	ands	r3, r2
 8001c98:	d003      	beq.n	8001ca2 <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 8001c9a:	693a      	ldr	r2, [r7, #16]
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	4313      	orrs	r3, r2
 8001ca0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001ca2:	4b2f      	ldr	r3, [pc, #188]	; (8001d60 <HAL_GPIO_Init+0x2f8>)
 8001ca4:	693a      	ldr	r2, [r7, #16]
 8001ca6:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8001ca8:	4b2d      	ldr	r3, [pc, #180]	; (8001d60 <HAL_GPIO_Init+0x2f8>)
 8001caa:	685b      	ldr	r3, [r3, #4]
 8001cac:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	43da      	mvns	r2, r3
 8001cb2:	693b      	ldr	r3, [r7, #16]
 8001cb4:	4013      	ands	r3, r2
 8001cb6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	685a      	ldr	r2, [r3, #4]
 8001cbc:	2380      	movs	r3, #128	; 0x80
 8001cbe:	029b      	lsls	r3, r3, #10
 8001cc0:	4013      	ands	r3, r2
 8001cc2:	d003      	beq.n	8001ccc <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8001cc4:	693a      	ldr	r2, [r7, #16]
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	4313      	orrs	r3, r2
 8001cca:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001ccc:	4b24      	ldr	r3, [pc, #144]	; (8001d60 <HAL_GPIO_Init+0x2f8>)
 8001cce:	693a      	ldr	r2, [r7, #16]
 8001cd0:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001cd2:	4b23      	ldr	r3, [pc, #140]	; (8001d60 <HAL_GPIO_Init+0x2f8>)
 8001cd4:	689b      	ldr	r3, [r3, #8]
 8001cd6:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	43da      	mvns	r2, r3
 8001cdc:	693b      	ldr	r3, [r7, #16]
 8001cde:	4013      	ands	r3, r2
 8001ce0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	685a      	ldr	r2, [r3, #4]
 8001ce6:	2380      	movs	r3, #128	; 0x80
 8001ce8:	035b      	lsls	r3, r3, #13
 8001cea:	4013      	ands	r3, r2
 8001cec:	d003      	beq.n	8001cf6 <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 8001cee:	693a      	ldr	r2, [r7, #16]
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	4313      	orrs	r3, r2
 8001cf4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001cf6:	4b1a      	ldr	r3, [pc, #104]	; (8001d60 <HAL_GPIO_Init+0x2f8>)
 8001cf8:	693a      	ldr	r2, [r7, #16]
 8001cfa:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001cfc:	4b18      	ldr	r3, [pc, #96]	; (8001d60 <HAL_GPIO_Init+0x2f8>)
 8001cfe:	68db      	ldr	r3, [r3, #12]
 8001d00:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	43da      	mvns	r2, r3
 8001d06:	693b      	ldr	r3, [r7, #16]
 8001d08:	4013      	ands	r3, r2
 8001d0a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	685a      	ldr	r2, [r3, #4]
 8001d10:	2380      	movs	r3, #128	; 0x80
 8001d12:	039b      	lsls	r3, r3, #14
 8001d14:	4013      	ands	r3, r2
 8001d16:	d003      	beq.n	8001d20 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 8001d18:	693a      	ldr	r2, [r7, #16]
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	4313      	orrs	r3, r2
 8001d1e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001d20:	4b0f      	ldr	r3, [pc, #60]	; (8001d60 <HAL_GPIO_Init+0x2f8>)
 8001d22:	693a      	ldr	r2, [r7, #16]
 8001d24:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 8001d26:	697b      	ldr	r3, [r7, #20]
 8001d28:	3301      	adds	r3, #1
 8001d2a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	681a      	ldr	r2, [r3, #0]
 8001d30:	697b      	ldr	r3, [r7, #20]
 8001d32:	40da      	lsrs	r2, r3
 8001d34:	1e13      	subs	r3, r2, #0
 8001d36:	d000      	beq.n	8001d3a <HAL_GPIO_Init+0x2d2>
 8001d38:	e6a2      	b.n	8001a80 <HAL_GPIO_Init+0x18>
  }
}
 8001d3a:	46c0      	nop			; (mov r8, r8)
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	b006      	add	sp, #24
 8001d40:	bd80      	pop	{r7, pc}
 8001d42:	46c0      	nop			; (mov r8, r8)
 8001d44:	40021000 	.word	0x40021000
 8001d48:	40010000 	.word	0x40010000
 8001d4c:	50000400 	.word	0x50000400
 8001d50:	50000800 	.word	0x50000800
 8001d54:	50000c00 	.word	0x50000c00
 8001d58:	50001000 	.word	0x50001000
 8001d5c:	50001c00 	.word	0x50001c00
 8001d60:	40010400 	.word	0x40010400

08001d64 <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b084      	sub	sp, #16
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
 8001d6c:	000a      	movs	r2, r1
 8001d6e:	1cbb      	adds	r3, r7, #2
 8001d70:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;
  
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,GPIO_Pin));
  
  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	691b      	ldr	r3, [r3, #16]
 8001d76:	1cba      	adds	r2, r7, #2
 8001d78:	8812      	ldrh	r2, [r2, #0]
 8001d7a:	4013      	ands	r3, r2
 8001d7c:	d004      	beq.n	8001d88 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8001d7e:	230f      	movs	r3, #15
 8001d80:	18fb      	adds	r3, r7, r3
 8001d82:	2201      	movs	r2, #1
 8001d84:	701a      	strb	r2, [r3, #0]
 8001d86:	e003      	b.n	8001d90 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001d88:	230f      	movs	r3, #15
 8001d8a:	18fb      	adds	r3, r7, r3
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8001d90:	230f      	movs	r3, #15
 8001d92:	18fb      	adds	r3, r7, r3
 8001d94:	781b      	ldrb	r3, [r3, #0]
}
 8001d96:	0018      	movs	r0, r3
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	b004      	add	sp, #16
 8001d9c:	bd80      	pop	{r7, pc}

08001d9e <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d9e:	b580      	push	{r7, lr}
 8001da0:	b082      	sub	sp, #8
 8001da2:	af00      	add	r7, sp, #0
 8001da4:	6078      	str	r0, [r7, #4]
 8001da6:	0008      	movs	r0, r1
 8001da8:	0011      	movs	r1, r2
 8001daa:	1cbb      	adds	r3, r7, #2
 8001dac:	1c02      	adds	r2, r0, #0
 8001dae:	801a      	strh	r2, [r3, #0]
 8001db0:	1c7b      	adds	r3, r7, #1
 8001db2:	1c0a      	adds	r2, r1, #0
 8001db4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));
  
  if(PinState != GPIO_PIN_RESET)
 8001db6:	1c7b      	adds	r3, r7, #1
 8001db8:	781b      	ldrb	r3, [r3, #0]
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d004      	beq.n	8001dc8 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001dbe:	1cbb      	adds	r3, r7, #2
 8001dc0:	881a      	ldrh	r2, [r3, #0]
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8001dc6:	e003      	b.n	8001dd0 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8001dc8:	1cbb      	adds	r3, r7, #2
 8001dca:	881a      	ldrh	r2, [r3, #0]
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001dd0:	46c0      	nop			; (mov r8, r8)
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	b002      	add	sp, #8
 8001dd6:	bd80      	pop	{r7, pc}

08001dd8 <HAL_GPIO_TogglePin>:
  *                All port bits are not necessarily available on all GPIOs.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b082      	sub	sp, #8
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
 8001de0:	000a      	movs	r2, r1
 8001de2:	1cbb      	adds	r3, r7, #2
 8001de4:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	695a      	ldr	r2, [r3, #20]
 8001dea:	1cbb      	adds	r3, r7, #2
 8001dec:	881b      	ldrh	r3, [r3, #0]
 8001dee:	405a      	eors	r2, r3
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	615a      	str	r2, [r3, #20]
}
 8001df4:	46c0      	nop			; (mov r8, r8)
 8001df6:	46bd      	mov	sp, r7
 8001df8:	b002      	add	sp, #8
 8001dfa:	bd80      	pop	{r7, pc}

08001dfc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected to the EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b082      	sub	sp, #8
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	0002      	movs	r2, r0
 8001e04:	1dbb      	adds	r3, r7, #6
 8001e06:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET) 
 8001e08:	4b09      	ldr	r3, [pc, #36]	; (8001e30 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8001e0a:	695b      	ldr	r3, [r3, #20]
 8001e0c:	1dba      	adds	r2, r7, #6
 8001e0e:	8812      	ldrh	r2, [r2, #0]
 8001e10:	4013      	ands	r3, r2
 8001e12:	d008      	beq.n	8001e26 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001e14:	4b06      	ldr	r3, [pc, #24]	; (8001e30 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8001e16:	1dba      	adds	r2, r7, #6
 8001e18:	8812      	ldrh	r2, [r2, #0]
 8001e1a:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001e1c:	1dbb      	adds	r3, r7, #6
 8001e1e:	881b      	ldrh	r3, [r3, #0]
 8001e20:	0018      	movs	r0, r3
 8001e22:	f000 f807 	bl	8001e34 <HAL_GPIO_EXTI_Callback>
  }
}
 8001e26:	46c0      	nop			; (mov r8, r8)
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	b002      	add	sp, #8
 8001e2c:	bd80      	pop	{r7, pc}
 8001e2e:	46c0      	nop			; (mov r8, r8)
 8001e30:	40010400 	.word	0x40010400

08001e34 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected to the EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b082      	sub	sp, #8
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	0002      	movs	r2, r0
 8001e3c:	1dbb      	adds	r3, r7, #6
 8001e3e:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */ 
}
 8001e40:	46c0      	nop			; (mov r8, r8)
 8001e42:	46bd      	mov	sp, r7
 8001e44:	b002      	add	sp, #8
 8001e46:	bd80      	pop	{r7, pc}

08001e48 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b082      	sub	sp, #8
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d101      	bne.n	8001e5a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001e56:	2301      	movs	r3, #1
 8001e58:	e082      	b.n	8001f60 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	2241      	movs	r2, #65	; 0x41
 8001e5e:	5c9b      	ldrb	r3, [r3, r2]
 8001e60:	b2db      	uxtb	r3, r3
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d107      	bne.n	8001e76 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	2240      	movs	r2, #64	; 0x40
 8001e6a:	2100      	movs	r1, #0
 8001e6c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	0018      	movs	r0, r3
 8001e72:	f7fe fbcf 	bl	8000614 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	2241      	movs	r2, #65	; 0x41
 8001e7a:	2124      	movs	r1, #36	; 0x24
 8001e7c:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	681a      	ldr	r2, [r3, #0]
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	2101      	movs	r1, #1
 8001e8a:	438a      	bics	r2, r1
 8001e8c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	685a      	ldr	r2, [r3, #4]
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	4934      	ldr	r1, [pc, #208]	; (8001f68 <HAL_I2C_Init+0x120>)
 8001e98:	400a      	ands	r2, r1
 8001e9a:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	689a      	ldr	r2, [r3, #8]
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	4931      	ldr	r1, [pc, #196]	; (8001f6c <HAL_I2C_Init+0x124>)
 8001ea8:	400a      	ands	r2, r1
 8001eaa:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	68db      	ldr	r3, [r3, #12]
 8001eb0:	2b01      	cmp	r3, #1
 8001eb2:	d108      	bne.n	8001ec6 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	689a      	ldr	r2, [r3, #8]
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	2180      	movs	r1, #128	; 0x80
 8001ebe:	0209      	lsls	r1, r1, #8
 8001ec0:	430a      	orrs	r2, r1
 8001ec2:	609a      	str	r2, [r3, #8]
 8001ec4:	e007      	b.n	8001ed6 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	689a      	ldr	r2, [r3, #8]
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	2184      	movs	r1, #132	; 0x84
 8001ed0:	0209      	lsls	r1, r1, #8
 8001ed2:	430a      	orrs	r2, r1
 8001ed4:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	68db      	ldr	r3, [r3, #12]
 8001eda:	2b02      	cmp	r3, #2
 8001edc:	d104      	bne.n	8001ee8 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	2280      	movs	r2, #128	; 0x80
 8001ee4:	0112      	lsls	r2, r2, #4
 8001ee6:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	685a      	ldr	r2, [r3, #4]
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	491f      	ldr	r1, [pc, #124]	; (8001f70 <HAL_I2C_Init+0x128>)
 8001ef4:	430a      	orrs	r2, r1
 8001ef6:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	68da      	ldr	r2, [r3, #12]
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	491a      	ldr	r1, [pc, #104]	; (8001f6c <HAL_I2C_Init+0x124>)
 8001f04:	400a      	ands	r2, r1
 8001f06:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	691a      	ldr	r2, [r3, #16]
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	695b      	ldr	r3, [r3, #20]
 8001f10:	431a      	orrs	r2, r3
 8001f12:	0011      	movs	r1, r2
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	699b      	ldr	r3, [r3, #24]
 8001f18:	021a      	lsls	r2, r3, #8
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	430a      	orrs	r2, r1
 8001f20:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	69d9      	ldr	r1, [r3, #28]
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	6a1a      	ldr	r2, [r3, #32]
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	430a      	orrs	r2, r1
 8001f30:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	681a      	ldr	r2, [r3, #0]
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	2101      	movs	r1, #1
 8001f3e:	430a      	orrs	r2, r1
 8001f40:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	2200      	movs	r2, #0
 8001f46:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	2241      	movs	r2, #65	; 0x41
 8001f4c:	2120      	movs	r1, #32
 8001f4e:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	2200      	movs	r2, #0
 8001f54:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	2242      	movs	r2, #66	; 0x42
 8001f5a:	2100      	movs	r1, #0
 8001f5c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001f5e:	2300      	movs	r3, #0
}
 8001f60:	0018      	movs	r0, r3
 8001f62:	46bd      	mov	sp, r7
 8001f64:	b002      	add	sp, #8
 8001f66:	bd80      	pop	{r7, pc}
 8001f68:	f0ffffff 	.word	0xf0ffffff
 8001f6c:	ffff7fff 	.word	0xffff7fff
 8001f70:	02008000 	.word	0x02008000

08001f74 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b082      	sub	sp, #8
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
 8001f7c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	2241      	movs	r2, #65	; 0x41
 8001f82:	5c9b      	ldrb	r3, [r3, r2]
 8001f84:	b2db      	uxtb	r3, r3
 8001f86:	2b20      	cmp	r3, #32
 8001f88:	d138      	bne.n	8001ffc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	2240      	movs	r2, #64	; 0x40
 8001f8e:	5c9b      	ldrb	r3, [r3, r2]
 8001f90:	2b01      	cmp	r3, #1
 8001f92:	d101      	bne.n	8001f98 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001f94:	2302      	movs	r3, #2
 8001f96:	e032      	b.n	8001ffe <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	2240      	movs	r2, #64	; 0x40
 8001f9c:	2101      	movs	r1, #1
 8001f9e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	2241      	movs	r2, #65	; 0x41
 8001fa4:	2124      	movs	r1, #36	; 0x24
 8001fa6:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	681a      	ldr	r2, [r3, #0]
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	2101      	movs	r1, #1
 8001fb4:	438a      	bics	r2, r1
 8001fb6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	681a      	ldr	r2, [r3, #0]
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	4911      	ldr	r1, [pc, #68]	; (8002008 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8001fc4:	400a      	ands	r2, r1
 8001fc6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	6819      	ldr	r1, [r3, #0]
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	683a      	ldr	r2, [r7, #0]
 8001fd4:	430a      	orrs	r2, r1
 8001fd6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	681a      	ldr	r2, [r3, #0]
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	2101      	movs	r1, #1
 8001fe4:	430a      	orrs	r2, r1
 8001fe6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	2241      	movs	r2, #65	; 0x41
 8001fec:	2120      	movs	r1, #32
 8001fee:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	2240      	movs	r2, #64	; 0x40
 8001ff4:	2100      	movs	r1, #0
 8001ff6:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	e000      	b.n	8001ffe <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001ffc:	2302      	movs	r3, #2
  }
}
 8001ffe:	0018      	movs	r0, r3
 8002000:	46bd      	mov	sp, r7
 8002002:	b002      	add	sp, #8
 8002004:	bd80      	pop	{r7, pc}
 8002006:	46c0      	nop			; (mov r8, r8)
 8002008:	ffffefff 	.word	0xffffefff

0800200c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b084      	sub	sp, #16
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
 8002014:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	2241      	movs	r2, #65	; 0x41
 800201a:	5c9b      	ldrb	r3, [r3, r2]
 800201c:	b2db      	uxtb	r3, r3
 800201e:	2b20      	cmp	r3, #32
 8002020:	d139      	bne.n	8002096 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	2240      	movs	r2, #64	; 0x40
 8002026:	5c9b      	ldrb	r3, [r3, r2]
 8002028:	2b01      	cmp	r3, #1
 800202a:	d101      	bne.n	8002030 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800202c:	2302      	movs	r3, #2
 800202e:	e033      	b.n	8002098 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	2240      	movs	r2, #64	; 0x40
 8002034:	2101      	movs	r1, #1
 8002036:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	2241      	movs	r2, #65	; 0x41
 800203c:	2124      	movs	r1, #36	; 0x24
 800203e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	681a      	ldr	r2, [r3, #0]
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	2101      	movs	r1, #1
 800204c:	438a      	bics	r2, r1
 800204e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	4a11      	ldr	r2, [pc, #68]	; (80020a0 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 800205c:	4013      	ands	r3, r2
 800205e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	021b      	lsls	r3, r3, #8
 8002064:	68fa      	ldr	r2, [r7, #12]
 8002066:	4313      	orrs	r3, r2
 8002068:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	68fa      	ldr	r2, [r7, #12]
 8002070:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	681a      	ldr	r2, [r3, #0]
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	2101      	movs	r1, #1
 800207e:	430a      	orrs	r2, r1
 8002080:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	2241      	movs	r2, #65	; 0x41
 8002086:	2120      	movs	r1, #32
 8002088:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	2240      	movs	r2, #64	; 0x40
 800208e:	2100      	movs	r1, #0
 8002090:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002092:	2300      	movs	r3, #0
 8002094:	e000      	b.n	8002098 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002096:	2302      	movs	r3, #2
  }
}
 8002098:	0018      	movs	r0, r3
 800209a:	46bd      	mov	sp, r7
 800209c:	b004      	add	sp, #16
 800209e:	bd80      	pop	{r7, pc}
 80020a0:	fffff0ff 	.word	0xfffff0ff

080020a4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80020a4:	b5b0      	push	{r4, r5, r7, lr}
 80020a6:	b08a      	sub	sp, #40	; 0x28
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d102      	bne.n	80020b8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80020b2:	2301      	movs	r3, #1
 80020b4:	f000 fbbc 	bl	8002830 <HAL_RCC_OscConfig+0x78c>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80020b8:	4bc8      	ldr	r3, [pc, #800]	; (80023dc <HAL_RCC_OscConfig+0x338>)
 80020ba:	68db      	ldr	r3, [r3, #12]
 80020bc:	220c      	movs	r2, #12
 80020be:	4013      	ands	r3, r2
 80020c0:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80020c2:	4bc6      	ldr	r3, [pc, #792]	; (80023dc <HAL_RCC_OscConfig+0x338>)
 80020c4:	68da      	ldr	r2, [r3, #12]
 80020c6:	2380      	movs	r3, #128	; 0x80
 80020c8:	025b      	lsls	r3, r3, #9
 80020ca:	4013      	ands	r3, r2
 80020cc:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	2201      	movs	r2, #1
 80020d4:	4013      	ands	r3, r2
 80020d6:	d100      	bne.n	80020da <HAL_RCC_OscConfig+0x36>
 80020d8:	e07e      	b.n	80021d8 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80020da:	69fb      	ldr	r3, [r7, #28]
 80020dc:	2b08      	cmp	r3, #8
 80020de:	d007      	beq.n	80020f0 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80020e0:	69fb      	ldr	r3, [r7, #28]
 80020e2:	2b0c      	cmp	r3, #12
 80020e4:	d112      	bne.n	800210c <HAL_RCC_OscConfig+0x68>
 80020e6:	69ba      	ldr	r2, [r7, #24]
 80020e8:	2380      	movs	r3, #128	; 0x80
 80020ea:	025b      	lsls	r3, r3, #9
 80020ec:	429a      	cmp	r2, r3
 80020ee:	d10d      	bne.n	800210c <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020f0:	4bba      	ldr	r3, [pc, #744]	; (80023dc <HAL_RCC_OscConfig+0x338>)
 80020f2:	681a      	ldr	r2, [r3, #0]
 80020f4:	2380      	movs	r3, #128	; 0x80
 80020f6:	029b      	lsls	r3, r3, #10
 80020f8:	4013      	ands	r3, r2
 80020fa:	d100      	bne.n	80020fe <HAL_RCC_OscConfig+0x5a>
 80020fc:	e06b      	b.n	80021d6 <HAL_RCC_OscConfig+0x132>
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	685b      	ldr	r3, [r3, #4]
 8002102:	2b00      	cmp	r3, #0
 8002104:	d167      	bne.n	80021d6 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8002106:	2301      	movs	r3, #1
 8002108:	f000 fb92 	bl	8002830 <HAL_RCC_OscConfig+0x78c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	685a      	ldr	r2, [r3, #4]
 8002110:	2380      	movs	r3, #128	; 0x80
 8002112:	025b      	lsls	r3, r3, #9
 8002114:	429a      	cmp	r2, r3
 8002116:	d107      	bne.n	8002128 <HAL_RCC_OscConfig+0x84>
 8002118:	4bb0      	ldr	r3, [pc, #704]	; (80023dc <HAL_RCC_OscConfig+0x338>)
 800211a:	681a      	ldr	r2, [r3, #0]
 800211c:	4baf      	ldr	r3, [pc, #700]	; (80023dc <HAL_RCC_OscConfig+0x338>)
 800211e:	2180      	movs	r1, #128	; 0x80
 8002120:	0249      	lsls	r1, r1, #9
 8002122:	430a      	orrs	r2, r1
 8002124:	601a      	str	r2, [r3, #0]
 8002126:	e027      	b.n	8002178 <HAL_RCC_OscConfig+0xd4>
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	685a      	ldr	r2, [r3, #4]
 800212c:	23a0      	movs	r3, #160	; 0xa0
 800212e:	02db      	lsls	r3, r3, #11
 8002130:	429a      	cmp	r2, r3
 8002132:	d10e      	bne.n	8002152 <HAL_RCC_OscConfig+0xae>
 8002134:	4ba9      	ldr	r3, [pc, #676]	; (80023dc <HAL_RCC_OscConfig+0x338>)
 8002136:	681a      	ldr	r2, [r3, #0]
 8002138:	4ba8      	ldr	r3, [pc, #672]	; (80023dc <HAL_RCC_OscConfig+0x338>)
 800213a:	2180      	movs	r1, #128	; 0x80
 800213c:	02c9      	lsls	r1, r1, #11
 800213e:	430a      	orrs	r2, r1
 8002140:	601a      	str	r2, [r3, #0]
 8002142:	4ba6      	ldr	r3, [pc, #664]	; (80023dc <HAL_RCC_OscConfig+0x338>)
 8002144:	681a      	ldr	r2, [r3, #0]
 8002146:	4ba5      	ldr	r3, [pc, #660]	; (80023dc <HAL_RCC_OscConfig+0x338>)
 8002148:	2180      	movs	r1, #128	; 0x80
 800214a:	0249      	lsls	r1, r1, #9
 800214c:	430a      	orrs	r2, r1
 800214e:	601a      	str	r2, [r3, #0]
 8002150:	e012      	b.n	8002178 <HAL_RCC_OscConfig+0xd4>
 8002152:	4ba2      	ldr	r3, [pc, #648]	; (80023dc <HAL_RCC_OscConfig+0x338>)
 8002154:	681a      	ldr	r2, [r3, #0]
 8002156:	4ba1      	ldr	r3, [pc, #644]	; (80023dc <HAL_RCC_OscConfig+0x338>)
 8002158:	49a1      	ldr	r1, [pc, #644]	; (80023e0 <HAL_RCC_OscConfig+0x33c>)
 800215a:	400a      	ands	r2, r1
 800215c:	601a      	str	r2, [r3, #0]
 800215e:	4b9f      	ldr	r3, [pc, #636]	; (80023dc <HAL_RCC_OscConfig+0x338>)
 8002160:	681a      	ldr	r2, [r3, #0]
 8002162:	2380      	movs	r3, #128	; 0x80
 8002164:	025b      	lsls	r3, r3, #9
 8002166:	4013      	ands	r3, r2
 8002168:	60fb      	str	r3, [r7, #12]
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	4b9b      	ldr	r3, [pc, #620]	; (80023dc <HAL_RCC_OscConfig+0x338>)
 800216e:	681a      	ldr	r2, [r3, #0]
 8002170:	4b9a      	ldr	r3, [pc, #616]	; (80023dc <HAL_RCC_OscConfig+0x338>)
 8002172:	499c      	ldr	r1, [pc, #624]	; (80023e4 <HAL_RCC_OscConfig+0x340>)
 8002174:	400a      	ands	r2, r1
 8002176:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	685b      	ldr	r3, [r3, #4]
 800217c:	2b00      	cmp	r3, #0
 800217e:	d015      	beq.n	80021ac <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002180:	f7ff fb28 	bl	80017d4 <HAL_GetTick>
 8002184:	0003      	movs	r3, r0
 8002186:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002188:	e009      	b.n	800219e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800218a:	f7ff fb23 	bl	80017d4 <HAL_GetTick>
 800218e:	0002      	movs	r2, r0
 8002190:	697b      	ldr	r3, [r7, #20]
 8002192:	1ad3      	subs	r3, r2, r3
 8002194:	2b64      	cmp	r3, #100	; 0x64
 8002196:	d902      	bls.n	800219e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002198:	2303      	movs	r3, #3
 800219a:	f000 fb49 	bl	8002830 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800219e:	4b8f      	ldr	r3, [pc, #572]	; (80023dc <HAL_RCC_OscConfig+0x338>)
 80021a0:	681a      	ldr	r2, [r3, #0]
 80021a2:	2380      	movs	r3, #128	; 0x80
 80021a4:	029b      	lsls	r3, r3, #10
 80021a6:	4013      	ands	r3, r2
 80021a8:	d0ef      	beq.n	800218a <HAL_RCC_OscConfig+0xe6>
 80021aa:	e015      	b.n	80021d8 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021ac:	f7ff fb12 	bl	80017d4 <HAL_GetTick>
 80021b0:	0003      	movs	r3, r0
 80021b2:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80021b4:	e008      	b.n	80021c8 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80021b6:	f7ff fb0d 	bl	80017d4 <HAL_GetTick>
 80021ba:	0002      	movs	r2, r0
 80021bc:	697b      	ldr	r3, [r7, #20]
 80021be:	1ad3      	subs	r3, r2, r3
 80021c0:	2b64      	cmp	r3, #100	; 0x64
 80021c2:	d901      	bls.n	80021c8 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 80021c4:	2303      	movs	r3, #3
 80021c6:	e333      	b.n	8002830 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80021c8:	4b84      	ldr	r3, [pc, #528]	; (80023dc <HAL_RCC_OscConfig+0x338>)
 80021ca:	681a      	ldr	r2, [r3, #0]
 80021cc:	2380      	movs	r3, #128	; 0x80
 80021ce:	029b      	lsls	r3, r3, #10
 80021d0:	4013      	ands	r3, r2
 80021d2:	d1f0      	bne.n	80021b6 <HAL_RCC_OscConfig+0x112>
 80021d4:	e000      	b.n	80021d8 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021d6:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	2202      	movs	r2, #2
 80021de:	4013      	ands	r3, r2
 80021e0:	d100      	bne.n	80021e4 <HAL_RCC_OscConfig+0x140>
 80021e2:	e098      	b.n	8002316 <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	68db      	ldr	r3, [r3, #12]
 80021e8:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 80021ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ec:	2220      	movs	r2, #32
 80021ee:	4013      	ands	r3, r2
 80021f0:	d009      	beq.n	8002206 <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 80021f2:	4b7a      	ldr	r3, [pc, #488]	; (80023dc <HAL_RCC_OscConfig+0x338>)
 80021f4:	681a      	ldr	r2, [r3, #0]
 80021f6:	4b79      	ldr	r3, [pc, #484]	; (80023dc <HAL_RCC_OscConfig+0x338>)
 80021f8:	2120      	movs	r1, #32
 80021fa:	430a      	orrs	r2, r1
 80021fc:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 80021fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002200:	2220      	movs	r2, #32
 8002202:	4393      	bics	r3, r2
 8002204:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002206:	69fb      	ldr	r3, [r7, #28]
 8002208:	2b04      	cmp	r3, #4
 800220a:	d005      	beq.n	8002218 <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800220c:	69fb      	ldr	r3, [r7, #28]
 800220e:	2b0c      	cmp	r3, #12
 8002210:	d13d      	bne.n	800228e <HAL_RCC_OscConfig+0x1ea>
 8002212:	69bb      	ldr	r3, [r7, #24]
 8002214:	2b00      	cmp	r3, #0
 8002216:	d13a      	bne.n	800228e <HAL_RCC_OscConfig+0x1ea>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8002218:	4b70      	ldr	r3, [pc, #448]	; (80023dc <HAL_RCC_OscConfig+0x338>)
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	2204      	movs	r2, #4
 800221e:	4013      	ands	r3, r2
 8002220:	d004      	beq.n	800222c <HAL_RCC_OscConfig+0x188>
 8002222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002224:	2b00      	cmp	r3, #0
 8002226:	d101      	bne.n	800222c <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8002228:	2301      	movs	r3, #1
 800222a:	e301      	b.n	8002830 <HAL_RCC_OscConfig+0x78c>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800222c:	4b6b      	ldr	r3, [pc, #428]	; (80023dc <HAL_RCC_OscConfig+0x338>)
 800222e:	685b      	ldr	r3, [r3, #4]
 8002230:	4a6d      	ldr	r2, [pc, #436]	; (80023e8 <HAL_RCC_OscConfig+0x344>)
 8002232:	4013      	ands	r3, r2
 8002234:	0019      	movs	r1, r3
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	691b      	ldr	r3, [r3, #16]
 800223a:	021a      	lsls	r2, r3, #8
 800223c:	4b67      	ldr	r3, [pc, #412]	; (80023dc <HAL_RCC_OscConfig+0x338>)
 800223e:	430a      	orrs	r2, r1
 8002240:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8002242:	4b66      	ldr	r3, [pc, #408]	; (80023dc <HAL_RCC_OscConfig+0x338>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	2209      	movs	r2, #9
 8002248:	4393      	bics	r3, r2
 800224a:	0019      	movs	r1, r3
 800224c:	4b63      	ldr	r3, [pc, #396]	; (80023dc <HAL_RCC_OscConfig+0x338>)
 800224e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002250:	430a      	orrs	r2, r1
 8002252:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002254:	f000 fc20 	bl	8002a98 <HAL_RCC_GetSysClockFreq>
 8002258:	0001      	movs	r1, r0
 800225a:	4b60      	ldr	r3, [pc, #384]	; (80023dc <HAL_RCC_OscConfig+0x338>)
 800225c:	68db      	ldr	r3, [r3, #12]
 800225e:	091b      	lsrs	r3, r3, #4
 8002260:	220f      	movs	r2, #15
 8002262:	4013      	ands	r3, r2
 8002264:	4a61      	ldr	r2, [pc, #388]	; (80023ec <HAL_RCC_OscConfig+0x348>)
 8002266:	5cd3      	ldrb	r3, [r2, r3]
 8002268:	000a      	movs	r2, r1
 800226a:	40da      	lsrs	r2, r3
 800226c:	4b60      	ldr	r3, [pc, #384]	; (80023f0 <HAL_RCC_OscConfig+0x34c>)
 800226e:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (TICK_INT_PRIORITY);
 8002270:	2513      	movs	r5, #19
 8002272:	197c      	adds	r4, r7, r5
 8002274:	2000      	movs	r0, #0
 8002276:	f7ff fa77 	bl	8001768 <HAL_InitTick>
 800227a:	0003      	movs	r3, r0
 800227c:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 800227e:	197b      	adds	r3, r7, r5
 8002280:	781b      	ldrb	r3, [r3, #0]
 8002282:	2b00      	cmp	r3, #0
 8002284:	d047      	beq.n	8002316 <HAL_RCC_OscConfig+0x272>
      {
        return status;
 8002286:	2313      	movs	r3, #19
 8002288:	18fb      	adds	r3, r7, r3
 800228a:	781b      	ldrb	r3, [r3, #0]
 800228c:	e2d0      	b.n	8002830 <HAL_RCC_OscConfig+0x78c>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 800228e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002290:	2b00      	cmp	r3, #0
 8002292:	d027      	beq.n	80022e4 <HAL_RCC_OscConfig+0x240>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8002294:	4b51      	ldr	r3, [pc, #324]	; (80023dc <HAL_RCC_OscConfig+0x338>)
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	2209      	movs	r2, #9
 800229a:	4393      	bics	r3, r2
 800229c:	0019      	movs	r1, r3
 800229e:	4b4f      	ldr	r3, [pc, #316]	; (80023dc <HAL_RCC_OscConfig+0x338>)
 80022a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022a2:	430a      	orrs	r2, r1
 80022a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022a6:	f7ff fa95 	bl	80017d4 <HAL_GetTick>
 80022aa:	0003      	movs	r3, r0
 80022ac:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80022ae:	e008      	b.n	80022c2 <HAL_RCC_OscConfig+0x21e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80022b0:	f7ff fa90 	bl	80017d4 <HAL_GetTick>
 80022b4:	0002      	movs	r2, r0
 80022b6:	697b      	ldr	r3, [r7, #20]
 80022b8:	1ad3      	subs	r3, r2, r3
 80022ba:	2b02      	cmp	r3, #2
 80022bc:	d901      	bls.n	80022c2 <HAL_RCC_OscConfig+0x21e>
          {
            return HAL_TIMEOUT;
 80022be:	2303      	movs	r3, #3
 80022c0:	e2b6      	b.n	8002830 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80022c2:	4b46      	ldr	r3, [pc, #280]	; (80023dc <HAL_RCC_OscConfig+0x338>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	2204      	movs	r2, #4
 80022c8:	4013      	ands	r3, r2
 80022ca:	d0f1      	beq.n	80022b0 <HAL_RCC_OscConfig+0x20c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022cc:	4b43      	ldr	r3, [pc, #268]	; (80023dc <HAL_RCC_OscConfig+0x338>)
 80022ce:	685b      	ldr	r3, [r3, #4]
 80022d0:	4a45      	ldr	r2, [pc, #276]	; (80023e8 <HAL_RCC_OscConfig+0x344>)
 80022d2:	4013      	ands	r3, r2
 80022d4:	0019      	movs	r1, r3
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	691b      	ldr	r3, [r3, #16]
 80022da:	021a      	lsls	r2, r3, #8
 80022dc:	4b3f      	ldr	r3, [pc, #252]	; (80023dc <HAL_RCC_OscConfig+0x338>)
 80022de:	430a      	orrs	r2, r1
 80022e0:	605a      	str	r2, [r3, #4]
 80022e2:	e018      	b.n	8002316 <HAL_RCC_OscConfig+0x272>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80022e4:	4b3d      	ldr	r3, [pc, #244]	; (80023dc <HAL_RCC_OscConfig+0x338>)
 80022e6:	681a      	ldr	r2, [r3, #0]
 80022e8:	4b3c      	ldr	r3, [pc, #240]	; (80023dc <HAL_RCC_OscConfig+0x338>)
 80022ea:	2101      	movs	r1, #1
 80022ec:	438a      	bics	r2, r1
 80022ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022f0:	f7ff fa70 	bl	80017d4 <HAL_GetTick>
 80022f4:	0003      	movs	r3, r0
 80022f6:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80022f8:	e008      	b.n	800230c <HAL_RCC_OscConfig+0x268>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80022fa:	f7ff fa6b 	bl	80017d4 <HAL_GetTick>
 80022fe:	0002      	movs	r2, r0
 8002300:	697b      	ldr	r3, [r7, #20]
 8002302:	1ad3      	subs	r3, r2, r3
 8002304:	2b02      	cmp	r3, #2
 8002306:	d901      	bls.n	800230c <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8002308:	2303      	movs	r3, #3
 800230a:	e291      	b.n	8002830 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800230c:	4b33      	ldr	r3, [pc, #204]	; (80023dc <HAL_RCC_OscConfig+0x338>)
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	2204      	movs	r2, #4
 8002312:	4013      	ands	r3, r2
 8002314:	d1f1      	bne.n	80022fa <HAL_RCC_OscConfig+0x256>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	2210      	movs	r2, #16
 800231c:	4013      	ands	r3, r2
 800231e:	d100      	bne.n	8002322 <HAL_RCC_OscConfig+0x27e>
 8002320:	e09f      	b.n	8002462 <HAL_RCC_OscConfig+0x3be>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if((sysclk_source == RCC_CFGR_SWS_MSI) )
 8002322:	69fb      	ldr	r3, [r7, #28]
 8002324:	2b00      	cmp	r3, #0
 8002326:	d13f      	bne.n	80023a8 <HAL_RCC_OscConfig+0x304>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002328:	4b2c      	ldr	r3, [pc, #176]	; (80023dc <HAL_RCC_OscConfig+0x338>)
 800232a:	681a      	ldr	r2, [r3, #0]
 800232c:	2380      	movs	r3, #128	; 0x80
 800232e:	009b      	lsls	r3, r3, #2
 8002330:	4013      	ands	r3, r2
 8002332:	d005      	beq.n	8002340 <HAL_RCC_OscConfig+0x29c>
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	69db      	ldr	r3, [r3, #28]
 8002338:	2b00      	cmp	r3, #0
 800233a:	d101      	bne.n	8002340 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 800233c:	2301      	movs	r3, #1
 800233e:	e277      	b.n	8002830 <HAL_RCC_OscConfig+0x78c>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002340:	4b26      	ldr	r3, [pc, #152]	; (80023dc <HAL_RCC_OscConfig+0x338>)
 8002342:	685b      	ldr	r3, [r3, #4]
 8002344:	4a2b      	ldr	r2, [pc, #172]	; (80023f4 <HAL_RCC_OscConfig+0x350>)
 8002346:	4013      	ands	r3, r2
 8002348:	0019      	movs	r1, r3
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800234e:	4b23      	ldr	r3, [pc, #140]	; (80023dc <HAL_RCC_OscConfig+0x338>)
 8002350:	430a      	orrs	r2, r1
 8002352:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002354:	4b21      	ldr	r3, [pc, #132]	; (80023dc <HAL_RCC_OscConfig+0x338>)
 8002356:	685b      	ldr	r3, [r3, #4]
 8002358:	021b      	lsls	r3, r3, #8
 800235a:	0a19      	lsrs	r1, r3, #8
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	6a1b      	ldr	r3, [r3, #32]
 8002360:	061a      	lsls	r2, r3, #24
 8002362:	4b1e      	ldr	r3, [pc, #120]	; (80023dc <HAL_RCC_OscConfig+0x338>)
 8002364:	430a      	orrs	r2, r1
 8002366:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800236c:	0b5b      	lsrs	r3, r3, #13
 800236e:	3301      	adds	r3, #1
 8002370:	2280      	movs	r2, #128	; 0x80
 8002372:	0212      	lsls	r2, r2, #8
 8002374:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8002376:	4b19      	ldr	r3, [pc, #100]	; (80023dc <HAL_RCC_OscConfig+0x338>)
 8002378:	68db      	ldr	r3, [r3, #12]
 800237a:	091b      	lsrs	r3, r3, #4
 800237c:	210f      	movs	r1, #15
 800237e:	400b      	ands	r3, r1
 8002380:	491a      	ldr	r1, [pc, #104]	; (80023ec <HAL_RCC_OscConfig+0x348>)
 8002382:	5ccb      	ldrb	r3, [r1, r3]
 8002384:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002386:	4b1a      	ldr	r3, [pc, #104]	; (80023f0 <HAL_RCC_OscConfig+0x34c>)
 8002388:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (TICK_INT_PRIORITY);
 800238a:	2513      	movs	r5, #19
 800238c:	197c      	adds	r4, r7, r5
 800238e:	2000      	movs	r0, #0
 8002390:	f7ff f9ea 	bl	8001768 <HAL_InitTick>
 8002394:	0003      	movs	r3, r0
 8002396:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8002398:	197b      	adds	r3, r7, r5
 800239a:	781b      	ldrb	r3, [r3, #0]
 800239c:	2b00      	cmp	r3, #0
 800239e:	d060      	beq.n	8002462 <HAL_RCC_OscConfig+0x3be>
        {
          return status;
 80023a0:	2313      	movs	r3, #19
 80023a2:	18fb      	adds	r3, r7, r3
 80023a4:	781b      	ldrb	r3, [r3, #0]
 80023a6:	e243      	b.n	8002830 <HAL_RCC_OscConfig+0x78c>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	69db      	ldr	r3, [r3, #28]
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d03e      	beq.n	800242e <HAL_RCC_OscConfig+0x38a>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80023b0:	4b0a      	ldr	r3, [pc, #40]	; (80023dc <HAL_RCC_OscConfig+0x338>)
 80023b2:	681a      	ldr	r2, [r3, #0]
 80023b4:	4b09      	ldr	r3, [pc, #36]	; (80023dc <HAL_RCC_OscConfig+0x338>)
 80023b6:	2180      	movs	r1, #128	; 0x80
 80023b8:	0049      	lsls	r1, r1, #1
 80023ba:	430a      	orrs	r2, r1
 80023bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023be:	f7ff fa09 	bl	80017d4 <HAL_GetTick>
 80023c2:	0003      	movs	r3, r0
 80023c4:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80023c6:	e017      	b.n	80023f8 <HAL_RCC_OscConfig+0x354>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80023c8:	f7ff fa04 	bl	80017d4 <HAL_GetTick>
 80023cc:	0002      	movs	r2, r0
 80023ce:	697b      	ldr	r3, [r7, #20]
 80023d0:	1ad3      	subs	r3, r2, r3
 80023d2:	2b02      	cmp	r3, #2
 80023d4:	d910      	bls.n	80023f8 <HAL_RCC_OscConfig+0x354>
          {
            return HAL_TIMEOUT;
 80023d6:	2303      	movs	r3, #3
 80023d8:	e22a      	b.n	8002830 <HAL_RCC_OscConfig+0x78c>
 80023da:	46c0      	nop			; (mov r8, r8)
 80023dc:	40021000 	.word	0x40021000
 80023e0:	fffeffff 	.word	0xfffeffff
 80023e4:	fffbffff 	.word	0xfffbffff
 80023e8:	ffffe0ff 	.word	0xffffe0ff
 80023ec:	08004654 	.word	0x08004654
 80023f0:	20000004 	.word	0x20000004
 80023f4:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80023f8:	4bc6      	ldr	r3, [pc, #792]	; (8002714 <HAL_RCC_OscConfig+0x670>)
 80023fa:	681a      	ldr	r2, [r3, #0]
 80023fc:	2380      	movs	r3, #128	; 0x80
 80023fe:	009b      	lsls	r3, r3, #2
 8002400:	4013      	ands	r3, r2
 8002402:	d0e1      	beq.n	80023c8 <HAL_RCC_OscConfig+0x324>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002404:	4bc3      	ldr	r3, [pc, #780]	; (8002714 <HAL_RCC_OscConfig+0x670>)
 8002406:	685b      	ldr	r3, [r3, #4]
 8002408:	4ac3      	ldr	r2, [pc, #780]	; (8002718 <HAL_RCC_OscConfig+0x674>)
 800240a:	4013      	ands	r3, r2
 800240c:	0019      	movs	r1, r3
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002412:	4bc0      	ldr	r3, [pc, #768]	; (8002714 <HAL_RCC_OscConfig+0x670>)
 8002414:	430a      	orrs	r2, r1
 8002416:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002418:	4bbe      	ldr	r3, [pc, #760]	; (8002714 <HAL_RCC_OscConfig+0x670>)
 800241a:	685b      	ldr	r3, [r3, #4]
 800241c:	021b      	lsls	r3, r3, #8
 800241e:	0a19      	lsrs	r1, r3, #8
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	6a1b      	ldr	r3, [r3, #32]
 8002424:	061a      	lsls	r2, r3, #24
 8002426:	4bbb      	ldr	r3, [pc, #748]	; (8002714 <HAL_RCC_OscConfig+0x670>)
 8002428:	430a      	orrs	r2, r1
 800242a:	605a      	str	r2, [r3, #4]
 800242c:	e019      	b.n	8002462 <HAL_RCC_OscConfig+0x3be>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800242e:	4bb9      	ldr	r3, [pc, #740]	; (8002714 <HAL_RCC_OscConfig+0x670>)
 8002430:	681a      	ldr	r2, [r3, #0]
 8002432:	4bb8      	ldr	r3, [pc, #736]	; (8002714 <HAL_RCC_OscConfig+0x670>)
 8002434:	49b9      	ldr	r1, [pc, #740]	; (800271c <HAL_RCC_OscConfig+0x678>)
 8002436:	400a      	ands	r2, r1
 8002438:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800243a:	f7ff f9cb 	bl	80017d4 <HAL_GetTick>
 800243e:	0003      	movs	r3, r0
 8002440:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002442:	e008      	b.n	8002456 <HAL_RCC_OscConfig+0x3b2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002444:	f7ff f9c6 	bl	80017d4 <HAL_GetTick>
 8002448:	0002      	movs	r2, r0
 800244a:	697b      	ldr	r3, [r7, #20]
 800244c:	1ad3      	subs	r3, r2, r3
 800244e:	2b02      	cmp	r3, #2
 8002450:	d901      	bls.n	8002456 <HAL_RCC_OscConfig+0x3b2>
          {
            return HAL_TIMEOUT;
 8002452:	2303      	movs	r3, #3
 8002454:	e1ec      	b.n	8002830 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002456:	4baf      	ldr	r3, [pc, #700]	; (8002714 <HAL_RCC_OscConfig+0x670>)
 8002458:	681a      	ldr	r2, [r3, #0]
 800245a:	2380      	movs	r3, #128	; 0x80
 800245c:	009b      	lsls	r3, r3, #2
 800245e:	4013      	ands	r3, r2
 8002460:	d1f0      	bne.n	8002444 <HAL_RCC_OscConfig+0x3a0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	2208      	movs	r2, #8
 8002468:	4013      	ands	r3, r2
 800246a:	d036      	beq.n	80024da <HAL_RCC_OscConfig+0x436>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	695b      	ldr	r3, [r3, #20]
 8002470:	2b00      	cmp	r3, #0
 8002472:	d019      	beq.n	80024a8 <HAL_RCC_OscConfig+0x404>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002474:	4ba7      	ldr	r3, [pc, #668]	; (8002714 <HAL_RCC_OscConfig+0x670>)
 8002476:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002478:	4ba6      	ldr	r3, [pc, #664]	; (8002714 <HAL_RCC_OscConfig+0x670>)
 800247a:	2101      	movs	r1, #1
 800247c:	430a      	orrs	r2, r1
 800247e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002480:	f7ff f9a8 	bl	80017d4 <HAL_GetTick>
 8002484:	0003      	movs	r3, r0
 8002486:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002488:	e008      	b.n	800249c <HAL_RCC_OscConfig+0x3f8>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800248a:	f7ff f9a3 	bl	80017d4 <HAL_GetTick>
 800248e:	0002      	movs	r2, r0
 8002490:	697b      	ldr	r3, [r7, #20]
 8002492:	1ad3      	subs	r3, r2, r3
 8002494:	2b02      	cmp	r3, #2
 8002496:	d901      	bls.n	800249c <HAL_RCC_OscConfig+0x3f8>
        {
          return HAL_TIMEOUT;
 8002498:	2303      	movs	r3, #3
 800249a:	e1c9      	b.n	8002830 <HAL_RCC_OscConfig+0x78c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800249c:	4b9d      	ldr	r3, [pc, #628]	; (8002714 <HAL_RCC_OscConfig+0x670>)
 800249e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80024a0:	2202      	movs	r2, #2
 80024a2:	4013      	ands	r3, r2
 80024a4:	d0f1      	beq.n	800248a <HAL_RCC_OscConfig+0x3e6>
 80024a6:	e018      	b.n	80024da <HAL_RCC_OscConfig+0x436>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80024a8:	4b9a      	ldr	r3, [pc, #616]	; (8002714 <HAL_RCC_OscConfig+0x670>)
 80024aa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80024ac:	4b99      	ldr	r3, [pc, #612]	; (8002714 <HAL_RCC_OscConfig+0x670>)
 80024ae:	2101      	movs	r1, #1
 80024b0:	438a      	bics	r2, r1
 80024b2:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024b4:	f7ff f98e 	bl	80017d4 <HAL_GetTick>
 80024b8:	0003      	movs	r3, r0
 80024ba:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80024bc:	e008      	b.n	80024d0 <HAL_RCC_OscConfig+0x42c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80024be:	f7ff f989 	bl	80017d4 <HAL_GetTick>
 80024c2:	0002      	movs	r2, r0
 80024c4:	697b      	ldr	r3, [r7, #20]
 80024c6:	1ad3      	subs	r3, r2, r3
 80024c8:	2b02      	cmp	r3, #2
 80024ca:	d901      	bls.n	80024d0 <HAL_RCC_OscConfig+0x42c>
        {
          return HAL_TIMEOUT;
 80024cc:	2303      	movs	r3, #3
 80024ce:	e1af      	b.n	8002830 <HAL_RCC_OscConfig+0x78c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80024d0:	4b90      	ldr	r3, [pc, #576]	; (8002714 <HAL_RCC_OscConfig+0x670>)
 80024d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80024d4:	2202      	movs	r2, #2
 80024d6:	4013      	ands	r3, r2
 80024d8:	d1f1      	bne.n	80024be <HAL_RCC_OscConfig+0x41a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	2204      	movs	r2, #4
 80024e0:	4013      	ands	r3, r2
 80024e2:	d100      	bne.n	80024e6 <HAL_RCC_OscConfig+0x442>
 80024e4:	e0af      	b.n	8002646 <HAL_RCC_OscConfig+0x5a2>
  {
    FlagStatus       pwrclkchanged = RESET;
 80024e6:	2323      	movs	r3, #35	; 0x23
 80024e8:	18fb      	adds	r3, r7, r3
 80024ea:	2200      	movs	r2, #0
 80024ec:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80024ee:	4b89      	ldr	r3, [pc, #548]	; (8002714 <HAL_RCC_OscConfig+0x670>)
 80024f0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80024f2:	2380      	movs	r3, #128	; 0x80
 80024f4:	055b      	lsls	r3, r3, #21
 80024f6:	4013      	ands	r3, r2
 80024f8:	d10a      	bne.n	8002510 <HAL_RCC_OscConfig+0x46c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80024fa:	4b86      	ldr	r3, [pc, #536]	; (8002714 <HAL_RCC_OscConfig+0x670>)
 80024fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80024fe:	4b85      	ldr	r3, [pc, #532]	; (8002714 <HAL_RCC_OscConfig+0x670>)
 8002500:	2180      	movs	r1, #128	; 0x80
 8002502:	0549      	lsls	r1, r1, #21
 8002504:	430a      	orrs	r2, r1
 8002506:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8002508:	2323      	movs	r3, #35	; 0x23
 800250a:	18fb      	adds	r3, r7, r3
 800250c:	2201      	movs	r2, #1
 800250e:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002510:	4b83      	ldr	r3, [pc, #524]	; (8002720 <HAL_RCC_OscConfig+0x67c>)
 8002512:	681a      	ldr	r2, [r3, #0]
 8002514:	2380      	movs	r3, #128	; 0x80
 8002516:	005b      	lsls	r3, r3, #1
 8002518:	4013      	ands	r3, r2
 800251a:	d11a      	bne.n	8002552 <HAL_RCC_OscConfig+0x4ae>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800251c:	4b80      	ldr	r3, [pc, #512]	; (8002720 <HAL_RCC_OscConfig+0x67c>)
 800251e:	681a      	ldr	r2, [r3, #0]
 8002520:	4b7f      	ldr	r3, [pc, #508]	; (8002720 <HAL_RCC_OscConfig+0x67c>)
 8002522:	2180      	movs	r1, #128	; 0x80
 8002524:	0049      	lsls	r1, r1, #1
 8002526:	430a      	orrs	r2, r1
 8002528:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800252a:	f7ff f953 	bl	80017d4 <HAL_GetTick>
 800252e:	0003      	movs	r3, r0
 8002530:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002532:	e008      	b.n	8002546 <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002534:	f7ff f94e 	bl	80017d4 <HAL_GetTick>
 8002538:	0002      	movs	r2, r0
 800253a:	697b      	ldr	r3, [r7, #20]
 800253c:	1ad3      	subs	r3, r2, r3
 800253e:	2b64      	cmp	r3, #100	; 0x64
 8002540:	d901      	bls.n	8002546 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8002542:	2303      	movs	r3, #3
 8002544:	e174      	b.n	8002830 <HAL_RCC_OscConfig+0x78c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002546:	4b76      	ldr	r3, [pc, #472]	; (8002720 <HAL_RCC_OscConfig+0x67c>)
 8002548:	681a      	ldr	r2, [r3, #0]
 800254a:	2380      	movs	r3, #128	; 0x80
 800254c:	005b      	lsls	r3, r3, #1
 800254e:	4013      	ands	r3, r2
 8002550:	d0f0      	beq.n	8002534 <HAL_RCC_OscConfig+0x490>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	689a      	ldr	r2, [r3, #8]
 8002556:	2380      	movs	r3, #128	; 0x80
 8002558:	005b      	lsls	r3, r3, #1
 800255a:	429a      	cmp	r2, r3
 800255c:	d107      	bne.n	800256e <HAL_RCC_OscConfig+0x4ca>
 800255e:	4b6d      	ldr	r3, [pc, #436]	; (8002714 <HAL_RCC_OscConfig+0x670>)
 8002560:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002562:	4b6c      	ldr	r3, [pc, #432]	; (8002714 <HAL_RCC_OscConfig+0x670>)
 8002564:	2180      	movs	r1, #128	; 0x80
 8002566:	0049      	lsls	r1, r1, #1
 8002568:	430a      	orrs	r2, r1
 800256a:	651a      	str	r2, [r3, #80]	; 0x50
 800256c:	e031      	b.n	80025d2 <HAL_RCC_OscConfig+0x52e>
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	689b      	ldr	r3, [r3, #8]
 8002572:	2b00      	cmp	r3, #0
 8002574:	d10c      	bne.n	8002590 <HAL_RCC_OscConfig+0x4ec>
 8002576:	4b67      	ldr	r3, [pc, #412]	; (8002714 <HAL_RCC_OscConfig+0x670>)
 8002578:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800257a:	4b66      	ldr	r3, [pc, #408]	; (8002714 <HAL_RCC_OscConfig+0x670>)
 800257c:	4967      	ldr	r1, [pc, #412]	; (800271c <HAL_RCC_OscConfig+0x678>)
 800257e:	400a      	ands	r2, r1
 8002580:	651a      	str	r2, [r3, #80]	; 0x50
 8002582:	4b64      	ldr	r3, [pc, #400]	; (8002714 <HAL_RCC_OscConfig+0x670>)
 8002584:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002586:	4b63      	ldr	r3, [pc, #396]	; (8002714 <HAL_RCC_OscConfig+0x670>)
 8002588:	4966      	ldr	r1, [pc, #408]	; (8002724 <HAL_RCC_OscConfig+0x680>)
 800258a:	400a      	ands	r2, r1
 800258c:	651a      	str	r2, [r3, #80]	; 0x50
 800258e:	e020      	b.n	80025d2 <HAL_RCC_OscConfig+0x52e>
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	689a      	ldr	r2, [r3, #8]
 8002594:	23a0      	movs	r3, #160	; 0xa0
 8002596:	00db      	lsls	r3, r3, #3
 8002598:	429a      	cmp	r2, r3
 800259a:	d10e      	bne.n	80025ba <HAL_RCC_OscConfig+0x516>
 800259c:	4b5d      	ldr	r3, [pc, #372]	; (8002714 <HAL_RCC_OscConfig+0x670>)
 800259e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80025a0:	4b5c      	ldr	r3, [pc, #368]	; (8002714 <HAL_RCC_OscConfig+0x670>)
 80025a2:	2180      	movs	r1, #128	; 0x80
 80025a4:	00c9      	lsls	r1, r1, #3
 80025a6:	430a      	orrs	r2, r1
 80025a8:	651a      	str	r2, [r3, #80]	; 0x50
 80025aa:	4b5a      	ldr	r3, [pc, #360]	; (8002714 <HAL_RCC_OscConfig+0x670>)
 80025ac:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80025ae:	4b59      	ldr	r3, [pc, #356]	; (8002714 <HAL_RCC_OscConfig+0x670>)
 80025b0:	2180      	movs	r1, #128	; 0x80
 80025b2:	0049      	lsls	r1, r1, #1
 80025b4:	430a      	orrs	r2, r1
 80025b6:	651a      	str	r2, [r3, #80]	; 0x50
 80025b8:	e00b      	b.n	80025d2 <HAL_RCC_OscConfig+0x52e>
 80025ba:	4b56      	ldr	r3, [pc, #344]	; (8002714 <HAL_RCC_OscConfig+0x670>)
 80025bc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80025be:	4b55      	ldr	r3, [pc, #340]	; (8002714 <HAL_RCC_OscConfig+0x670>)
 80025c0:	4956      	ldr	r1, [pc, #344]	; (800271c <HAL_RCC_OscConfig+0x678>)
 80025c2:	400a      	ands	r2, r1
 80025c4:	651a      	str	r2, [r3, #80]	; 0x50
 80025c6:	4b53      	ldr	r3, [pc, #332]	; (8002714 <HAL_RCC_OscConfig+0x670>)
 80025c8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80025ca:	4b52      	ldr	r3, [pc, #328]	; (8002714 <HAL_RCC_OscConfig+0x670>)
 80025cc:	4955      	ldr	r1, [pc, #340]	; (8002724 <HAL_RCC_OscConfig+0x680>)
 80025ce:	400a      	ands	r2, r1
 80025d0:	651a      	str	r2, [r3, #80]	; 0x50
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	689b      	ldr	r3, [r3, #8]
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d015      	beq.n	8002606 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025da:	f7ff f8fb 	bl	80017d4 <HAL_GetTick>
 80025de:	0003      	movs	r3, r0
 80025e0:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80025e2:	e009      	b.n	80025f8 <HAL_RCC_OscConfig+0x554>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80025e4:	f7ff f8f6 	bl	80017d4 <HAL_GetTick>
 80025e8:	0002      	movs	r2, r0
 80025ea:	697b      	ldr	r3, [r7, #20]
 80025ec:	1ad3      	subs	r3, r2, r3
 80025ee:	4a4e      	ldr	r2, [pc, #312]	; (8002728 <HAL_RCC_OscConfig+0x684>)
 80025f0:	4293      	cmp	r3, r2
 80025f2:	d901      	bls.n	80025f8 <HAL_RCC_OscConfig+0x554>
        {
          return HAL_TIMEOUT;
 80025f4:	2303      	movs	r3, #3
 80025f6:	e11b      	b.n	8002830 <HAL_RCC_OscConfig+0x78c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80025f8:	4b46      	ldr	r3, [pc, #280]	; (8002714 <HAL_RCC_OscConfig+0x670>)
 80025fa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80025fc:	2380      	movs	r3, #128	; 0x80
 80025fe:	009b      	lsls	r3, r3, #2
 8002600:	4013      	ands	r3, r2
 8002602:	d0ef      	beq.n	80025e4 <HAL_RCC_OscConfig+0x540>
 8002604:	e014      	b.n	8002630 <HAL_RCC_OscConfig+0x58c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002606:	f7ff f8e5 	bl	80017d4 <HAL_GetTick>
 800260a:	0003      	movs	r3, r0
 800260c:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800260e:	e009      	b.n	8002624 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002610:	f7ff f8e0 	bl	80017d4 <HAL_GetTick>
 8002614:	0002      	movs	r2, r0
 8002616:	697b      	ldr	r3, [r7, #20]
 8002618:	1ad3      	subs	r3, r2, r3
 800261a:	4a43      	ldr	r2, [pc, #268]	; (8002728 <HAL_RCC_OscConfig+0x684>)
 800261c:	4293      	cmp	r3, r2
 800261e:	d901      	bls.n	8002624 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002620:	2303      	movs	r3, #3
 8002622:	e105      	b.n	8002830 <HAL_RCC_OscConfig+0x78c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002624:	4b3b      	ldr	r3, [pc, #236]	; (8002714 <HAL_RCC_OscConfig+0x670>)
 8002626:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002628:	2380      	movs	r3, #128	; 0x80
 800262a:	009b      	lsls	r3, r3, #2
 800262c:	4013      	ands	r3, r2
 800262e:	d1ef      	bne.n	8002610 <HAL_RCC_OscConfig+0x56c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002630:	2323      	movs	r3, #35	; 0x23
 8002632:	18fb      	adds	r3, r7, r3
 8002634:	781b      	ldrb	r3, [r3, #0]
 8002636:	2b01      	cmp	r3, #1
 8002638:	d105      	bne.n	8002646 <HAL_RCC_OscConfig+0x5a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800263a:	4b36      	ldr	r3, [pc, #216]	; (8002714 <HAL_RCC_OscConfig+0x670>)
 800263c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800263e:	4b35      	ldr	r3, [pc, #212]	; (8002714 <HAL_RCC_OscConfig+0x670>)
 8002640:	493a      	ldr	r1, [pc, #232]	; (800272c <HAL_RCC_OscConfig+0x688>)
 8002642:	400a      	ands	r2, r1
 8002644:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	2220      	movs	r2, #32
 800264c:	4013      	ands	r3, r2
 800264e:	d049      	beq.n	80026e4 <HAL_RCC_OscConfig+0x640>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	699b      	ldr	r3, [r3, #24]
 8002654:	2b00      	cmp	r3, #0
 8002656:	d026      	beq.n	80026a6 <HAL_RCC_OscConfig+0x602>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8002658:	4b2e      	ldr	r3, [pc, #184]	; (8002714 <HAL_RCC_OscConfig+0x670>)
 800265a:	689a      	ldr	r2, [r3, #8]
 800265c:	4b2d      	ldr	r3, [pc, #180]	; (8002714 <HAL_RCC_OscConfig+0x670>)
 800265e:	2101      	movs	r1, #1
 8002660:	430a      	orrs	r2, r1
 8002662:	609a      	str	r2, [r3, #8]
 8002664:	4b2b      	ldr	r3, [pc, #172]	; (8002714 <HAL_RCC_OscConfig+0x670>)
 8002666:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002668:	4b2a      	ldr	r3, [pc, #168]	; (8002714 <HAL_RCC_OscConfig+0x670>)
 800266a:	2101      	movs	r1, #1
 800266c:	430a      	orrs	r2, r1
 800266e:	635a      	str	r2, [r3, #52]	; 0x34
 8002670:	4b2f      	ldr	r3, [pc, #188]	; (8002730 <HAL_RCC_OscConfig+0x68c>)
 8002672:	6a1a      	ldr	r2, [r3, #32]
 8002674:	4b2e      	ldr	r3, [pc, #184]	; (8002730 <HAL_RCC_OscConfig+0x68c>)
 8002676:	2180      	movs	r1, #128	; 0x80
 8002678:	0189      	lsls	r1, r1, #6
 800267a:	430a      	orrs	r2, r1
 800267c:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800267e:	f7ff f8a9 	bl	80017d4 <HAL_GetTick>
 8002682:	0003      	movs	r3, r0
 8002684:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002686:	e008      	b.n	800269a <HAL_RCC_OscConfig+0x5f6>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002688:	f7ff f8a4 	bl	80017d4 <HAL_GetTick>
 800268c:	0002      	movs	r2, r0
 800268e:	697b      	ldr	r3, [r7, #20]
 8002690:	1ad3      	subs	r3, r2, r3
 8002692:	2b02      	cmp	r3, #2
 8002694:	d901      	bls.n	800269a <HAL_RCC_OscConfig+0x5f6>
          {
            return HAL_TIMEOUT;
 8002696:	2303      	movs	r3, #3
 8002698:	e0ca      	b.n	8002830 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800269a:	4b1e      	ldr	r3, [pc, #120]	; (8002714 <HAL_RCC_OscConfig+0x670>)
 800269c:	689b      	ldr	r3, [r3, #8]
 800269e:	2202      	movs	r2, #2
 80026a0:	4013      	ands	r3, r2
 80026a2:	d0f1      	beq.n	8002688 <HAL_RCC_OscConfig+0x5e4>
 80026a4:	e01e      	b.n	80026e4 <HAL_RCC_OscConfig+0x640>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 80026a6:	4b1b      	ldr	r3, [pc, #108]	; (8002714 <HAL_RCC_OscConfig+0x670>)
 80026a8:	689a      	ldr	r2, [r3, #8]
 80026aa:	4b1a      	ldr	r3, [pc, #104]	; (8002714 <HAL_RCC_OscConfig+0x670>)
 80026ac:	2101      	movs	r1, #1
 80026ae:	438a      	bics	r2, r1
 80026b0:	609a      	str	r2, [r3, #8]
 80026b2:	4b1f      	ldr	r3, [pc, #124]	; (8002730 <HAL_RCC_OscConfig+0x68c>)
 80026b4:	6a1a      	ldr	r2, [r3, #32]
 80026b6:	4b1e      	ldr	r3, [pc, #120]	; (8002730 <HAL_RCC_OscConfig+0x68c>)
 80026b8:	491e      	ldr	r1, [pc, #120]	; (8002734 <HAL_RCC_OscConfig+0x690>)
 80026ba:	400a      	ands	r2, r1
 80026bc:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026be:	f7ff f889 	bl	80017d4 <HAL_GetTick>
 80026c2:	0003      	movs	r3, r0
 80026c4:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80026c6:	e008      	b.n	80026da <HAL_RCC_OscConfig+0x636>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80026c8:	f7ff f884 	bl	80017d4 <HAL_GetTick>
 80026cc:	0002      	movs	r2, r0
 80026ce:	697b      	ldr	r3, [r7, #20]
 80026d0:	1ad3      	subs	r3, r2, r3
 80026d2:	2b02      	cmp	r3, #2
 80026d4:	d901      	bls.n	80026da <HAL_RCC_OscConfig+0x636>
          {
            return HAL_TIMEOUT;
 80026d6:	2303      	movs	r3, #3
 80026d8:	e0aa      	b.n	8002830 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80026da:	4b0e      	ldr	r3, [pc, #56]	; (8002714 <HAL_RCC_OscConfig+0x670>)
 80026dc:	689b      	ldr	r3, [r3, #8]
 80026de:	2202      	movs	r2, #2
 80026e0:	4013      	ands	r3, r2
 80026e2:	d1f1      	bne.n	80026c8 <HAL_RCC_OscConfig+0x624>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d100      	bne.n	80026ee <HAL_RCC_OscConfig+0x64a>
 80026ec:	e09f      	b.n	800282e <HAL_RCC_OscConfig+0x78a>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80026ee:	69fb      	ldr	r3, [r7, #28]
 80026f0:	2b0c      	cmp	r3, #12
 80026f2:	d100      	bne.n	80026f6 <HAL_RCC_OscConfig+0x652>
 80026f4:	e078      	b.n	80027e8 <HAL_RCC_OscConfig+0x744>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026fa:	2b02      	cmp	r3, #2
 80026fc:	d159      	bne.n	80027b2 <HAL_RCC_OscConfig+0x70e>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026fe:	4b05      	ldr	r3, [pc, #20]	; (8002714 <HAL_RCC_OscConfig+0x670>)
 8002700:	681a      	ldr	r2, [r3, #0]
 8002702:	4b04      	ldr	r3, [pc, #16]	; (8002714 <HAL_RCC_OscConfig+0x670>)
 8002704:	490c      	ldr	r1, [pc, #48]	; (8002738 <HAL_RCC_OscConfig+0x694>)
 8002706:	400a      	ands	r2, r1
 8002708:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800270a:	f7ff f863 	bl	80017d4 <HAL_GetTick>
 800270e:	0003      	movs	r3, r0
 8002710:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002712:	e01c      	b.n	800274e <HAL_RCC_OscConfig+0x6aa>
 8002714:	40021000 	.word	0x40021000
 8002718:	ffff1fff 	.word	0xffff1fff
 800271c:	fffffeff 	.word	0xfffffeff
 8002720:	40007000 	.word	0x40007000
 8002724:	fffffbff 	.word	0xfffffbff
 8002728:	00001388 	.word	0x00001388
 800272c:	efffffff 	.word	0xefffffff
 8002730:	40010000 	.word	0x40010000
 8002734:	ffffdfff 	.word	0xffffdfff
 8002738:	feffffff 	.word	0xfeffffff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800273c:	f7ff f84a 	bl	80017d4 <HAL_GetTick>
 8002740:	0002      	movs	r2, r0
 8002742:	697b      	ldr	r3, [r7, #20]
 8002744:	1ad3      	subs	r3, r2, r3
 8002746:	2b02      	cmp	r3, #2
 8002748:	d901      	bls.n	800274e <HAL_RCC_OscConfig+0x6aa>
          {
            return HAL_TIMEOUT;
 800274a:	2303      	movs	r3, #3
 800274c:	e070      	b.n	8002830 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800274e:	4b3a      	ldr	r3, [pc, #232]	; (8002838 <HAL_RCC_OscConfig+0x794>)
 8002750:	681a      	ldr	r2, [r3, #0]
 8002752:	2380      	movs	r3, #128	; 0x80
 8002754:	049b      	lsls	r3, r3, #18
 8002756:	4013      	ands	r3, r2
 8002758:	d1f0      	bne.n	800273c <HAL_RCC_OscConfig+0x698>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800275a:	4b37      	ldr	r3, [pc, #220]	; (8002838 <HAL_RCC_OscConfig+0x794>)
 800275c:	68db      	ldr	r3, [r3, #12]
 800275e:	4a37      	ldr	r2, [pc, #220]	; (800283c <HAL_RCC_OscConfig+0x798>)
 8002760:	4013      	ands	r3, r2
 8002762:	0019      	movs	r1, r3
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800276c:	431a      	orrs	r2, r3
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002772:	431a      	orrs	r2, r3
 8002774:	4b30      	ldr	r3, [pc, #192]	; (8002838 <HAL_RCC_OscConfig+0x794>)
 8002776:	430a      	orrs	r2, r1
 8002778:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800277a:	4b2f      	ldr	r3, [pc, #188]	; (8002838 <HAL_RCC_OscConfig+0x794>)
 800277c:	681a      	ldr	r2, [r3, #0]
 800277e:	4b2e      	ldr	r3, [pc, #184]	; (8002838 <HAL_RCC_OscConfig+0x794>)
 8002780:	2180      	movs	r1, #128	; 0x80
 8002782:	0449      	lsls	r1, r1, #17
 8002784:	430a      	orrs	r2, r1
 8002786:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002788:	f7ff f824 	bl	80017d4 <HAL_GetTick>
 800278c:	0003      	movs	r3, r0
 800278e:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8002790:	e008      	b.n	80027a4 <HAL_RCC_OscConfig+0x700>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002792:	f7ff f81f 	bl	80017d4 <HAL_GetTick>
 8002796:	0002      	movs	r2, r0
 8002798:	697b      	ldr	r3, [r7, #20]
 800279a:	1ad3      	subs	r3, r2, r3
 800279c:	2b02      	cmp	r3, #2
 800279e:	d901      	bls.n	80027a4 <HAL_RCC_OscConfig+0x700>
          {
            return HAL_TIMEOUT;
 80027a0:	2303      	movs	r3, #3
 80027a2:	e045      	b.n	8002830 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80027a4:	4b24      	ldr	r3, [pc, #144]	; (8002838 <HAL_RCC_OscConfig+0x794>)
 80027a6:	681a      	ldr	r2, [r3, #0]
 80027a8:	2380      	movs	r3, #128	; 0x80
 80027aa:	049b      	lsls	r3, r3, #18
 80027ac:	4013      	ands	r3, r2
 80027ae:	d0f0      	beq.n	8002792 <HAL_RCC_OscConfig+0x6ee>
 80027b0:	e03d      	b.n	800282e <HAL_RCC_OscConfig+0x78a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027b2:	4b21      	ldr	r3, [pc, #132]	; (8002838 <HAL_RCC_OscConfig+0x794>)
 80027b4:	681a      	ldr	r2, [r3, #0]
 80027b6:	4b20      	ldr	r3, [pc, #128]	; (8002838 <HAL_RCC_OscConfig+0x794>)
 80027b8:	4921      	ldr	r1, [pc, #132]	; (8002840 <HAL_RCC_OscConfig+0x79c>)
 80027ba:	400a      	ands	r2, r1
 80027bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027be:	f7ff f809 	bl	80017d4 <HAL_GetTick>
 80027c2:	0003      	movs	r3, r0
 80027c4:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80027c6:	e008      	b.n	80027da <HAL_RCC_OscConfig+0x736>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80027c8:	f7ff f804 	bl	80017d4 <HAL_GetTick>
 80027cc:	0002      	movs	r2, r0
 80027ce:	697b      	ldr	r3, [r7, #20]
 80027d0:	1ad3      	subs	r3, r2, r3
 80027d2:	2b02      	cmp	r3, #2
 80027d4:	d901      	bls.n	80027da <HAL_RCC_OscConfig+0x736>
          {
            return HAL_TIMEOUT;
 80027d6:	2303      	movs	r3, #3
 80027d8:	e02a      	b.n	8002830 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80027da:	4b17      	ldr	r3, [pc, #92]	; (8002838 <HAL_RCC_OscConfig+0x794>)
 80027dc:	681a      	ldr	r2, [r3, #0]
 80027de:	2380      	movs	r3, #128	; 0x80
 80027e0:	049b      	lsls	r3, r3, #18
 80027e2:	4013      	ands	r3, r2
 80027e4:	d1f0      	bne.n	80027c8 <HAL_RCC_OscConfig+0x724>
 80027e6:	e022      	b.n	800282e <HAL_RCC_OscConfig+0x78a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027ec:	2b01      	cmp	r3, #1
 80027ee:	d101      	bne.n	80027f4 <HAL_RCC_OscConfig+0x750>
      {
        return HAL_ERROR;
 80027f0:	2301      	movs	r3, #1
 80027f2:	e01d      	b.n	8002830 <HAL_RCC_OscConfig+0x78c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80027f4:	4b10      	ldr	r3, [pc, #64]	; (8002838 <HAL_RCC_OscConfig+0x794>)
 80027f6:	68db      	ldr	r3, [r3, #12]
 80027f8:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027fa:	69ba      	ldr	r2, [r7, #24]
 80027fc:	2380      	movs	r3, #128	; 0x80
 80027fe:	025b      	lsls	r3, r3, #9
 8002800:	401a      	ands	r2, r3
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002806:	429a      	cmp	r2, r3
 8002808:	d10f      	bne.n	800282a <HAL_RCC_OscConfig+0x786>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800280a:	69ba      	ldr	r2, [r7, #24]
 800280c:	23f0      	movs	r3, #240	; 0xf0
 800280e:	039b      	lsls	r3, r3, #14
 8002810:	401a      	ands	r2, r3
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002816:	429a      	cmp	r2, r3
 8002818:	d107      	bne.n	800282a <HAL_RCC_OscConfig+0x786>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 800281a:	69ba      	ldr	r2, [r7, #24]
 800281c:	23c0      	movs	r3, #192	; 0xc0
 800281e:	041b      	lsls	r3, r3, #16
 8002820:	401a      	ands	r2, r3
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002826:	429a      	cmp	r2, r3
 8002828:	d001      	beq.n	800282e <HAL_RCC_OscConfig+0x78a>
        {
          return HAL_ERROR;
 800282a:	2301      	movs	r3, #1
 800282c:	e000      	b.n	8002830 <HAL_RCC_OscConfig+0x78c>
        }
      }
    }
  }

  return HAL_OK;
 800282e:	2300      	movs	r3, #0
}
 8002830:	0018      	movs	r0, r3
 8002832:	46bd      	mov	sp, r7
 8002834:	b00a      	add	sp, #40	; 0x28
 8002836:	bdb0      	pop	{r4, r5, r7, pc}
 8002838:	40021000 	.word	0x40021000
 800283c:	ff02ffff 	.word	0xff02ffff
 8002840:	feffffff 	.word	0xfeffffff

08002844 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002844:	b5b0      	push	{r4, r5, r7, lr}
 8002846:	b084      	sub	sp, #16
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
 800284c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	2b00      	cmp	r3, #0
 8002852:	d101      	bne.n	8002858 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002854:	2301      	movs	r3, #1
 8002856:	e10d      	b.n	8002a74 <HAL_RCC_ClockConfig+0x230>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002858:	4b88      	ldr	r3, [pc, #544]	; (8002a7c <HAL_RCC_ClockConfig+0x238>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	2201      	movs	r2, #1
 800285e:	4013      	ands	r3, r2
 8002860:	683a      	ldr	r2, [r7, #0]
 8002862:	429a      	cmp	r2, r3
 8002864:	d911      	bls.n	800288a <HAL_RCC_ClockConfig+0x46>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002866:	4b85      	ldr	r3, [pc, #532]	; (8002a7c <HAL_RCC_ClockConfig+0x238>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	2201      	movs	r2, #1
 800286c:	4393      	bics	r3, r2
 800286e:	0019      	movs	r1, r3
 8002870:	4b82      	ldr	r3, [pc, #520]	; (8002a7c <HAL_RCC_ClockConfig+0x238>)
 8002872:	683a      	ldr	r2, [r7, #0]
 8002874:	430a      	orrs	r2, r1
 8002876:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002878:	4b80      	ldr	r3, [pc, #512]	; (8002a7c <HAL_RCC_ClockConfig+0x238>)
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	2201      	movs	r2, #1
 800287e:	4013      	ands	r3, r2
 8002880:	683a      	ldr	r2, [r7, #0]
 8002882:	429a      	cmp	r2, r3
 8002884:	d001      	beq.n	800288a <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8002886:	2301      	movs	r3, #1
 8002888:	e0f4      	b.n	8002a74 <HAL_RCC_ClockConfig+0x230>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	2202      	movs	r2, #2
 8002890:	4013      	ands	r3, r2
 8002892:	d009      	beq.n	80028a8 <HAL_RCC_ClockConfig+0x64>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002894:	4b7a      	ldr	r3, [pc, #488]	; (8002a80 <HAL_RCC_ClockConfig+0x23c>)
 8002896:	68db      	ldr	r3, [r3, #12]
 8002898:	22f0      	movs	r2, #240	; 0xf0
 800289a:	4393      	bics	r3, r2
 800289c:	0019      	movs	r1, r3
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	689a      	ldr	r2, [r3, #8]
 80028a2:	4b77      	ldr	r3, [pc, #476]	; (8002a80 <HAL_RCC_ClockConfig+0x23c>)
 80028a4:	430a      	orrs	r2, r1
 80028a6:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	2201      	movs	r2, #1
 80028ae:	4013      	ands	r3, r2
 80028b0:	d100      	bne.n	80028b4 <HAL_RCC_ClockConfig+0x70>
 80028b2:	e089      	b.n	80029c8 <HAL_RCC_ClockConfig+0x184>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	685b      	ldr	r3, [r3, #4]
 80028b8:	2b02      	cmp	r3, #2
 80028ba:	d107      	bne.n	80028cc <HAL_RCC_ClockConfig+0x88>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80028bc:	4b70      	ldr	r3, [pc, #448]	; (8002a80 <HAL_RCC_ClockConfig+0x23c>)
 80028be:	681a      	ldr	r2, [r3, #0]
 80028c0:	2380      	movs	r3, #128	; 0x80
 80028c2:	029b      	lsls	r3, r3, #10
 80028c4:	4013      	ands	r3, r2
 80028c6:	d120      	bne.n	800290a <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 80028c8:	2301      	movs	r3, #1
 80028ca:	e0d3      	b.n	8002a74 <HAL_RCC_ClockConfig+0x230>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	685b      	ldr	r3, [r3, #4]
 80028d0:	2b03      	cmp	r3, #3
 80028d2:	d107      	bne.n	80028e4 <HAL_RCC_ClockConfig+0xa0>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80028d4:	4b6a      	ldr	r3, [pc, #424]	; (8002a80 <HAL_RCC_ClockConfig+0x23c>)
 80028d6:	681a      	ldr	r2, [r3, #0]
 80028d8:	2380      	movs	r3, #128	; 0x80
 80028da:	049b      	lsls	r3, r3, #18
 80028dc:	4013      	ands	r3, r2
 80028de:	d114      	bne.n	800290a <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 80028e0:	2301      	movs	r3, #1
 80028e2:	e0c7      	b.n	8002a74 <HAL_RCC_ClockConfig+0x230>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	685b      	ldr	r3, [r3, #4]
 80028e8:	2b01      	cmp	r3, #1
 80028ea:	d106      	bne.n	80028fa <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80028ec:	4b64      	ldr	r3, [pc, #400]	; (8002a80 <HAL_RCC_ClockConfig+0x23c>)
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	2204      	movs	r2, #4
 80028f2:	4013      	ands	r3, r2
 80028f4:	d109      	bne.n	800290a <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 80028f6:	2301      	movs	r3, #1
 80028f8:	e0bc      	b.n	8002a74 <HAL_RCC_ClockConfig+0x230>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80028fa:	4b61      	ldr	r3, [pc, #388]	; (8002a80 <HAL_RCC_ClockConfig+0x23c>)
 80028fc:	681a      	ldr	r2, [r3, #0]
 80028fe:	2380      	movs	r3, #128	; 0x80
 8002900:	009b      	lsls	r3, r3, #2
 8002902:	4013      	ands	r3, r2
 8002904:	d101      	bne.n	800290a <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 8002906:	2301      	movs	r3, #1
 8002908:	e0b4      	b.n	8002a74 <HAL_RCC_ClockConfig+0x230>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800290a:	4b5d      	ldr	r3, [pc, #372]	; (8002a80 <HAL_RCC_ClockConfig+0x23c>)
 800290c:	68db      	ldr	r3, [r3, #12]
 800290e:	2203      	movs	r2, #3
 8002910:	4393      	bics	r3, r2
 8002912:	0019      	movs	r1, r3
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	685a      	ldr	r2, [r3, #4]
 8002918:	4b59      	ldr	r3, [pc, #356]	; (8002a80 <HAL_RCC_ClockConfig+0x23c>)
 800291a:	430a      	orrs	r2, r1
 800291c:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800291e:	f7fe ff59 	bl	80017d4 <HAL_GetTick>
 8002922:	0003      	movs	r3, r0
 8002924:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	685b      	ldr	r3, [r3, #4]
 800292a:	2b02      	cmp	r3, #2
 800292c:	d111      	bne.n	8002952 <HAL_RCC_ClockConfig+0x10e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800292e:	e009      	b.n	8002944 <HAL_RCC_ClockConfig+0x100>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002930:	f7fe ff50 	bl	80017d4 <HAL_GetTick>
 8002934:	0002      	movs	r2, r0
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	1ad3      	subs	r3, r2, r3
 800293a:	4a52      	ldr	r2, [pc, #328]	; (8002a84 <HAL_RCC_ClockConfig+0x240>)
 800293c:	4293      	cmp	r3, r2
 800293e:	d901      	bls.n	8002944 <HAL_RCC_ClockConfig+0x100>
        {
          return HAL_TIMEOUT;
 8002940:	2303      	movs	r3, #3
 8002942:	e097      	b.n	8002a74 <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002944:	4b4e      	ldr	r3, [pc, #312]	; (8002a80 <HAL_RCC_ClockConfig+0x23c>)
 8002946:	68db      	ldr	r3, [r3, #12]
 8002948:	220c      	movs	r2, #12
 800294a:	4013      	ands	r3, r2
 800294c:	2b08      	cmp	r3, #8
 800294e:	d1ef      	bne.n	8002930 <HAL_RCC_ClockConfig+0xec>
 8002950:	e03a      	b.n	80029c8 <HAL_RCC_ClockConfig+0x184>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	685b      	ldr	r3, [r3, #4]
 8002956:	2b03      	cmp	r3, #3
 8002958:	d111      	bne.n	800297e <HAL_RCC_ClockConfig+0x13a>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800295a:	e009      	b.n	8002970 <HAL_RCC_ClockConfig+0x12c>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800295c:	f7fe ff3a 	bl	80017d4 <HAL_GetTick>
 8002960:	0002      	movs	r2, r0
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	1ad3      	subs	r3, r2, r3
 8002966:	4a47      	ldr	r2, [pc, #284]	; (8002a84 <HAL_RCC_ClockConfig+0x240>)
 8002968:	4293      	cmp	r3, r2
 800296a:	d901      	bls.n	8002970 <HAL_RCC_ClockConfig+0x12c>
        {
          return HAL_TIMEOUT;
 800296c:	2303      	movs	r3, #3
 800296e:	e081      	b.n	8002a74 <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002970:	4b43      	ldr	r3, [pc, #268]	; (8002a80 <HAL_RCC_ClockConfig+0x23c>)
 8002972:	68db      	ldr	r3, [r3, #12]
 8002974:	220c      	movs	r2, #12
 8002976:	4013      	ands	r3, r2
 8002978:	2b0c      	cmp	r3, #12
 800297a:	d1ef      	bne.n	800295c <HAL_RCC_ClockConfig+0x118>
 800297c:	e024      	b.n	80029c8 <HAL_RCC_ClockConfig+0x184>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	685b      	ldr	r3, [r3, #4]
 8002982:	2b01      	cmp	r3, #1
 8002984:	d11b      	bne.n	80029be <HAL_RCC_ClockConfig+0x17a>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002986:	e009      	b.n	800299c <HAL_RCC_ClockConfig+0x158>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002988:	f7fe ff24 	bl	80017d4 <HAL_GetTick>
 800298c:	0002      	movs	r2, r0
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	1ad3      	subs	r3, r2, r3
 8002992:	4a3c      	ldr	r2, [pc, #240]	; (8002a84 <HAL_RCC_ClockConfig+0x240>)
 8002994:	4293      	cmp	r3, r2
 8002996:	d901      	bls.n	800299c <HAL_RCC_ClockConfig+0x158>
        {
          return HAL_TIMEOUT;
 8002998:	2303      	movs	r3, #3
 800299a:	e06b      	b.n	8002a74 <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800299c:	4b38      	ldr	r3, [pc, #224]	; (8002a80 <HAL_RCC_ClockConfig+0x23c>)
 800299e:	68db      	ldr	r3, [r3, #12]
 80029a0:	220c      	movs	r2, #12
 80029a2:	4013      	ands	r3, r2
 80029a4:	2b04      	cmp	r3, #4
 80029a6:	d1ef      	bne.n	8002988 <HAL_RCC_ClockConfig+0x144>
 80029a8:	e00e      	b.n	80029c8 <HAL_RCC_ClockConfig+0x184>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029aa:	f7fe ff13 	bl	80017d4 <HAL_GetTick>
 80029ae:	0002      	movs	r2, r0
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	1ad3      	subs	r3, r2, r3
 80029b4:	4a33      	ldr	r2, [pc, #204]	; (8002a84 <HAL_RCC_ClockConfig+0x240>)
 80029b6:	4293      	cmp	r3, r2
 80029b8:	d901      	bls.n	80029be <HAL_RCC_ClockConfig+0x17a>
        {
          return HAL_TIMEOUT;
 80029ba:	2303      	movs	r3, #3
 80029bc:	e05a      	b.n	8002a74 <HAL_RCC_ClockConfig+0x230>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80029be:	4b30      	ldr	r3, [pc, #192]	; (8002a80 <HAL_RCC_ClockConfig+0x23c>)
 80029c0:	68db      	ldr	r3, [r3, #12]
 80029c2:	220c      	movs	r2, #12
 80029c4:	4013      	ands	r3, r2
 80029c6:	d1f0      	bne.n	80029aa <HAL_RCC_ClockConfig+0x166>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80029c8:	4b2c      	ldr	r3, [pc, #176]	; (8002a7c <HAL_RCC_ClockConfig+0x238>)
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	2201      	movs	r2, #1
 80029ce:	4013      	ands	r3, r2
 80029d0:	683a      	ldr	r2, [r7, #0]
 80029d2:	429a      	cmp	r2, r3
 80029d4:	d211      	bcs.n	80029fa <HAL_RCC_ClockConfig+0x1b6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029d6:	4b29      	ldr	r3, [pc, #164]	; (8002a7c <HAL_RCC_ClockConfig+0x238>)
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	2201      	movs	r2, #1
 80029dc:	4393      	bics	r3, r2
 80029de:	0019      	movs	r1, r3
 80029e0:	4b26      	ldr	r3, [pc, #152]	; (8002a7c <HAL_RCC_ClockConfig+0x238>)
 80029e2:	683a      	ldr	r2, [r7, #0]
 80029e4:	430a      	orrs	r2, r1
 80029e6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80029e8:	4b24      	ldr	r3, [pc, #144]	; (8002a7c <HAL_RCC_ClockConfig+0x238>)
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	2201      	movs	r2, #1
 80029ee:	4013      	ands	r3, r2
 80029f0:	683a      	ldr	r2, [r7, #0]
 80029f2:	429a      	cmp	r2, r3
 80029f4:	d001      	beq.n	80029fa <HAL_RCC_ClockConfig+0x1b6>
    {
      return HAL_ERROR;
 80029f6:	2301      	movs	r3, #1
 80029f8:	e03c      	b.n	8002a74 <HAL_RCC_ClockConfig+0x230>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	2204      	movs	r2, #4
 8002a00:	4013      	ands	r3, r2
 8002a02:	d009      	beq.n	8002a18 <HAL_RCC_ClockConfig+0x1d4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a04:	4b1e      	ldr	r3, [pc, #120]	; (8002a80 <HAL_RCC_ClockConfig+0x23c>)
 8002a06:	68db      	ldr	r3, [r3, #12]
 8002a08:	4a1f      	ldr	r2, [pc, #124]	; (8002a88 <HAL_RCC_ClockConfig+0x244>)
 8002a0a:	4013      	ands	r3, r2
 8002a0c:	0019      	movs	r1, r3
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	68da      	ldr	r2, [r3, #12]
 8002a12:	4b1b      	ldr	r3, [pc, #108]	; (8002a80 <HAL_RCC_ClockConfig+0x23c>)
 8002a14:	430a      	orrs	r2, r1
 8002a16:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	2208      	movs	r2, #8
 8002a1e:	4013      	ands	r3, r2
 8002a20:	d00a      	beq.n	8002a38 <HAL_RCC_ClockConfig+0x1f4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002a22:	4b17      	ldr	r3, [pc, #92]	; (8002a80 <HAL_RCC_ClockConfig+0x23c>)
 8002a24:	68db      	ldr	r3, [r3, #12]
 8002a26:	4a19      	ldr	r2, [pc, #100]	; (8002a8c <HAL_RCC_ClockConfig+0x248>)
 8002a28:	4013      	ands	r3, r2
 8002a2a:	0019      	movs	r1, r3
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	691b      	ldr	r3, [r3, #16]
 8002a30:	00da      	lsls	r2, r3, #3
 8002a32:	4b13      	ldr	r3, [pc, #76]	; (8002a80 <HAL_RCC_ClockConfig+0x23c>)
 8002a34:	430a      	orrs	r2, r1
 8002a36:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002a38:	f000 f82e 	bl	8002a98 <HAL_RCC_GetSysClockFreq>
 8002a3c:	0001      	movs	r1, r0
 8002a3e:	4b10      	ldr	r3, [pc, #64]	; (8002a80 <HAL_RCC_ClockConfig+0x23c>)
 8002a40:	68db      	ldr	r3, [r3, #12]
 8002a42:	091b      	lsrs	r3, r3, #4
 8002a44:	220f      	movs	r2, #15
 8002a46:	4013      	ands	r3, r2
 8002a48:	4a11      	ldr	r2, [pc, #68]	; (8002a90 <HAL_RCC_ClockConfig+0x24c>)
 8002a4a:	5cd3      	ldrb	r3, [r2, r3]
 8002a4c:	000a      	movs	r2, r1
 8002a4e:	40da      	lsrs	r2, r3
 8002a50:	4b10      	ldr	r3, [pc, #64]	; (8002a94 <HAL_RCC_ClockConfig+0x250>)
 8002a52:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(TICK_INT_PRIORITY);
 8002a54:	250b      	movs	r5, #11
 8002a56:	197c      	adds	r4, r7, r5
 8002a58:	2000      	movs	r0, #0
 8002a5a:	f7fe fe85 	bl	8001768 <HAL_InitTick>
 8002a5e:	0003      	movs	r3, r0
 8002a60:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8002a62:	197b      	adds	r3, r7, r5
 8002a64:	781b      	ldrb	r3, [r3, #0]
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d003      	beq.n	8002a72 <HAL_RCC_ClockConfig+0x22e>
  {
    return status;
 8002a6a:	230b      	movs	r3, #11
 8002a6c:	18fb      	adds	r3, r7, r3
 8002a6e:	781b      	ldrb	r3, [r3, #0]
 8002a70:	e000      	b.n	8002a74 <HAL_RCC_ClockConfig+0x230>
  }

  return HAL_OK;
 8002a72:	2300      	movs	r3, #0
}
 8002a74:	0018      	movs	r0, r3
 8002a76:	46bd      	mov	sp, r7
 8002a78:	b004      	add	sp, #16
 8002a7a:	bdb0      	pop	{r4, r5, r7, pc}
 8002a7c:	40022000 	.word	0x40022000
 8002a80:	40021000 	.word	0x40021000
 8002a84:	00001388 	.word	0x00001388
 8002a88:	fffff8ff 	.word	0xfffff8ff
 8002a8c:	ffffc7ff 	.word	0xffffc7ff
 8002a90:	08004654 	.word	0x08004654
 8002a94:	20000004 	.word	0x20000004

08002a98 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b086      	sub	sp, #24
 8002a9c:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8002a9e:	4b3b      	ldr	r3, [pc, #236]	; (8002b8c <HAL_RCC_GetSysClockFreq+0xf4>)
 8002aa0:	68db      	ldr	r3, [r3, #12]
 8002aa2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	220c      	movs	r2, #12
 8002aa8:	4013      	ands	r3, r2
 8002aaa:	2b08      	cmp	r3, #8
 8002aac:	d00e      	beq.n	8002acc <HAL_RCC_GetSysClockFreq+0x34>
 8002aae:	2b0c      	cmp	r3, #12
 8002ab0:	d00f      	beq.n	8002ad2 <HAL_RCC_GetSysClockFreq+0x3a>
 8002ab2:	2b04      	cmp	r3, #4
 8002ab4:	d157      	bne.n	8002b66 <HAL_RCC_GetSysClockFreq+0xce>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8002ab6:	4b35      	ldr	r3, [pc, #212]	; (8002b8c <HAL_RCC_GetSysClockFreq+0xf4>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	2210      	movs	r2, #16
 8002abc:	4013      	ands	r3, r2
 8002abe:	d002      	beq.n	8002ac6 <HAL_RCC_GetSysClockFreq+0x2e>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8002ac0:	4b33      	ldr	r3, [pc, #204]	; (8002b90 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002ac2:	613b      	str	r3, [r7, #16]
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8002ac4:	e05d      	b.n	8002b82 <HAL_RCC_GetSysClockFreq+0xea>
        sysclockfreq =  HSI_VALUE;
 8002ac6:	4b33      	ldr	r3, [pc, #204]	; (8002b94 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002ac8:	613b      	str	r3, [r7, #16]
      break;
 8002aca:	e05a      	b.n	8002b82 <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002acc:	4b32      	ldr	r3, [pc, #200]	; (8002b98 <HAL_RCC_GetSysClockFreq+0x100>)
 8002ace:	613b      	str	r3, [r7, #16]
      break;
 8002ad0:	e057      	b.n	8002b82 <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	0c9b      	lsrs	r3, r3, #18
 8002ad6:	220f      	movs	r2, #15
 8002ad8:	4013      	ands	r3, r2
 8002ada:	4a30      	ldr	r2, [pc, #192]	; (8002b9c <HAL_RCC_GetSysClockFreq+0x104>)
 8002adc:	5cd3      	ldrb	r3, [r2, r3]
 8002ade:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	0d9b      	lsrs	r3, r3, #22
 8002ae4:	2203      	movs	r2, #3
 8002ae6:	4013      	ands	r3, r2
 8002ae8:	3301      	adds	r3, #1
 8002aea:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002aec:	4b27      	ldr	r3, [pc, #156]	; (8002b8c <HAL_RCC_GetSysClockFreq+0xf4>)
 8002aee:	68da      	ldr	r2, [r3, #12]
 8002af0:	2380      	movs	r3, #128	; 0x80
 8002af2:	025b      	lsls	r3, r3, #9
 8002af4:	4013      	ands	r3, r2
 8002af6:	d00f      	beq.n	8002b18 <HAL_RCC_GetSysClockFreq+0x80>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE * pllm) / plld;
 8002af8:	68b9      	ldr	r1, [r7, #8]
 8002afa:	000a      	movs	r2, r1
 8002afc:	0152      	lsls	r2, r2, #5
 8002afe:	1a52      	subs	r2, r2, r1
 8002b00:	0193      	lsls	r3, r2, #6
 8002b02:	1a9b      	subs	r3, r3, r2
 8002b04:	00db      	lsls	r3, r3, #3
 8002b06:	185b      	adds	r3, r3, r1
 8002b08:	025b      	lsls	r3, r3, #9
 8002b0a:	6879      	ldr	r1, [r7, #4]
 8002b0c:	0018      	movs	r0, r3
 8002b0e:	f7fd fafb 	bl	8000108 <__udivsi3>
 8002b12:	0003      	movs	r3, r0
 8002b14:	617b      	str	r3, [r7, #20]
 8002b16:	e023      	b.n	8002b60 <HAL_RCC_GetSysClockFreq+0xc8>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8002b18:	4b1c      	ldr	r3, [pc, #112]	; (8002b8c <HAL_RCC_GetSysClockFreq+0xf4>)
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	2210      	movs	r2, #16
 8002b1e:	4013      	ands	r3, r2
 8002b20:	d00f      	beq.n	8002b42 <HAL_RCC_GetSysClockFreq+0xaa>
        {
          pllvco = ((HSI_VALUE >> 2) * pllm) / plld;
 8002b22:	68b9      	ldr	r1, [r7, #8]
 8002b24:	000a      	movs	r2, r1
 8002b26:	0152      	lsls	r2, r2, #5
 8002b28:	1a52      	subs	r2, r2, r1
 8002b2a:	0193      	lsls	r3, r2, #6
 8002b2c:	1a9b      	subs	r3, r3, r2
 8002b2e:	00db      	lsls	r3, r3, #3
 8002b30:	185b      	adds	r3, r3, r1
 8002b32:	021b      	lsls	r3, r3, #8
 8002b34:	6879      	ldr	r1, [r7, #4]
 8002b36:	0018      	movs	r0, r3
 8002b38:	f7fd fae6 	bl	8000108 <__udivsi3>
 8002b3c:	0003      	movs	r3, r0
 8002b3e:	617b      	str	r3, [r7, #20]
 8002b40:	e00e      	b.n	8002b60 <HAL_RCC_GetSysClockFreq+0xc8>
        }
        else
        {
         pllvco = (HSI_VALUE * pllm) / plld;
 8002b42:	68b9      	ldr	r1, [r7, #8]
 8002b44:	000a      	movs	r2, r1
 8002b46:	0152      	lsls	r2, r2, #5
 8002b48:	1a52      	subs	r2, r2, r1
 8002b4a:	0193      	lsls	r3, r2, #6
 8002b4c:	1a9b      	subs	r3, r3, r2
 8002b4e:	00db      	lsls	r3, r3, #3
 8002b50:	185b      	adds	r3, r3, r1
 8002b52:	029b      	lsls	r3, r3, #10
 8002b54:	6879      	ldr	r1, [r7, #4]
 8002b56:	0018      	movs	r0, r3
 8002b58:	f7fd fad6 	bl	8000108 <__udivsi3>
 8002b5c:	0003      	movs	r3, r0
 8002b5e:	617b      	str	r3, [r7, #20]
        }
      }
      sysclockfreq = pllvco;
 8002b60:	697b      	ldr	r3, [r7, #20]
 8002b62:	613b      	str	r3, [r7, #16]
      break;
 8002b64:	e00d      	b.n	8002b82 <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8002b66:	4b09      	ldr	r3, [pc, #36]	; (8002b8c <HAL_RCC_GetSysClockFreq+0xf4>)
 8002b68:	685b      	ldr	r3, [r3, #4]
 8002b6a:	0b5b      	lsrs	r3, r3, #13
 8002b6c:	2207      	movs	r2, #7
 8002b6e:	4013      	ands	r3, r2
 8002b70:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8002b72:	683b      	ldr	r3, [r7, #0]
 8002b74:	3301      	adds	r3, #1
 8002b76:	2280      	movs	r2, #128	; 0x80
 8002b78:	0212      	lsls	r2, r2, #8
 8002b7a:	409a      	lsls	r2, r3
 8002b7c:	0013      	movs	r3, r2
 8002b7e:	613b      	str	r3, [r7, #16]
      break;
 8002b80:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002b82:	693b      	ldr	r3, [r7, #16]
}
 8002b84:	0018      	movs	r0, r3
 8002b86:	46bd      	mov	sp, r7
 8002b88:	b006      	add	sp, #24
 8002b8a:	bd80      	pop	{r7, pc}
 8002b8c:	40021000 	.word	0x40021000
 8002b90:	003d0900 	.word	0x003d0900
 8002b94:	00f42400 	.word	0x00f42400
 8002b98:	007a1200 	.word	0x007a1200
 8002b9c:	0800466c 	.word	0x0800466c

08002ba0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ba4:	4b02      	ldr	r3, [pc, #8]	; (8002bb0 <HAL_RCC_GetHCLKFreq+0x10>)
 8002ba6:	681b      	ldr	r3, [r3, #0]
}
 8002ba8:	0018      	movs	r0, r3
 8002baa:	46bd      	mov	sp, r7
 8002bac:	bd80      	pop	{r7, pc}
 8002bae:	46c0      	nop			; (mov r8, r8)
 8002bb0:	20000004 	.word	0x20000004

08002bb4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002bb8:	f7ff fff2 	bl	8002ba0 <HAL_RCC_GetHCLKFreq>
 8002bbc:	0001      	movs	r1, r0
 8002bbe:	4b06      	ldr	r3, [pc, #24]	; (8002bd8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002bc0:	68db      	ldr	r3, [r3, #12]
 8002bc2:	0a1b      	lsrs	r3, r3, #8
 8002bc4:	2207      	movs	r2, #7
 8002bc6:	4013      	ands	r3, r2
 8002bc8:	4a04      	ldr	r2, [pc, #16]	; (8002bdc <HAL_RCC_GetPCLK1Freq+0x28>)
 8002bca:	5cd3      	ldrb	r3, [r2, r3]
 8002bcc:	40d9      	lsrs	r1, r3
 8002bce:	000b      	movs	r3, r1
}
 8002bd0:	0018      	movs	r0, r3
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	bd80      	pop	{r7, pc}
 8002bd6:	46c0      	nop			; (mov r8, r8)
 8002bd8:	40021000 	.word	0x40021000
 8002bdc:	08004664 	.word	0x08004664

08002be0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002be4:	f7ff ffdc 	bl	8002ba0 <HAL_RCC_GetHCLKFreq>
 8002be8:	0001      	movs	r1, r0
 8002bea:	4b06      	ldr	r3, [pc, #24]	; (8002c04 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002bec:	68db      	ldr	r3, [r3, #12]
 8002bee:	0adb      	lsrs	r3, r3, #11
 8002bf0:	2207      	movs	r2, #7
 8002bf2:	4013      	ands	r3, r2
 8002bf4:	4a04      	ldr	r2, [pc, #16]	; (8002c08 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002bf6:	5cd3      	ldrb	r3, [r2, r3]
 8002bf8:	40d9      	lsrs	r1, r3
 8002bfa:	000b      	movs	r3, r1
}
 8002bfc:	0018      	movs	r0, r3
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	bd80      	pop	{r7, pc}
 8002c02:	46c0      	nop			; (mov r8, r8)
 8002c04:	40021000 	.word	0x40021000
 8002c08:	08004664 	.word	0x08004664

08002c0c <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b086      	sub	sp, #24
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	2220      	movs	r2, #32
 8002c1a:	4013      	ands	r3, r2
 8002c1c:	d100      	bne.n	8002c20 <HAL_RCCEx_PeriphCLKConfig+0x14>
 8002c1e:	e0c7      	b.n	8002db0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
      assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->LCDClockSelection));
    }
#endif /* LCD */

    FlagStatus       pwrclkchanged = RESET;
 8002c20:	2317      	movs	r3, #23
 8002c22:	18fb      	adds	r3, r7, r3
 8002c24:	2200      	movs	r2, #0
 8002c26:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c28:	4b99      	ldr	r3, [pc, #612]	; (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8002c2a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002c2c:	2380      	movs	r3, #128	; 0x80
 8002c2e:	055b      	lsls	r3, r3, #21
 8002c30:	4013      	ands	r3, r2
 8002c32:	d10a      	bne.n	8002c4a <HAL_RCCEx_PeriphCLKConfig+0x3e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c34:	4b96      	ldr	r3, [pc, #600]	; (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8002c36:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002c38:	4b95      	ldr	r3, [pc, #596]	; (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8002c3a:	2180      	movs	r1, #128	; 0x80
 8002c3c:	0549      	lsls	r1, r1, #21
 8002c3e:	430a      	orrs	r2, r1
 8002c40:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8002c42:	2317      	movs	r3, #23
 8002c44:	18fb      	adds	r3, r7, r3
 8002c46:	2201      	movs	r2, #1
 8002c48:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c4a:	4b92      	ldr	r3, [pc, #584]	; (8002e94 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8002c4c:	681a      	ldr	r2, [r3, #0]
 8002c4e:	2380      	movs	r3, #128	; 0x80
 8002c50:	005b      	lsls	r3, r3, #1
 8002c52:	4013      	ands	r3, r2
 8002c54:	d11a      	bne.n	8002c8c <HAL_RCCEx_PeriphCLKConfig+0x80>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c56:	4b8f      	ldr	r3, [pc, #572]	; (8002e94 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8002c58:	681a      	ldr	r2, [r3, #0]
 8002c5a:	4b8e      	ldr	r3, [pc, #568]	; (8002e94 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8002c5c:	2180      	movs	r1, #128	; 0x80
 8002c5e:	0049      	lsls	r1, r1, #1
 8002c60:	430a      	orrs	r2, r1
 8002c62:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c64:	f7fe fdb6 	bl	80017d4 <HAL_GetTick>
 8002c68:	0003      	movs	r3, r0
 8002c6a:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c6c:	e008      	b.n	8002c80 <HAL_RCCEx_PeriphCLKConfig+0x74>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c6e:	f7fe fdb1 	bl	80017d4 <HAL_GetTick>
 8002c72:	0002      	movs	r2, r0
 8002c74:	693b      	ldr	r3, [r7, #16]
 8002c76:	1ad3      	subs	r3, r2, r3
 8002c78:	2b64      	cmp	r3, #100	; 0x64
 8002c7a:	d901      	bls.n	8002c80 <HAL_RCCEx_PeriphCLKConfig+0x74>
        {
          return HAL_TIMEOUT;
 8002c7c:	2303      	movs	r3, #3
 8002c7e:	e102      	b.n	8002e86 <HAL_RCCEx_PeriphCLKConfig+0x27a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c80:	4b84      	ldr	r3, [pc, #528]	; (8002e94 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8002c82:	681a      	ldr	r2, [r3, #0]
 8002c84:	2380      	movs	r3, #128	; 0x80
 8002c86:	005b      	lsls	r3, r3, #1
 8002c88:	4013      	ands	r3, r2
 8002c8a:	d0f0      	beq.n	8002c6e <HAL_RCCEx_PeriphCLKConfig+0x62>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8002c8c:	4b80      	ldr	r3, [pc, #512]	; (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8002c8e:	681a      	ldr	r2, [r3, #0]
 8002c90:	23c0      	movs	r3, #192	; 0xc0
 8002c92:	039b      	lsls	r3, r3, #14
 8002c94:	4013      	ands	r3, r2
 8002c96:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	685a      	ldr	r2, [r3, #4]
 8002c9c:	23c0      	movs	r3, #192	; 0xc0
 8002c9e:	039b      	lsls	r3, r3, #14
 8002ca0:	4013      	ands	r3, r2
 8002ca2:	68fa      	ldr	r2, [r7, #12]
 8002ca4:	429a      	cmp	r2, r3
 8002ca6:	d013      	beq.n	8002cd0 <HAL_RCCEx_PeriphCLKConfig+0xc4>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	685a      	ldr	r2, [r3, #4]
 8002cac:	23c0      	movs	r3, #192	; 0xc0
 8002cae:	029b      	lsls	r3, r3, #10
 8002cb0:	401a      	ands	r2, r3
 8002cb2:	23c0      	movs	r3, #192	; 0xc0
 8002cb4:	029b      	lsls	r3, r3, #10
 8002cb6:	429a      	cmp	r2, r3
 8002cb8:	d10a      	bne.n	8002cd0 <HAL_RCCEx_PeriphCLKConfig+0xc4>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8002cba:	4b75      	ldr	r3, [pc, #468]	; (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8002cbc:	681a      	ldr	r2, [r3, #0]
 8002cbe:	2380      	movs	r3, #128	; 0x80
 8002cc0:	029b      	lsls	r3, r3, #10
 8002cc2:	401a      	ands	r2, r3
 8002cc4:	2380      	movs	r3, #128	; 0x80
 8002cc6:	029b      	lsls	r3, r3, #10
 8002cc8:	429a      	cmp	r2, r3
 8002cca:	d101      	bne.n	8002cd0 <HAL_RCCEx_PeriphCLKConfig+0xc4>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8002ccc:	2301      	movs	r3, #1
 8002cce:	e0da      	b.n	8002e86 <HAL_RCCEx_PeriphCLKConfig+0x27a>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8002cd0:	4b6f      	ldr	r3, [pc, #444]	; (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8002cd2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002cd4:	23c0      	movs	r3, #192	; 0xc0
 8002cd6:	029b      	lsls	r3, r3, #10
 8002cd8:	4013      	ands	r3, r2
 8002cda:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d03b      	beq.n	8002d5a <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	685a      	ldr	r2, [r3, #4]
 8002ce6:	23c0      	movs	r3, #192	; 0xc0
 8002ce8:	029b      	lsls	r3, r3, #10
 8002cea:	4013      	ands	r3, r2
 8002cec:	68fa      	ldr	r2, [r7, #12]
 8002cee:	429a      	cmp	r2, r3
 8002cf0:	d033      	beq.n	8002d5a <HAL_RCCEx_PeriphCLKConfig+0x14e>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	2220      	movs	r2, #32
 8002cf8:	4013      	ands	r3, r2
 8002cfa:	d02e      	beq.n	8002d5a <HAL_RCCEx_PeriphCLKConfig+0x14e>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8002cfc:	4b64      	ldr	r3, [pc, #400]	; (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8002cfe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d00:	4a65      	ldr	r2, [pc, #404]	; (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8002d02:	4013      	ands	r3, r2
 8002d04:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002d06:	4b62      	ldr	r3, [pc, #392]	; (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8002d08:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002d0a:	4b61      	ldr	r3, [pc, #388]	; (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8002d0c:	2180      	movs	r1, #128	; 0x80
 8002d0e:	0309      	lsls	r1, r1, #12
 8002d10:	430a      	orrs	r2, r1
 8002d12:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002d14:	4b5e      	ldr	r3, [pc, #376]	; (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8002d16:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002d18:	4b5d      	ldr	r3, [pc, #372]	; (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8002d1a:	4960      	ldr	r1, [pc, #384]	; (8002e9c <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8002d1c:	400a      	ands	r2, r1
 8002d1e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8002d20:	4b5b      	ldr	r3, [pc, #364]	; (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8002d22:	68fa      	ldr	r2, [r7, #12]
 8002d24:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8002d26:	68fa      	ldr	r2, [r7, #12]
 8002d28:	2380      	movs	r3, #128	; 0x80
 8002d2a:	005b      	lsls	r3, r3, #1
 8002d2c:	4013      	ands	r3, r2
 8002d2e:	d014      	beq.n	8002d5a <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d30:	f7fe fd50 	bl	80017d4 <HAL_GetTick>
 8002d34:	0003      	movs	r3, r0
 8002d36:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002d38:	e009      	b.n	8002d4e <HAL_RCCEx_PeriphCLKConfig+0x142>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d3a:	f7fe fd4b 	bl	80017d4 <HAL_GetTick>
 8002d3e:	0002      	movs	r2, r0
 8002d40:	693b      	ldr	r3, [r7, #16]
 8002d42:	1ad3      	subs	r3, r2, r3
 8002d44:	4a56      	ldr	r2, [pc, #344]	; (8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8002d46:	4293      	cmp	r3, r2
 8002d48:	d901      	bls.n	8002d4e <HAL_RCCEx_PeriphCLKConfig+0x142>
          {
            return HAL_TIMEOUT;
 8002d4a:	2303      	movs	r3, #3
 8002d4c:	e09b      	b.n	8002e86 <HAL_RCCEx_PeriphCLKConfig+0x27a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002d4e:	4b50      	ldr	r3, [pc, #320]	; (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8002d50:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002d52:	2380      	movs	r3, #128	; 0x80
 8002d54:	009b      	lsls	r3, r3, #2
 8002d56:	4013      	ands	r3, r2
 8002d58:	d0ef      	beq.n	8002d3a <HAL_RCCEx_PeriphCLKConfig+0x12e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	685a      	ldr	r2, [r3, #4]
 8002d5e:	23c0      	movs	r3, #192	; 0xc0
 8002d60:	029b      	lsls	r3, r3, #10
 8002d62:	401a      	ands	r2, r3
 8002d64:	23c0      	movs	r3, #192	; 0xc0
 8002d66:	029b      	lsls	r3, r3, #10
 8002d68:	429a      	cmp	r2, r3
 8002d6a:	d10c      	bne.n	8002d86 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8002d6c:	4b48      	ldr	r3, [pc, #288]	; (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	4a4c      	ldr	r2, [pc, #304]	; (8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 8002d72:	4013      	ands	r3, r2
 8002d74:	0019      	movs	r1, r3
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	685a      	ldr	r2, [r3, #4]
 8002d7a:	23c0      	movs	r3, #192	; 0xc0
 8002d7c:	039b      	lsls	r3, r3, #14
 8002d7e:	401a      	ands	r2, r3
 8002d80:	4b43      	ldr	r3, [pc, #268]	; (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8002d82:	430a      	orrs	r2, r1
 8002d84:	601a      	str	r2, [r3, #0]
 8002d86:	4b42      	ldr	r3, [pc, #264]	; (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8002d88:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	685a      	ldr	r2, [r3, #4]
 8002d8e:	23c0      	movs	r3, #192	; 0xc0
 8002d90:	029b      	lsls	r3, r3, #10
 8002d92:	401a      	ands	r2, r3
 8002d94:	4b3e      	ldr	r3, [pc, #248]	; (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8002d96:	430a      	orrs	r2, r1
 8002d98:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002d9a:	2317      	movs	r3, #23
 8002d9c:	18fb      	adds	r3, r7, r3
 8002d9e:	781b      	ldrb	r3, [r3, #0]
 8002da0:	2b01      	cmp	r3, #1
 8002da2:	d105      	bne.n	8002db0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002da4:	4b3a      	ldr	r3, [pc, #232]	; (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8002da6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002da8:	4b39      	ldr	r3, [pc, #228]	; (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8002daa:	493f      	ldr	r1, [pc, #252]	; (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8002dac:	400a      	ands	r2, r1
 8002dae:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	2201      	movs	r2, #1
 8002db6:	4013      	ands	r3, r2
 8002db8:	d009      	beq.n	8002dce <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002dba:	4b35      	ldr	r3, [pc, #212]	; (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8002dbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002dbe:	2203      	movs	r2, #3
 8002dc0:	4393      	bics	r3, r2
 8002dc2:	0019      	movs	r1, r3
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	689a      	ldr	r2, [r3, #8]
 8002dc8:	4b31      	ldr	r3, [pc, #196]	; (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8002dca:	430a      	orrs	r2, r1
 8002dcc:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	2202      	movs	r2, #2
 8002dd4:	4013      	ands	r3, r2
 8002dd6:	d009      	beq.n	8002dec <HAL_RCCEx_PeriphCLKConfig+0x1e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002dd8:	4b2d      	ldr	r3, [pc, #180]	; (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8002dda:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ddc:	220c      	movs	r2, #12
 8002dde:	4393      	bics	r3, r2
 8002de0:	0019      	movs	r1, r3
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	68da      	ldr	r2, [r3, #12]
 8002de6:	4b2a      	ldr	r3, [pc, #168]	; (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8002de8:	430a      	orrs	r2, r1
 8002dea:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	2204      	movs	r2, #4
 8002df2:	4013      	ands	r3, r2
 8002df4:	d009      	beq.n	8002e0a <HAL_RCCEx_PeriphCLKConfig+0x1fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002df6:	4b26      	ldr	r3, [pc, #152]	; (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8002df8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002dfa:	4a2c      	ldr	r2, [pc, #176]	; (8002eac <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8002dfc:	4013      	ands	r3, r2
 8002dfe:	0019      	movs	r1, r3
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	691a      	ldr	r2, [r3, #16]
 8002e04:	4b22      	ldr	r3, [pc, #136]	; (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8002e06:	430a      	orrs	r2, r1
 8002e08:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	2208      	movs	r2, #8
 8002e10:	4013      	ands	r3, r2
 8002e12:	d009      	beq.n	8002e28 <HAL_RCCEx_PeriphCLKConfig+0x21c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002e14:	4b1e      	ldr	r3, [pc, #120]	; (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8002e16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e18:	4a25      	ldr	r2, [pc, #148]	; (8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8002e1a:	4013      	ands	r3, r2
 8002e1c:	0019      	movs	r1, r3
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	695a      	ldr	r2, [r3, #20]
 8002e22:	4b1b      	ldr	r3, [pc, #108]	; (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8002e24:	430a      	orrs	r2, r1
 8002e26:	64da      	str	r2, [r3, #76]	; 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681a      	ldr	r2, [r3, #0]
 8002e2c:	2380      	movs	r3, #128	; 0x80
 8002e2e:	005b      	lsls	r3, r3, #1
 8002e30:	4013      	ands	r3, r2
 8002e32:	d009      	beq.n	8002e48 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002e34:	4b16      	ldr	r3, [pc, #88]	; (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8002e36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e38:	4a17      	ldr	r2, [pc, #92]	; (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8002e3a:	4013      	ands	r3, r2
 8002e3c:	0019      	movs	r1, r3
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	699a      	ldr	r2, [r3, #24]
 8002e42:	4b13      	ldr	r3, [pc, #76]	; (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8002e44:	430a      	orrs	r2, r1
 8002e46:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	2240      	movs	r2, #64	; 0x40
 8002e4e:	4013      	ands	r3, r2
 8002e50:	d009      	beq.n	8002e66 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002e52:	4b0f      	ldr	r3, [pc, #60]	; (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8002e54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e56:	4a17      	ldr	r2, [pc, #92]	; (8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 8002e58:	4013      	ands	r3, r2
 8002e5a:	0019      	movs	r1, r3
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	6a1a      	ldr	r2, [r3, #32]
 8002e60:	4b0b      	ldr	r3, [pc, #44]	; (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8002e62:	430a      	orrs	r2, r1
 8002e64:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	2280      	movs	r2, #128	; 0x80
 8002e6c:	4013      	ands	r3, r2
 8002e6e:	d009      	beq.n	8002e84 <HAL_RCCEx_PeriphCLKConfig+0x278>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8002e70:	4b07      	ldr	r3, [pc, #28]	; (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8002e72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e74:	4a10      	ldr	r2, [pc, #64]	; (8002eb8 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 8002e76:	4013      	ands	r3, r2
 8002e78:	0019      	movs	r1, r3
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	69da      	ldr	r2, [r3, #28]
 8002e7e:	4b04      	ldr	r3, [pc, #16]	; (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8002e80:	430a      	orrs	r2, r1
 8002e82:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8002e84:	2300      	movs	r3, #0
}
 8002e86:	0018      	movs	r0, r3
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	b006      	add	sp, #24
 8002e8c:	bd80      	pop	{r7, pc}
 8002e8e:	46c0      	nop			; (mov r8, r8)
 8002e90:	40021000 	.word	0x40021000
 8002e94:	40007000 	.word	0x40007000
 8002e98:	fffcffff 	.word	0xfffcffff
 8002e9c:	fff7ffff 	.word	0xfff7ffff
 8002ea0:	00001388 	.word	0x00001388
 8002ea4:	ffcfffff 	.word	0xffcfffff
 8002ea8:	efffffff 	.word	0xefffffff
 8002eac:	fffff3ff 	.word	0xfffff3ff
 8002eb0:	ffffcfff 	.word	0xffffcfff
 8002eb4:	fbffffff 	.word	0xfbffffff
 8002eb8:	fff3ffff 	.word	0xfff3ffff

08002ebc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b082      	sub	sp, #8
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d101      	bne.n	8002ece <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002eca:	2301      	movs	r3, #1
 8002ecc:	e01e      	b.n	8002f0c <HAL_TIM_PWM_Init+0x50>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	2239      	movs	r2, #57	; 0x39
 8002ed2:	5c9b      	ldrb	r3, [r3, r2]
 8002ed4:	b2db      	uxtb	r3, r3
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d107      	bne.n	8002eea <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	2238      	movs	r2, #56	; 0x38
 8002ede:	2100      	movs	r1, #0
 8002ee0:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	0018      	movs	r0, r3
 8002ee6:	f7fe f9e3 	bl	80012b0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	2239      	movs	r2, #57	; 0x39
 8002eee:	2102      	movs	r1, #2
 8002ef0:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681a      	ldr	r2, [r3, #0]
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	3304      	adds	r3, #4
 8002efa:	0019      	movs	r1, r3
 8002efc:	0010      	movs	r0, r2
 8002efe:	f000 f909 	bl	8003114 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	2239      	movs	r2, #57	; 0x39
 8002f06:	2101      	movs	r1, #1
 8002f08:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002f0a:	2300      	movs	r3, #0
}
 8002f0c:	0018      	movs	r0, r3
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	b002      	add	sp, #8
 8002f12:	bd80      	pop	{r7, pc}

08002f14 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	b084      	sub	sp, #16
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
 8002f1c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	6839      	ldr	r1, [r7, #0]
 8002f24:	2201      	movs	r2, #1
 8002f26:	0018      	movs	r0, r3
 8002f28:	f000 fa56 	bl	80033d8 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	689b      	ldr	r3, [r3, #8]
 8002f32:	2207      	movs	r2, #7
 8002f34:	4013      	ands	r3, r2
 8002f36:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	2b06      	cmp	r3, #6
 8002f3c:	d007      	beq.n	8002f4e <HAL_TIM_PWM_Start+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	681a      	ldr	r2, [r3, #0]
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	2101      	movs	r1, #1
 8002f4a:	430a      	orrs	r2, r1
 8002f4c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002f4e:	2300      	movs	r3, #0
}
 8002f50:	0018      	movs	r0, r3
 8002f52:	46bd      	mov	sp, r7
 8002f54:	b004      	add	sp, #16
 8002f56:	bd80      	pop	{r7, pc}

08002f58 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	b082      	sub	sp, #8
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
 8002f60:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	6839      	ldr	r1, [r7, #0]
 8002f68:	2200      	movs	r2, #0
 8002f6a:	0018      	movs	r0, r3
 8002f6c:	f000 fa34 	bl	80033d8 <TIM_CCxChannelCmd>

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	6a1b      	ldr	r3, [r3, #32]
 8002f76:	4a0a      	ldr	r2, [pc, #40]	; (8002fa0 <HAL_TIM_PWM_Stop+0x48>)
 8002f78:	4013      	ands	r3, r2
 8002f7a:	d107      	bne.n	8002f8c <HAL_TIM_PWM_Stop+0x34>
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	681a      	ldr	r2, [r3, #0]
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	2101      	movs	r1, #1
 8002f88:	438a      	bics	r2, r1
 8002f8a:	601a      	str	r2, [r3, #0]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2239      	movs	r2, #57	; 0x39
 8002f90:	2101      	movs	r1, #1
 8002f92:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8002f94:	2300      	movs	r3, #0
}
 8002f96:	0018      	movs	r0, r3
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	b002      	add	sp, #8
 8002f9c:	bd80      	pop	{r7, pc}
 8002f9e:	46c0      	nop			; (mov r8, r8)
 8002fa0:	00001111 	.word	0x00001111

08002fa4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	b084      	sub	sp, #16
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	60f8      	str	r0, [r7, #12]
 8002fac:	60b9      	str	r1, [r7, #8]
 8002fae:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	2238      	movs	r2, #56	; 0x38
 8002fb4:	5c9b      	ldrb	r3, [r3, r2]
 8002fb6:	2b01      	cmp	r3, #1
 8002fb8:	d101      	bne.n	8002fbe <HAL_TIM_PWM_ConfigChannel+0x1a>
 8002fba:	2302      	movs	r3, #2
 8002fbc:	e0a4      	b.n	8003108 <HAL_TIM_PWM_ConfigChannel+0x164>
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	2238      	movs	r2, #56	; 0x38
 8002fc2:	2101      	movs	r1, #1
 8002fc4:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	2239      	movs	r2, #57	; 0x39
 8002fca:	2102      	movs	r1, #2
 8002fcc:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	2b04      	cmp	r3, #4
 8002fd2:	d029      	beq.n	8003028 <HAL_TIM_PWM_ConfigChannel+0x84>
 8002fd4:	d802      	bhi.n	8002fdc <HAL_TIM_PWM_ConfigChannel+0x38>
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d005      	beq.n	8002fe6 <HAL_TIM_PWM_ConfigChannel+0x42>
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
      break;
    }

    default:
      break;
 8002fda:	e08c      	b.n	80030f6 <HAL_TIM_PWM_ConfigChannel+0x152>
  switch (Channel)
 8002fdc:	2b08      	cmp	r3, #8
 8002fde:	d046      	beq.n	800306e <HAL_TIM_PWM_ConfigChannel+0xca>
 8002fe0:	2b0c      	cmp	r3, #12
 8002fe2:	d065      	beq.n	80030b0 <HAL_TIM_PWM_ConfigChannel+0x10c>
      break;
 8002fe4:	e087      	b.n	80030f6 <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	68ba      	ldr	r2, [r7, #8]
 8002fec:	0011      	movs	r1, r2
 8002fee:	0018      	movs	r0, r3
 8002ff0:	f000 f8ee 	bl	80031d0 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	699a      	ldr	r2, [r3, #24]
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	2108      	movs	r1, #8
 8003000:	430a      	orrs	r2, r1
 8003002:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	699a      	ldr	r2, [r3, #24]
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	2104      	movs	r1, #4
 8003010:	438a      	bics	r2, r1
 8003012:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	6999      	ldr	r1, [r3, #24]
 800301a:	68bb      	ldr	r3, [r7, #8]
 800301c:	68da      	ldr	r2, [r3, #12]
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	430a      	orrs	r2, r1
 8003024:	619a      	str	r2, [r3, #24]
      break;
 8003026:	e066      	b.n	80030f6 <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	68ba      	ldr	r2, [r7, #8]
 800302e:	0011      	movs	r1, r2
 8003030:	0018      	movs	r0, r3
 8003032:	f000 f909 	bl	8003248 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	699a      	ldr	r2, [r3, #24]
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	2180      	movs	r1, #128	; 0x80
 8003042:	0109      	lsls	r1, r1, #4
 8003044:	430a      	orrs	r2, r1
 8003046:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	699a      	ldr	r2, [r3, #24]
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	492f      	ldr	r1, [pc, #188]	; (8003110 <HAL_TIM_PWM_ConfigChannel+0x16c>)
 8003054:	400a      	ands	r2, r1
 8003056:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	6999      	ldr	r1, [r3, #24]
 800305e:	68bb      	ldr	r3, [r7, #8]
 8003060:	68db      	ldr	r3, [r3, #12]
 8003062:	021a      	lsls	r2, r3, #8
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	430a      	orrs	r2, r1
 800306a:	619a      	str	r2, [r3, #24]
      break;
 800306c:	e043      	b.n	80030f6 <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	68ba      	ldr	r2, [r7, #8]
 8003074:	0011      	movs	r1, r2
 8003076:	0018      	movs	r0, r3
 8003078:	f000 f928 	bl	80032cc <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	69da      	ldr	r2, [r3, #28]
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	2108      	movs	r1, #8
 8003088:	430a      	orrs	r2, r1
 800308a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	69da      	ldr	r2, [r3, #28]
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	2104      	movs	r1, #4
 8003098:	438a      	bics	r2, r1
 800309a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	69d9      	ldr	r1, [r3, #28]
 80030a2:	68bb      	ldr	r3, [r7, #8]
 80030a4:	68da      	ldr	r2, [r3, #12]
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	430a      	orrs	r2, r1
 80030ac:	61da      	str	r2, [r3, #28]
      break;
 80030ae:	e022      	b.n	80030f6 <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	68ba      	ldr	r2, [r7, #8]
 80030b6:	0011      	movs	r1, r2
 80030b8:	0018      	movs	r0, r3
 80030ba:	f000 f947 	bl	800334c <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	69da      	ldr	r2, [r3, #28]
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	2180      	movs	r1, #128	; 0x80
 80030ca:	0109      	lsls	r1, r1, #4
 80030cc:	430a      	orrs	r2, r1
 80030ce:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	69da      	ldr	r2, [r3, #28]
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	490d      	ldr	r1, [pc, #52]	; (8003110 <HAL_TIM_PWM_ConfigChannel+0x16c>)
 80030dc:	400a      	ands	r2, r1
 80030de:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	69d9      	ldr	r1, [r3, #28]
 80030e6:	68bb      	ldr	r3, [r7, #8]
 80030e8:	68db      	ldr	r3, [r3, #12]
 80030ea:	021a      	lsls	r2, r3, #8
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	430a      	orrs	r2, r1
 80030f2:	61da      	str	r2, [r3, #28]
      break;
 80030f4:	46c0      	nop			; (mov r8, r8)
  }

  htim->State = HAL_TIM_STATE_READY;
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	2239      	movs	r2, #57	; 0x39
 80030fa:	2101      	movs	r1, #1
 80030fc:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	2238      	movs	r2, #56	; 0x38
 8003102:	2100      	movs	r1, #0
 8003104:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003106:	2300      	movs	r3, #0
}
 8003108:	0018      	movs	r0, r3
 800310a:	46bd      	mov	sp, r7
 800310c:	b004      	add	sp, #16
 800310e:	bd80      	pop	{r7, pc}
 8003110:	fffffbff 	.word	0xfffffbff

08003114 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	b084      	sub	sp, #16
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
 800311c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003124:	687a      	ldr	r2, [r7, #4]
 8003126:	2380      	movs	r3, #128	; 0x80
 8003128:	05db      	lsls	r3, r3, #23
 800312a:	429a      	cmp	r2, r3
 800312c:	d00b      	beq.n	8003146 <TIM_Base_SetConfig+0x32>
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	4a23      	ldr	r2, [pc, #140]	; (80031c0 <TIM_Base_SetConfig+0xac>)
 8003132:	4293      	cmp	r3, r2
 8003134:	d007      	beq.n	8003146 <TIM_Base_SetConfig+0x32>
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	4a22      	ldr	r2, [pc, #136]	; (80031c4 <TIM_Base_SetConfig+0xb0>)
 800313a:	4293      	cmp	r3, r2
 800313c:	d003      	beq.n	8003146 <TIM_Base_SetConfig+0x32>
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	4a21      	ldr	r2, [pc, #132]	; (80031c8 <TIM_Base_SetConfig+0xb4>)
 8003142:	4293      	cmp	r3, r2
 8003144:	d108      	bne.n	8003158 <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	2270      	movs	r2, #112	; 0x70
 800314a:	4393      	bics	r3, r2
 800314c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	685b      	ldr	r3, [r3, #4]
 8003152:	68fa      	ldr	r2, [r7, #12]
 8003154:	4313      	orrs	r3, r2
 8003156:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003158:	687a      	ldr	r2, [r7, #4]
 800315a:	2380      	movs	r3, #128	; 0x80
 800315c:	05db      	lsls	r3, r3, #23
 800315e:	429a      	cmp	r2, r3
 8003160:	d00b      	beq.n	800317a <TIM_Base_SetConfig+0x66>
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	4a16      	ldr	r2, [pc, #88]	; (80031c0 <TIM_Base_SetConfig+0xac>)
 8003166:	4293      	cmp	r3, r2
 8003168:	d007      	beq.n	800317a <TIM_Base_SetConfig+0x66>
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	4a15      	ldr	r2, [pc, #84]	; (80031c4 <TIM_Base_SetConfig+0xb0>)
 800316e:	4293      	cmp	r3, r2
 8003170:	d003      	beq.n	800317a <TIM_Base_SetConfig+0x66>
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	4a14      	ldr	r2, [pc, #80]	; (80031c8 <TIM_Base_SetConfig+0xb4>)
 8003176:	4293      	cmp	r3, r2
 8003178:	d108      	bne.n	800318c <TIM_Base_SetConfig+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	4a13      	ldr	r2, [pc, #76]	; (80031cc <TIM_Base_SetConfig+0xb8>)
 800317e:	4013      	ands	r3, r2
 8003180:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003182:	683b      	ldr	r3, [r7, #0]
 8003184:	68db      	ldr	r3, [r3, #12]
 8003186:	68fa      	ldr	r2, [r7, #12]
 8003188:	4313      	orrs	r3, r2
 800318a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	2280      	movs	r2, #128	; 0x80
 8003190:	4393      	bics	r3, r2
 8003192:	001a      	movs	r2, r3
 8003194:	683b      	ldr	r3, [r7, #0]
 8003196:	691b      	ldr	r3, [r3, #16]
 8003198:	4313      	orrs	r3, r2
 800319a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	68fa      	ldr	r2, [r7, #12]
 80031a0:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80031a2:	683b      	ldr	r3, [r7, #0]
 80031a4:	689a      	ldr	r2, [r3, #8]
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80031aa:	683b      	ldr	r3, [r7, #0]
 80031ac:	681a      	ldr	r2, [r3, #0]
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	2201      	movs	r2, #1
 80031b6:	615a      	str	r2, [r3, #20]
}
 80031b8:	46c0      	nop			; (mov r8, r8)
 80031ba:	46bd      	mov	sp, r7
 80031bc:	b004      	add	sp, #16
 80031be:	bd80      	pop	{r7, pc}
 80031c0:	40000400 	.word	0x40000400
 80031c4:	40010800 	.word	0x40010800
 80031c8:	40011400 	.word	0x40011400
 80031cc:	fffffcff 	.word	0xfffffcff

080031d0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b086      	sub	sp, #24
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
 80031d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6a1b      	ldr	r3, [r3, #32]
 80031de:	2201      	movs	r2, #1
 80031e0:	4393      	bics	r3, r2
 80031e2:	001a      	movs	r2, r3
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	6a1b      	ldr	r3, [r3, #32]
 80031ec:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	685b      	ldr	r3, [r3, #4]
 80031f2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	699b      	ldr	r3, [r3, #24]
 80031f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	2270      	movs	r2, #112	; 0x70
 80031fe:	4393      	bics	r3, r2
 8003200:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	2203      	movs	r2, #3
 8003206:	4393      	bics	r3, r2
 8003208:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800320a:	683b      	ldr	r3, [r7, #0]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	68fa      	ldr	r2, [r7, #12]
 8003210:	4313      	orrs	r3, r2
 8003212:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003214:	697b      	ldr	r3, [r7, #20]
 8003216:	2202      	movs	r2, #2
 8003218:	4393      	bics	r3, r2
 800321a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800321c:	683b      	ldr	r3, [r7, #0]
 800321e:	689b      	ldr	r3, [r3, #8]
 8003220:	697a      	ldr	r2, [r7, #20]
 8003222:	4313      	orrs	r3, r2
 8003224:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	693a      	ldr	r2, [r7, #16]
 800322a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	68fa      	ldr	r2, [r7, #12]
 8003230:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	685a      	ldr	r2, [r3, #4]
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	697a      	ldr	r2, [r7, #20]
 800323e:	621a      	str	r2, [r3, #32]
}
 8003240:	46c0      	nop			; (mov r8, r8)
 8003242:	46bd      	mov	sp, r7
 8003244:	b006      	add	sp, #24
 8003246:	bd80      	pop	{r7, pc}

08003248 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	b086      	sub	sp, #24
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
 8003250:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6a1b      	ldr	r3, [r3, #32]
 8003256:	2210      	movs	r2, #16
 8003258:	4393      	bics	r3, r2
 800325a:	001a      	movs	r2, r3
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	6a1b      	ldr	r3, [r3, #32]
 8003264:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	685b      	ldr	r3, [r3, #4]
 800326a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	699b      	ldr	r3, [r3, #24]
 8003270:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	4a13      	ldr	r2, [pc, #76]	; (80032c4 <TIM_OC2_SetConfig+0x7c>)
 8003276:	4013      	ands	r3, r2
 8003278:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	4a12      	ldr	r2, [pc, #72]	; (80032c8 <TIM_OC2_SetConfig+0x80>)
 800327e:	4013      	ands	r3, r2
 8003280:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003282:	683b      	ldr	r3, [r7, #0]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	021b      	lsls	r3, r3, #8
 8003288:	68fa      	ldr	r2, [r7, #12]
 800328a:	4313      	orrs	r3, r2
 800328c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800328e:	697b      	ldr	r3, [r7, #20]
 8003290:	2220      	movs	r2, #32
 8003292:	4393      	bics	r3, r2
 8003294:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003296:	683b      	ldr	r3, [r7, #0]
 8003298:	689b      	ldr	r3, [r3, #8]
 800329a:	011b      	lsls	r3, r3, #4
 800329c:	697a      	ldr	r2, [r7, #20]
 800329e:	4313      	orrs	r3, r2
 80032a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	693a      	ldr	r2, [r7, #16]
 80032a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	68fa      	ldr	r2, [r7, #12]
 80032ac:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80032ae:	683b      	ldr	r3, [r7, #0]
 80032b0:	685a      	ldr	r2, [r3, #4]
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	697a      	ldr	r2, [r7, #20]
 80032ba:	621a      	str	r2, [r3, #32]
}
 80032bc:	46c0      	nop			; (mov r8, r8)
 80032be:	46bd      	mov	sp, r7
 80032c0:	b006      	add	sp, #24
 80032c2:	bd80      	pop	{r7, pc}
 80032c4:	ffff8fff 	.word	0xffff8fff
 80032c8:	fffffcff 	.word	0xfffffcff

080032cc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	b086      	sub	sp, #24
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
 80032d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	6a1b      	ldr	r3, [r3, #32]
 80032da:	4a1a      	ldr	r2, [pc, #104]	; (8003344 <TIM_OC3_SetConfig+0x78>)
 80032dc:	401a      	ands	r2, r3
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6a1b      	ldr	r3, [r3, #32]
 80032e6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	685b      	ldr	r3, [r3, #4]
 80032ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	69db      	ldr	r3, [r3, #28]
 80032f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	2270      	movs	r2, #112	; 0x70
 80032f8:	4393      	bics	r3, r2
 80032fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	2203      	movs	r2, #3
 8003300:	4393      	bics	r3, r2
 8003302:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	68fa      	ldr	r2, [r7, #12]
 800330a:	4313      	orrs	r3, r2
 800330c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800330e:	697b      	ldr	r3, [r7, #20]
 8003310:	4a0d      	ldr	r2, [pc, #52]	; (8003348 <TIM_OC3_SetConfig+0x7c>)
 8003312:	4013      	ands	r3, r2
 8003314:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003316:	683b      	ldr	r3, [r7, #0]
 8003318:	689b      	ldr	r3, [r3, #8]
 800331a:	021b      	lsls	r3, r3, #8
 800331c:	697a      	ldr	r2, [r7, #20]
 800331e:	4313      	orrs	r3, r2
 8003320:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	693a      	ldr	r2, [r7, #16]
 8003326:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	68fa      	ldr	r2, [r7, #12]
 800332c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800332e:	683b      	ldr	r3, [r7, #0]
 8003330:	685a      	ldr	r2, [r3, #4]
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	697a      	ldr	r2, [r7, #20]
 800333a:	621a      	str	r2, [r3, #32]
}
 800333c:	46c0      	nop			; (mov r8, r8)
 800333e:	46bd      	mov	sp, r7
 8003340:	b006      	add	sp, #24
 8003342:	bd80      	pop	{r7, pc}
 8003344:	fffffeff 	.word	0xfffffeff
 8003348:	fffffdff 	.word	0xfffffdff

0800334c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800334c:	b580      	push	{r7, lr}
 800334e:	b086      	sub	sp, #24
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
 8003354:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6a1b      	ldr	r3, [r3, #32]
 800335a:	4a1b      	ldr	r2, [pc, #108]	; (80033c8 <TIM_OC4_SetConfig+0x7c>)
 800335c:	401a      	ands	r2, r3
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6a1b      	ldr	r3, [r3, #32]
 8003366:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	685b      	ldr	r3, [r3, #4]
 800336c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	69db      	ldr	r3, [r3, #28]
 8003372:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	4a15      	ldr	r2, [pc, #84]	; (80033cc <TIM_OC4_SetConfig+0x80>)
 8003378:	4013      	ands	r3, r2
 800337a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	4a14      	ldr	r2, [pc, #80]	; (80033d0 <TIM_OC4_SetConfig+0x84>)
 8003380:	4013      	ands	r3, r2
 8003382:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003384:	683b      	ldr	r3, [r7, #0]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	021b      	lsls	r3, r3, #8
 800338a:	68fa      	ldr	r2, [r7, #12]
 800338c:	4313      	orrs	r3, r2
 800338e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003390:	697b      	ldr	r3, [r7, #20]
 8003392:	4a10      	ldr	r2, [pc, #64]	; (80033d4 <TIM_OC4_SetConfig+0x88>)
 8003394:	4013      	ands	r3, r2
 8003396:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003398:	683b      	ldr	r3, [r7, #0]
 800339a:	689b      	ldr	r3, [r3, #8]
 800339c:	031b      	lsls	r3, r3, #12
 800339e:	697a      	ldr	r2, [r7, #20]
 80033a0:	4313      	orrs	r3, r2
 80033a2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	693a      	ldr	r2, [r7, #16]
 80033a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	68fa      	ldr	r2, [r7, #12]
 80033ae:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80033b0:	683b      	ldr	r3, [r7, #0]
 80033b2:	685a      	ldr	r2, [r3, #4]
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	697a      	ldr	r2, [r7, #20]
 80033bc:	621a      	str	r2, [r3, #32]
}
 80033be:	46c0      	nop			; (mov r8, r8)
 80033c0:	46bd      	mov	sp, r7
 80033c2:	b006      	add	sp, #24
 80033c4:	bd80      	pop	{r7, pc}
 80033c6:	46c0      	nop			; (mov r8, r8)
 80033c8:	ffffefff 	.word	0xffffefff
 80033cc:	ffff8fff 	.word	0xffff8fff
 80033d0:	fffffcff 	.word	0xfffffcff
 80033d4:	ffffdfff 	.word	0xffffdfff

080033d8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
static void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80033d8:	b580      	push	{r7, lr}
 80033da:	b086      	sub	sp, #24
 80033dc:	af00      	add	r7, sp, #0
 80033de:	60f8      	str	r0, [r7, #12]
 80033e0:	60b9      	str	r1, [r7, #8]
 80033e2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80033e4:	68bb      	ldr	r3, [r7, #8]
 80033e6:	221f      	movs	r2, #31
 80033e8:	4013      	ands	r3, r2
 80033ea:	2201      	movs	r2, #1
 80033ec:	409a      	lsls	r2, r3
 80033ee:	0013      	movs	r3, r2
 80033f0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	6a1b      	ldr	r3, [r3, #32]
 80033f6:	697a      	ldr	r2, [r7, #20]
 80033f8:	43d2      	mvns	r2, r2
 80033fa:	401a      	ands	r2, r3
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	6a1a      	ldr	r2, [r3, #32]
 8003404:	68bb      	ldr	r3, [r7, #8]
 8003406:	211f      	movs	r1, #31
 8003408:	400b      	ands	r3, r1
 800340a:	6879      	ldr	r1, [r7, #4]
 800340c:	4099      	lsls	r1, r3
 800340e:	000b      	movs	r3, r1
 8003410:	431a      	orrs	r2, r3
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	621a      	str	r2, [r3, #32]
}
 8003416:	46c0      	nop			; (mov r8, r8)
 8003418:	46bd      	mov	sp, r7
 800341a:	b006      	add	sp, #24
 800341c:	bd80      	pop	{r7, pc}

0800341e <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800341e:	b580      	push	{r7, lr}
 8003420:	b084      	sub	sp, #16
 8003422:	af00      	add	r7, sp, #0
 8003424:	6078      	str	r0, [r7, #4]
 8003426:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2238      	movs	r2, #56	; 0x38
 800342c:	5c9b      	ldrb	r3, [r3, r2]
 800342e:	2b01      	cmp	r3, #1
 8003430:	d101      	bne.n	8003436 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003432:	2302      	movs	r3, #2
 8003434:	e032      	b.n	800349c <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	2238      	movs	r2, #56	; 0x38
 800343a:	2101      	movs	r1, #1
 800343c:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	2239      	movs	r2, #57	; 0x39
 8003442:	2102      	movs	r1, #2
 8003444:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	685b      	ldr	r3, [r3, #4]
 800344c:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	689b      	ldr	r3, [r3, #8]
 8003454:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	2270      	movs	r2, #112	; 0x70
 800345a:	4393      	bics	r3, r2
 800345c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800345e:	683b      	ldr	r3, [r7, #0]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	68fa      	ldr	r2, [r7, #12]
 8003464:	4313      	orrs	r3, r2
 8003466:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8003468:	68bb      	ldr	r3, [r7, #8]
 800346a:	2280      	movs	r2, #128	; 0x80
 800346c:	4393      	bics	r3, r2
 800346e:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	685b      	ldr	r3, [r3, #4]
 8003474:	68ba      	ldr	r2, [r7, #8]
 8003476:	4313      	orrs	r3, r2
 8003478:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	68fa      	ldr	r2, [r7, #12]
 8003480:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	68ba      	ldr	r2, [r7, #8]
 8003488:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	2239      	movs	r2, #57	; 0x39
 800348e:	2101      	movs	r1, #1
 8003490:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	2238      	movs	r2, #56	; 0x38
 8003496:	2100      	movs	r1, #0
 8003498:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800349a:	2300      	movs	r3, #0
}
 800349c:	0018      	movs	r0, r3
 800349e:	46bd      	mov	sp, r7
 80034a0:	b004      	add	sp, #16
 80034a2:	bd80      	pop	{r7, pc}

080034a4 <HAL_TIMEx_RemapConfig>:
  @endif
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_RemapConfig(TIM_HandleTypeDef *htim, uint32_t Remap)
{
 80034a4:	b580      	push	{r7, lr}
 80034a6:	b082      	sub	sp, #8
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
 80034ac:	6039      	str	r1, [r7, #0]
  __HAL_LOCK(htim);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	2238      	movs	r2, #56	; 0x38
 80034b2:	5c9b      	ldrb	r3, [r3, r2]
 80034b4:	2b01      	cmp	r3, #1
 80034b6:	d101      	bne.n	80034bc <HAL_TIMEx_RemapConfig+0x18>
 80034b8:	2302      	movs	r3, #2
 80034ba:	e00c      	b.n	80034d6 <HAL_TIMEx_RemapConfig+0x32>
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2238      	movs	r2, #56	; 0x38
 80034c0:	2101      	movs	r1, #1
 80034c2:	5499      	strb	r1, [r3, r2]

  /* Check parameters */
  assert_param(IS_TIM_REMAP(htim->Instance, Remap));

  /* Set the Timer remapping configuration */
  WRITE_REG(htim->Instance->OR, Remap);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	683a      	ldr	r2, [r7, #0]
 80034ca:	651a      	str	r2, [r3, #80]	; 0x50

  __HAL_UNLOCK(htim);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2238      	movs	r2, #56	; 0x38
 80034d0:	2100      	movs	r1, #0
 80034d2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80034d4:	2300      	movs	r3, #0
}
 80034d6:	0018      	movs	r0, r3
 80034d8:	46bd      	mov	sp, r7
 80034da:	b002      	add	sp, #8
 80034dc:	bd80      	pop	{r7, pc}
	...

080034e0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80034e0:	b580      	push	{r7, lr}
 80034e2:	b082      	sub	sp, #8
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d101      	bne.n	80034f2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80034ee:	2301      	movs	r3, #1
 80034f0:	e044      	b.n	800357c <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d107      	bne.n	800350a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	2270      	movs	r2, #112	; 0x70
 80034fe:	2100      	movs	r1, #0
 8003500:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	0018      	movs	r0, r3
 8003506:	f7fd ffe9 	bl	80014dc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	2224      	movs	r2, #36	; 0x24
 800350e:	675a      	str	r2, [r3, #116]	; 0x74

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	681a      	ldr	r2, [r3, #0]
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	2101      	movs	r1, #1
 800351c:	438a      	bics	r2, r1
 800351e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	0018      	movs	r0, r3
 8003524:	f000 fac6 	bl	8003ab4 <UART_SetConfig>
 8003528:	0003      	movs	r3, r0
 800352a:	2b01      	cmp	r3, #1
 800352c:	d101      	bne.n	8003532 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800352e:	2301      	movs	r3, #1
 8003530:	e024      	b.n	800357c <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003536:	2b00      	cmp	r3, #0
 8003538:	d003      	beq.n	8003542 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	0018      	movs	r0, r3
 800353e:	f000 fded 	bl	800411c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	685a      	ldr	r2, [r3, #4]
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	490d      	ldr	r1, [pc, #52]	; (8003584 <HAL_UART_Init+0xa4>)
 800354e:	400a      	ands	r2, r1
 8003550:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	689a      	ldr	r2, [r3, #8]
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	212a      	movs	r1, #42	; 0x2a
 800355e:	438a      	bics	r2, r1
 8003560:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	681a      	ldr	r2, [r3, #0]
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	2101      	movs	r1, #1
 800356e:	430a      	orrs	r2, r1
 8003570:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	0018      	movs	r0, r3
 8003576:	f000 fe85 	bl	8004284 <UART_CheckIdleState>
 800357a:	0003      	movs	r3, r0
}
 800357c:	0018      	movs	r0, r3
 800357e:	46bd      	mov	sp, r7
 8003580:	b002      	add	sp, #8
 8003582:	bd80      	pop	{r7, pc}
 8003584:	ffffb7ff 	.word	0xffffb7ff

08003588 <HAL_UART_Transmit>:
  * @param Size    Amount of data to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003588:	b580      	push	{r7, lr}
 800358a:	b08a      	sub	sp, #40	; 0x28
 800358c:	af02      	add	r7, sp, #8
 800358e:	60f8      	str	r0, [r7, #12]
 8003590:	60b9      	str	r1, [r7, #8]
 8003592:	603b      	str	r3, [r7, #0]
 8003594:	1dbb      	adds	r3, r7, #6
 8003596:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800359c:	2b20      	cmp	r3, #32
 800359e:	d000      	beq.n	80035a2 <HAL_UART_Transmit+0x1a>
 80035a0:	e094      	b.n	80036cc <HAL_UART_Transmit+0x144>
  {
    if ((pData == NULL) || (Size == 0U))
 80035a2:	68bb      	ldr	r3, [r7, #8]
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d003      	beq.n	80035b0 <HAL_UART_Transmit+0x28>
 80035a8:	1dbb      	adds	r3, r7, #6
 80035aa:	881b      	ldrh	r3, [r3, #0]
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d101      	bne.n	80035b4 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80035b0:	2301      	movs	r3, #1
 80035b2:	e08c      	b.n	80036ce <HAL_UART_Transmit+0x146>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	689a      	ldr	r2, [r3, #8]
 80035b8:	2380      	movs	r3, #128	; 0x80
 80035ba:	015b      	lsls	r3, r3, #5
 80035bc:	429a      	cmp	r2, r3
 80035be:	d109      	bne.n	80035d4 <HAL_UART_Transmit+0x4c>
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	691b      	ldr	r3, [r3, #16]
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d105      	bne.n	80035d4 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1) != 0)
 80035c8:	68bb      	ldr	r3, [r7, #8]
 80035ca:	2201      	movs	r2, #1
 80035cc:	4013      	ands	r3, r2
 80035ce:	d001      	beq.n	80035d4 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 80035d0:	2301      	movs	r3, #1
 80035d2:	e07c      	b.n	80036ce <HAL_UART_Transmit+0x146>
      }
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	2270      	movs	r2, #112	; 0x70
 80035d8:	5c9b      	ldrb	r3, [r3, r2]
 80035da:	2b01      	cmp	r3, #1
 80035dc:	d101      	bne.n	80035e2 <HAL_UART_Transmit+0x5a>
 80035de:	2302      	movs	r3, #2
 80035e0:	e075      	b.n	80036ce <HAL_UART_Transmit+0x146>
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	2270      	movs	r2, #112	; 0x70
 80035e6:	2101      	movs	r1, #1
 80035e8:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	2200      	movs	r2, #0
 80035ee:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	2221      	movs	r2, #33	; 0x21
 80035f4:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 80035f6:	f7fe f8ed 	bl	80017d4 <HAL_GetTick>
 80035fa:	0003      	movs	r3, r0
 80035fc:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	1dba      	adds	r2, r7, #6
 8003602:	2150      	movs	r1, #80	; 0x50
 8003604:	8812      	ldrh	r2, [r2, #0]
 8003606:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	1dba      	adds	r2, r7, #6
 800360c:	2152      	movs	r1, #82	; 0x52
 800360e:	8812      	ldrh	r2, [r2, #0]
 8003610:	525a      	strh	r2, [r3, r1]

        /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	689a      	ldr	r2, [r3, #8]
 8003616:	2380      	movs	r3, #128	; 0x80
 8003618:	015b      	lsls	r3, r3, #5
 800361a:	429a      	cmp	r2, r3
 800361c:	d108      	bne.n	8003630 <HAL_UART_Transmit+0xa8>
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	691b      	ldr	r3, [r3, #16]
 8003622:	2b00      	cmp	r3, #0
 8003624:	d104      	bne.n	8003630 <HAL_UART_Transmit+0xa8>
    {
      pdata8bits  = NULL;
 8003626:	2300      	movs	r3, #0
 8003628:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800362a:	68bb      	ldr	r3, [r7, #8]
 800362c:	61bb      	str	r3, [r7, #24]
 800362e:	e003      	b.n	8003638 <HAL_UART_Transmit+0xb0>
    }
    else
    {
      pdata8bits  = pData;
 8003630:	68bb      	ldr	r3, [r7, #8]
 8003632:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003634:	2300      	movs	r3, #0
 8003636:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003638:	e02c      	b.n	8003694 <HAL_UART_Transmit+0x10c>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800363a:	697a      	ldr	r2, [r7, #20]
 800363c:	68f8      	ldr	r0, [r7, #12]
 800363e:	683b      	ldr	r3, [r7, #0]
 8003640:	9300      	str	r3, [sp, #0]
 8003642:	0013      	movs	r3, r2
 8003644:	2200      	movs	r2, #0
 8003646:	2180      	movs	r1, #128	; 0x80
 8003648:	f000 fe62 	bl	8004310 <UART_WaitOnFlagUntilTimeout>
 800364c:	1e03      	subs	r3, r0, #0
 800364e:	d001      	beq.n	8003654 <HAL_UART_Transmit+0xcc>
      {
        return HAL_TIMEOUT;
 8003650:	2303      	movs	r3, #3
 8003652:	e03c      	b.n	80036ce <HAL_UART_Transmit+0x146>
      }
      if (pdata8bits == NULL)
 8003654:	69fb      	ldr	r3, [r7, #28]
 8003656:	2b00      	cmp	r3, #0
 8003658:	d10b      	bne.n	8003672 <HAL_UART_Transmit+0xea>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800365a:	69bb      	ldr	r3, [r7, #24]
 800365c:	881b      	ldrh	r3, [r3, #0]
 800365e:	001a      	movs	r2, r3
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	05d2      	lsls	r2, r2, #23
 8003666:	0dd2      	lsrs	r2, r2, #23
 8003668:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800366a:	69bb      	ldr	r3, [r7, #24]
 800366c:	3302      	adds	r3, #2
 800366e:	61bb      	str	r3, [r7, #24]
 8003670:	e007      	b.n	8003682 <HAL_UART_Transmit+0xfa>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003672:	69fb      	ldr	r3, [r7, #28]
 8003674:	781a      	ldrb	r2, [r3, #0]
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800367c:	69fb      	ldr	r3, [r7, #28]
 800367e:	3301      	adds	r3, #1
 8003680:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	2252      	movs	r2, #82	; 0x52
 8003686:	5a9b      	ldrh	r3, [r3, r2]
 8003688:	b29b      	uxth	r3, r3
 800368a:	3b01      	subs	r3, #1
 800368c:	b299      	uxth	r1, r3
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	2252      	movs	r2, #82	; 0x52
 8003692:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	2252      	movs	r2, #82	; 0x52
 8003698:	5a9b      	ldrh	r3, [r3, r2]
 800369a:	b29b      	uxth	r3, r3
 800369c:	2b00      	cmp	r3, #0
 800369e:	d1cc      	bne.n	800363a <HAL_UART_Transmit+0xb2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80036a0:	697a      	ldr	r2, [r7, #20]
 80036a2:	68f8      	ldr	r0, [r7, #12]
 80036a4:	683b      	ldr	r3, [r7, #0]
 80036a6:	9300      	str	r3, [sp, #0]
 80036a8:	0013      	movs	r3, r2
 80036aa:	2200      	movs	r2, #0
 80036ac:	2140      	movs	r1, #64	; 0x40
 80036ae:	f000 fe2f 	bl	8004310 <UART_WaitOnFlagUntilTimeout>
 80036b2:	1e03      	subs	r3, r0, #0
 80036b4:	d001      	beq.n	80036ba <HAL_UART_Transmit+0x132>
    {
      return HAL_TIMEOUT;
 80036b6:	2303      	movs	r3, #3
 80036b8:	e009      	b.n	80036ce <HAL_UART_Transmit+0x146>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	2220      	movs	r2, #32
 80036be:	675a      	str	r2, [r3, #116]	; 0x74

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	2270      	movs	r2, #112	; 0x70
 80036c4:	2100      	movs	r1, #0
 80036c6:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80036c8:	2300      	movs	r3, #0
 80036ca:	e000      	b.n	80036ce <HAL_UART_Transmit+0x146>
  }
  else
  {
    return HAL_BUSY;
 80036cc:	2302      	movs	r3, #2
  }
}
 80036ce:	0018      	movs	r0, r3
 80036d0:	46bd      	mov	sp, r7
 80036d2:	b008      	add	sp, #32
 80036d4:	bd80      	pop	{r7, pc}
	...

080036d8 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer.
  * @param Size  Amount of data to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80036d8:	b580      	push	{r7, lr}
 80036da:	b084      	sub	sp, #16
 80036dc:	af00      	add	r7, sp, #0
 80036de:	60f8      	str	r0, [r7, #12]
 80036e0:	60b9      	str	r1, [r7, #8]
 80036e2:	1dbb      	adds	r3, r7, #6
 80036e4:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80036ea:	2b20      	cmp	r3, #32
 80036ec:	d000      	beq.n	80036f0 <HAL_UART_Receive_IT+0x18>
 80036ee:	e09f      	b.n	8003830 <HAL_UART_Receive_IT+0x158>
  {
    if ((pData == NULL) || (Size == 0U))
 80036f0:	68bb      	ldr	r3, [r7, #8]
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d003      	beq.n	80036fe <HAL_UART_Receive_IT+0x26>
 80036f6:	1dbb      	adds	r3, r7, #6
 80036f8:	881b      	ldrh	r3, [r3, #0]
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d101      	bne.n	8003702 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80036fe:	2301      	movs	r3, #1
 8003700:	e097      	b.n	8003832 <HAL_UART_Receive_IT+0x15a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	689a      	ldr	r2, [r3, #8]
 8003706:	2380      	movs	r3, #128	; 0x80
 8003708:	015b      	lsls	r3, r3, #5
 800370a:	429a      	cmp	r2, r3
 800370c:	d109      	bne.n	8003722 <HAL_UART_Receive_IT+0x4a>
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	691b      	ldr	r3, [r3, #16]
 8003712:	2b00      	cmp	r3, #0
 8003714:	d105      	bne.n	8003722 <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1) != 0)
 8003716:	68bb      	ldr	r3, [r7, #8]
 8003718:	2201      	movs	r2, #1
 800371a:	4013      	ands	r3, r2
 800371c:	d001      	beq.n	8003722 <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 800371e:	2301      	movs	r3, #1
 8003720:	e087      	b.n	8003832 <HAL_UART_Receive_IT+0x15a>
      }
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	2270      	movs	r2, #112	; 0x70
 8003726:	5c9b      	ldrb	r3, [r3, r2]
 8003728:	2b01      	cmp	r3, #1
 800372a:	d101      	bne.n	8003730 <HAL_UART_Receive_IT+0x58>
 800372c:	2302      	movs	r3, #2
 800372e:	e080      	b.n	8003832 <HAL_UART_Receive_IT+0x15a>
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	2270      	movs	r2, #112	; 0x70
 8003734:	2101      	movs	r1, #1
 8003736:	5499      	strb	r1, [r3, r2]

    huart->pRxBuffPtr  = pData;
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	68ba      	ldr	r2, [r7, #8]
 800373c:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize  = Size;
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	1dba      	adds	r2, r7, #6
 8003742:	2158      	movs	r1, #88	; 0x58
 8003744:	8812      	ldrh	r2, [r2, #0]
 8003746:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	1dba      	adds	r2, r7, #6
 800374c:	215a      	movs	r1, #90	; 0x5a
 800374e:	8812      	ldrh	r2, [r2, #0]
 8003750:	525a      	strh	r2, [r3, r1]
    huart->RxISR       = NULL;
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	2200      	movs	r2, #0
 8003756:	661a      	str	r2, [r3, #96]	; 0x60

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	689a      	ldr	r2, [r3, #8]
 800375c:	2380      	movs	r3, #128	; 0x80
 800375e:	015b      	lsls	r3, r3, #5
 8003760:	429a      	cmp	r2, r3
 8003762:	d10d      	bne.n	8003780 <HAL_UART_Receive_IT+0xa8>
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	691b      	ldr	r3, [r3, #16]
 8003768:	2b00      	cmp	r3, #0
 800376a:	d104      	bne.n	8003776 <HAL_UART_Receive_IT+0x9e>
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	225c      	movs	r2, #92	; 0x5c
 8003770:	4932      	ldr	r1, [pc, #200]	; (800383c <HAL_UART_Receive_IT+0x164>)
 8003772:	5299      	strh	r1, [r3, r2]
 8003774:	e02e      	b.n	80037d4 <HAL_UART_Receive_IT+0xfc>
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	225c      	movs	r2, #92	; 0x5c
 800377a:	21ff      	movs	r1, #255	; 0xff
 800377c:	5299      	strh	r1, [r3, r2]
 800377e:	e029      	b.n	80037d4 <HAL_UART_Receive_IT+0xfc>
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	689b      	ldr	r3, [r3, #8]
 8003784:	2b00      	cmp	r3, #0
 8003786:	d10d      	bne.n	80037a4 <HAL_UART_Receive_IT+0xcc>
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	691b      	ldr	r3, [r3, #16]
 800378c:	2b00      	cmp	r3, #0
 800378e:	d104      	bne.n	800379a <HAL_UART_Receive_IT+0xc2>
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	225c      	movs	r2, #92	; 0x5c
 8003794:	21ff      	movs	r1, #255	; 0xff
 8003796:	5299      	strh	r1, [r3, r2]
 8003798:	e01c      	b.n	80037d4 <HAL_UART_Receive_IT+0xfc>
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	225c      	movs	r2, #92	; 0x5c
 800379e:	217f      	movs	r1, #127	; 0x7f
 80037a0:	5299      	strh	r1, [r3, r2]
 80037a2:	e017      	b.n	80037d4 <HAL_UART_Receive_IT+0xfc>
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	689a      	ldr	r2, [r3, #8]
 80037a8:	2380      	movs	r3, #128	; 0x80
 80037aa:	055b      	lsls	r3, r3, #21
 80037ac:	429a      	cmp	r2, r3
 80037ae:	d10d      	bne.n	80037cc <HAL_UART_Receive_IT+0xf4>
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	691b      	ldr	r3, [r3, #16]
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d104      	bne.n	80037c2 <HAL_UART_Receive_IT+0xea>
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	225c      	movs	r2, #92	; 0x5c
 80037bc:	217f      	movs	r1, #127	; 0x7f
 80037be:	5299      	strh	r1, [r3, r2]
 80037c0:	e008      	b.n	80037d4 <HAL_UART_Receive_IT+0xfc>
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	225c      	movs	r2, #92	; 0x5c
 80037c6:	213f      	movs	r1, #63	; 0x3f
 80037c8:	5299      	strh	r1, [r3, r2]
 80037ca:	e003      	b.n	80037d4 <HAL_UART_Receive_IT+0xfc>
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	225c      	movs	r2, #92	; 0x5c
 80037d0:	2100      	movs	r1, #0
 80037d2:	5299      	strh	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	2200      	movs	r2, #0
 80037d8:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	2222      	movs	r2, #34	; 0x22
 80037de:	679a      	str	r2, [r3, #120]	; 0x78

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	689a      	ldr	r2, [r3, #8]
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	2101      	movs	r1, #1
 80037ec:	430a      	orrs	r2, r1
 80037ee:	609a      	str	r2, [r3, #8]

    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	689a      	ldr	r2, [r3, #8]
 80037f4:	2380      	movs	r3, #128	; 0x80
 80037f6:	015b      	lsls	r3, r3, #5
 80037f8:	429a      	cmp	r2, r3
 80037fa:	d107      	bne.n	800380c <HAL_UART_Receive_IT+0x134>
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	691b      	ldr	r3, [r3, #16]
 8003800:	2b00      	cmp	r3, #0
 8003802:	d103      	bne.n	800380c <HAL_UART_Receive_IT+0x134>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	4a0e      	ldr	r2, [pc, #56]	; (8003840 <HAL_UART_Receive_IT+0x168>)
 8003808:	661a      	str	r2, [r3, #96]	; 0x60
 800380a:	e002      	b.n	8003812 <HAL_UART_Receive_IT+0x13a>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	4a0d      	ldr	r2, [pc, #52]	; (8003844 <HAL_UART_Receive_IT+0x16c>)
 8003810:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	2270      	movs	r2, #112	; 0x70
 8003816:	2100      	movs	r1, #0
 8003818:	5499      	strb	r1, [r3, r2]

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	681a      	ldr	r2, [r3, #0]
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	2190      	movs	r1, #144	; 0x90
 8003826:	0049      	lsls	r1, r1, #1
 8003828:	430a      	orrs	r2, r1
 800382a:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 800382c:	2300      	movs	r3, #0
 800382e:	e000      	b.n	8003832 <HAL_UART_Receive_IT+0x15a>
  }
  else
  {
    return HAL_BUSY;
 8003830:	2302      	movs	r3, #2
  }
}
 8003832:	0018      	movs	r0, r3
 8003834:	46bd      	mov	sp, r7
 8003836:	b004      	add	sp, #16
 8003838:	bd80      	pop	{r7, pc}
 800383a:	46c0      	nop			; (mov r8, r8)
 800383c:	000001ff 	.word	0x000001ff
 8003840:	08004505 	.word	0x08004505
 8003844:	08004449 	.word	0x08004449

08003848 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003848:	b580      	push	{r7, lr}
 800384a:	b088      	sub	sp, #32
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	69db      	ldr	r3, [r3, #28]
 8003856:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	689b      	ldr	r3, [r3, #8]
 8003866:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE));
 8003868:	69fb      	ldr	r3, [r7, #28]
 800386a:	220f      	movs	r2, #15
 800386c:	4013      	ands	r3, r2
 800386e:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8003870:	693b      	ldr	r3, [r7, #16]
 8003872:	2b00      	cmp	r3, #0
 8003874:	d112      	bne.n	800389c <HAL_UART_IRQHandler+0x54>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003876:	69fb      	ldr	r3, [r7, #28]
 8003878:	2220      	movs	r2, #32
 800387a:	4013      	ands	r3, r2
 800387c:	d00e      	beq.n	800389c <HAL_UART_IRQHandler+0x54>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800387e:	69bb      	ldr	r3, [r7, #24]
 8003880:	2220      	movs	r2, #32
 8003882:	4013      	ands	r3, r2
 8003884:	d00a      	beq.n	800389c <HAL_UART_IRQHandler+0x54>
    {
      if (huart->RxISR != NULL)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800388a:	2b00      	cmp	r3, #0
 800388c:	d100      	bne.n	8003890 <HAL_UART_IRQHandler+0x48>
 800388e:	e0f6      	b.n	8003a7e <HAL_UART_IRQHandler+0x236>
      {
        huart->RxISR(huart);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003894:	687a      	ldr	r2, [r7, #4]
 8003896:	0010      	movs	r0, r2
 8003898:	4798      	blx	r3
      }
      return;
 800389a:	e0f0      	b.n	8003a7e <HAL_UART_IRQHandler+0x236>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800389c:	693b      	ldr	r3, [r7, #16]
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d100      	bne.n	80038a4 <HAL_UART_IRQHandler+0x5c>
 80038a2:	e0b8      	b.n	8003a16 <HAL_UART_IRQHandler+0x1ce>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80038a4:	697b      	ldr	r3, [r7, #20]
 80038a6:	2201      	movs	r2, #1
 80038a8:	4013      	ands	r3, r2
 80038aa:	d105      	bne.n	80038b8 <HAL_UART_IRQHandler+0x70>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 80038ac:	69ba      	ldr	r2, [r7, #24]
 80038ae:	2390      	movs	r3, #144	; 0x90
 80038b0:	005b      	lsls	r3, r3, #1
 80038b2:	4013      	ands	r3, r2
 80038b4:	d100      	bne.n	80038b8 <HAL_UART_IRQHandler+0x70>
 80038b6:	e0ae      	b.n	8003a16 <HAL_UART_IRQHandler+0x1ce>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80038b8:	69fb      	ldr	r3, [r7, #28]
 80038ba:	2201      	movs	r2, #1
 80038bc:	4013      	ands	r3, r2
 80038be:	d00e      	beq.n	80038de <HAL_UART_IRQHandler+0x96>
 80038c0:	69ba      	ldr	r2, [r7, #24]
 80038c2:	2380      	movs	r3, #128	; 0x80
 80038c4:	005b      	lsls	r3, r3, #1
 80038c6:	4013      	ands	r3, r2
 80038c8:	d009      	beq.n	80038de <HAL_UART_IRQHandler+0x96>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	2201      	movs	r2, #1
 80038d0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80038d6:	2201      	movs	r2, #1
 80038d8:	431a      	orrs	r2, r3
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80038de:	69fb      	ldr	r3, [r7, #28]
 80038e0:	2202      	movs	r2, #2
 80038e2:	4013      	ands	r3, r2
 80038e4:	d00d      	beq.n	8003902 <HAL_UART_IRQHandler+0xba>
 80038e6:	697b      	ldr	r3, [r7, #20]
 80038e8:	2201      	movs	r2, #1
 80038ea:	4013      	ands	r3, r2
 80038ec:	d009      	beq.n	8003902 <HAL_UART_IRQHandler+0xba>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	2202      	movs	r2, #2
 80038f4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80038fa:	2204      	movs	r2, #4
 80038fc:	431a      	orrs	r2, r3
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003902:	69fb      	ldr	r3, [r7, #28]
 8003904:	2204      	movs	r2, #4
 8003906:	4013      	ands	r3, r2
 8003908:	d00d      	beq.n	8003926 <HAL_UART_IRQHandler+0xde>
 800390a:	697b      	ldr	r3, [r7, #20]
 800390c:	2201      	movs	r2, #1
 800390e:	4013      	ands	r3, r2
 8003910:	d009      	beq.n	8003926 <HAL_UART_IRQHandler+0xde>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	2204      	movs	r2, #4
 8003918:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800391e:	2202      	movs	r2, #2
 8003920:	431a      	orrs	r2, r3
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003926:	69fb      	ldr	r3, [r7, #28]
 8003928:	2208      	movs	r2, #8
 800392a:	4013      	ands	r3, r2
 800392c:	d011      	beq.n	8003952 <HAL_UART_IRQHandler+0x10a>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800392e:	69bb      	ldr	r3, [r7, #24]
 8003930:	2220      	movs	r2, #32
 8003932:	4013      	ands	r3, r2
 8003934:	d103      	bne.n	800393e <HAL_UART_IRQHandler+0xf6>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003936:	697b      	ldr	r3, [r7, #20]
 8003938:	2201      	movs	r2, #1
 800393a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800393c:	d009      	beq.n	8003952 <HAL_UART_IRQHandler+0x10a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	2208      	movs	r2, #8
 8003944:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800394a:	2208      	movs	r2, #8
 800394c:	431a      	orrs	r2, r3
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003956:	2b00      	cmp	r3, #0
 8003958:	d100      	bne.n	800395c <HAL_UART_IRQHandler+0x114>
 800395a:	e092      	b.n	8003a82 <HAL_UART_IRQHandler+0x23a>
    {
      /* UART in mode Receiver ---------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800395c:	69fb      	ldr	r3, [r7, #28]
 800395e:	2220      	movs	r2, #32
 8003960:	4013      	ands	r3, r2
 8003962:	d00c      	beq.n	800397e <HAL_UART_IRQHandler+0x136>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003964:	69bb      	ldr	r3, [r7, #24]
 8003966:	2220      	movs	r2, #32
 8003968:	4013      	ands	r3, r2
 800396a:	d008      	beq.n	800397e <HAL_UART_IRQHandler+0x136>
      {
        if (huart->RxISR != NULL)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003970:	2b00      	cmp	r3, #0
 8003972:	d004      	beq.n	800397e <HAL_UART_IRQHandler+0x136>
        {
          huart->RxISR(huart);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003978:	687a      	ldr	r2, [r7, #4]
 800397a:	0010      	movs	r0, r2
 800397c:	4798      	blx	r3
        }
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      errorcode = huart->ErrorCode;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003982:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	689b      	ldr	r3, [r3, #8]
 800398a:	2240      	movs	r2, #64	; 0x40
 800398c:	4013      	ands	r3, r2
 800398e:	2b40      	cmp	r3, #64	; 0x40
 8003990:	d003      	beq.n	800399a <HAL_UART_IRQHandler+0x152>
          ((errorcode & HAL_UART_ERROR_ORE) != 0U))
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	2208      	movs	r2, #8
 8003996:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003998:	d033      	beq.n	8003a02 <HAL_UART_IRQHandler+0x1ba>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	0018      	movs	r0, r3
 800399e:	f000 fd01 	bl	80043a4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	689b      	ldr	r3, [r3, #8]
 80039a8:	2240      	movs	r2, #64	; 0x40
 80039aa:	4013      	ands	r3, r2
 80039ac:	2b40      	cmp	r3, #64	; 0x40
 80039ae:	d123      	bne.n	80039f8 <HAL_UART_IRQHandler+0x1b0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	689a      	ldr	r2, [r3, #8]
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	2140      	movs	r1, #64	; 0x40
 80039bc:	438a      	bics	r2, r1
 80039be:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d012      	beq.n	80039ee <HAL_UART_IRQHandler+0x1a6>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80039cc:	4a30      	ldr	r2, [pc, #192]	; (8003a90 <HAL_UART_IRQHandler+0x248>)
 80039ce:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80039d4:	0018      	movs	r0, r3
 80039d6:	f7fd ffff 	bl	80019d8 <HAL_DMA_Abort_IT>
 80039da:	1e03      	subs	r3, r0, #0
 80039dc:	d019      	beq.n	8003a12 <HAL_UART_IRQHandler+0x1ca>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80039e2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80039e8:	0018      	movs	r0, r3
 80039ea:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80039ec:	e011      	b.n	8003a12 <HAL_UART_IRQHandler+0x1ca>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	0018      	movs	r0, r3
 80039f2:	f000 f857 	bl	8003aa4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80039f6:	e00c      	b.n	8003a12 <HAL_UART_IRQHandler+0x1ca>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	0018      	movs	r0, r3
 80039fc:	f000 f852 	bl	8003aa4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a00:	e007      	b.n	8003a12 <HAL_UART_IRQHandler+0x1ca>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	0018      	movs	r0, r3
 8003a06:	f000 f84d 	bl	8003aa4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 8003a10:	e037      	b.n	8003a82 <HAL_UART_IRQHandler+0x23a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a12:	46c0      	nop			; (mov r8, r8)
    return;
 8003a14:	e035      	b.n	8003a82 <HAL_UART_IRQHandler+0x23a>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003a16:	69fa      	ldr	r2, [r7, #28]
 8003a18:	2380      	movs	r3, #128	; 0x80
 8003a1a:	035b      	lsls	r3, r3, #13
 8003a1c:	4013      	ands	r3, r2
 8003a1e:	d00e      	beq.n	8003a3e <HAL_UART_IRQHandler+0x1f6>
 8003a20:	697a      	ldr	r2, [r7, #20]
 8003a22:	2380      	movs	r3, #128	; 0x80
 8003a24:	03db      	lsls	r3, r3, #15
 8003a26:	4013      	ands	r3, r2
 8003a28:	d009      	beq.n	8003a3e <HAL_UART_IRQHandler+0x1f6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	2280      	movs	r2, #128	; 0x80
 8003a30:	0352      	lsls	r2, r2, #13
 8003a32:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	0018      	movs	r0, r3
 8003a38:	f000 fdc2 	bl	80045c0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003a3c:	e024      	b.n	8003a88 <HAL_UART_IRQHandler+0x240>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003a3e:	69fb      	ldr	r3, [r7, #28]
 8003a40:	2280      	movs	r2, #128	; 0x80
 8003a42:	4013      	ands	r3, r2
 8003a44:	d00d      	beq.n	8003a62 <HAL_UART_IRQHandler+0x21a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003a46:	69bb      	ldr	r3, [r7, #24]
 8003a48:	2280      	movs	r2, #128	; 0x80
 8003a4a:	4013      	ands	r3, r2
 8003a4c:	d009      	beq.n	8003a62 <HAL_UART_IRQHandler+0x21a>
  {
    if (huart->TxISR != NULL)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d017      	beq.n	8003a86 <HAL_UART_IRQHandler+0x23e>
    {
      huart->TxISR(huart);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003a5a:	687a      	ldr	r2, [r7, #4]
 8003a5c:	0010      	movs	r0, r2
 8003a5e:	4798      	blx	r3
    }
    return;
 8003a60:	e011      	b.n	8003a86 <HAL_UART_IRQHandler+0x23e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003a62:	69fb      	ldr	r3, [r7, #28]
 8003a64:	2240      	movs	r2, #64	; 0x40
 8003a66:	4013      	ands	r3, r2
 8003a68:	d00e      	beq.n	8003a88 <HAL_UART_IRQHandler+0x240>
 8003a6a:	69bb      	ldr	r3, [r7, #24]
 8003a6c:	2240      	movs	r2, #64	; 0x40
 8003a6e:	4013      	ands	r3, r2
 8003a70:	d00a      	beq.n	8003a88 <HAL_UART_IRQHandler+0x240>
  {
    UART_EndTransmit_IT(huart);
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	0018      	movs	r0, r3
 8003a76:	f000 fccc 	bl	8004412 <UART_EndTransmit_IT>
    return;
 8003a7a:	46c0      	nop			; (mov r8, r8)
 8003a7c:	e004      	b.n	8003a88 <HAL_UART_IRQHandler+0x240>
      return;
 8003a7e:	46c0      	nop			; (mov r8, r8)
 8003a80:	e002      	b.n	8003a88 <HAL_UART_IRQHandler+0x240>
    return;
 8003a82:	46c0      	nop			; (mov r8, r8)
 8003a84:	e000      	b.n	8003a88 <HAL_UART_IRQHandler+0x240>
    return;
 8003a86:	46c0      	nop			; (mov r8, r8)
  }

}
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	b008      	add	sp, #32
 8003a8c:	bd80      	pop	{r7, pc}
 8003a8e:	46c0      	nop			; (mov r8, r8)
 8003a90:	080043e5 	.word	0x080043e5

08003a94 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003a94:	b580      	push	{r7, lr}
 8003a96:	b082      	sub	sp, #8
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003a9c:	46c0      	nop			; (mov r8, r8)
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	b002      	add	sp, #8
 8003aa2:	bd80      	pop	{r7, pc}

08003aa4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	b082      	sub	sp, #8
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003aac:	46c0      	nop			; (mov r8, r8)
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	b002      	add	sp, #8
 8003ab2:	bd80      	pop	{r7, pc}

08003ab4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003ab4:	b5b0      	push	{r4, r5, r7, lr}
 8003ab6:	b08e      	sub	sp, #56	; 0x38
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 8003abc:	231b      	movs	r3, #27
 8003abe:	2218      	movs	r2, #24
 8003ac0:	4694      	mov	ip, r2
 8003ac2:	44bc      	add	ip, r7
 8003ac4:	4463      	add	r3, ip
 8003ac6:	2210      	movs	r2, #16
 8003ac8:	701a      	strb	r2, [r3, #0]
  uint32_t usartdiv                   = 0x00000000U;
 8003aca:	2300      	movs	r3, #0
 8003acc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef ret               = HAL_OK;
 8003ace:	2313      	movs	r3, #19
 8003ad0:	2218      	movs	r2, #24
 8003ad2:	4694      	mov	ip, r2
 8003ad4:	44bc      	add	ip, r7
 8003ad6:	4463      	add	r3, ip
 8003ad8:	2200      	movs	r2, #0
 8003ada:	701a      	strb	r2, [r3, #0]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8003adc:	2300      	movs	r3, #0
 8003ade:	627b      	str	r3, [r7, #36]	; 0x24
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003ae0:	69fb      	ldr	r3, [r7, #28]
 8003ae2:	689a      	ldr	r2, [r3, #8]
 8003ae4:	69fb      	ldr	r3, [r7, #28]
 8003ae6:	691b      	ldr	r3, [r3, #16]
 8003ae8:	431a      	orrs	r2, r3
 8003aea:	69fb      	ldr	r3, [r7, #28]
 8003aec:	695b      	ldr	r3, [r3, #20]
 8003aee:	431a      	orrs	r2, r3
 8003af0:	69fb      	ldr	r3, [r7, #28]
 8003af2:	69db      	ldr	r3, [r3, #28]
 8003af4:	4313      	orrs	r3, r2
 8003af6:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003af8:	69fb      	ldr	r3, [r7, #28]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	4aca      	ldr	r2, [pc, #808]	; (8003e28 <UART_SetConfig+0x374>)
 8003b00:	4013      	ands	r3, r2
 8003b02:	0019      	movs	r1, r3
 8003b04:	69fb      	ldr	r3, [r7, #28]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003b0a:	430a      	orrs	r2, r1
 8003b0c:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003b0e:	69fb      	ldr	r3, [r7, #28]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	685b      	ldr	r3, [r3, #4]
 8003b14:	4ac5      	ldr	r2, [pc, #788]	; (8003e2c <UART_SetConfig+0x378>)
 8003b16:	4013      	ands	r3, r2
 8003b18:	0019      	movs	r1, r3
 8003b1a:	69fb      	ldr	r3, [r7, #28]
 8003b1c:	68da      	ldr	r2, [r3, #12]
 8003b1e:	69fb      	ldr	r3, [r7, #28]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	430a      	orrs	r2, r1
 8003b24:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003b26:	69fb      	ldr	r3, [r7, #28]
 8003b28:	699b      	ldr	r3, [r3, #24]
 8003b2a:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003b2c:	69fb      	ldr	r3, [r7, #28]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	4abf      	ldr	r2, [pc, #764]	; (8003e30 <UART_SetConfig+0x37c>)
 8003b32:	4293      	cmp	r3, r2
 8003b34:	d004      	beq.n	8003b40 <UART_SetConfig+0x8c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003b36:	69fb      	ldr	r3, [r7, #28]
 8003b38:	6a1b      	ldr	r3, [r3, #32]
 8003b3a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003b3c:	4313      	orrs	r3, r2
 8003b3e:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003b40:	69fb      	ldr	r3, [r7, #28]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	689b      	ldr	r3, [r3, #8]
 8003b46:	4abb      	ldr	r2, [pc, #748]	; (8003e34 <UART_SetConfig+0x380>)
 8003b48:	4013      	ands	r3, r2
 8003b4a:	0019      	movs	r1, r3
 8003b4c:	69fb      	ldr	r3, [r7, #28]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003b52:	430a      	orrs	r2, r1
 8003b54:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003b56:	69fb      	ldr	r3, [r7, #28]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	4ab7      	ldr	r2, [pc, #732]	; (8003e38 <UART_SetConfig+0x384>)
 8003b5c:	4293      	cmp	r3, r2
 8003b5e:	d134      	bne.n	8003bca <UART_SetConfig+0x116>
 8003b60:	4bb6      	ldr	r3, [pc, #728]	; (8003e3c <UART_SetConfig+0x388>)
 8003b62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b64:	2203      	movs	r2, #3
 8003b66:	4013      	ands	r3, r2
 8003b68:	2b01      	cmp	r3, #1
 8003b6a:	d015      	beq.n	8003b98 <UART_SetConfig+0xe4>
 8003b6c:	d304      	bcc.n	8003b78 <UART_SetConfig+0xc4>
 8003b6e:	2b02      	cmp	r3, #2
 8003b70:	d00a      	beq.n	8003b88 <UART_SetConfig+0xd4>
 8003b72:	2b03      	cmp	r3, #3
 8003b74:	d018      	beq.n	8003ba8 <UART_SetConfig+0xf4>
 8003b76:	e01f      	b.n	8003bb8 <UART_SetConfig+0x104>
 8003b78:	231b      	movs	r3, #27
 8003b7a:	2218      	movs	r2, #24
 8003b7c:	4694      	mov	ip, r2
 8003b7e:	44bc      	add	ip, r7
 8003b80:	4463      	add	r3, ip
 8003b82:	2201      	movs	r2, #1
 8003b84:	701a      	strb	r2, [r3, #0]
 8003b86:	e0c5      	b.n	8003d14 <UART_SetConfig+0x260>
 8003b88:	231b      	movs	r3, #27
 8003b8a:	2218      	movs	r2, #24
 8003b8c:	4694      	mov	ip, r2
 8003b8e:	44bc      	add	ip, r7
 8003b90:	4463      	add	r3, ip
 8003b92:	2202      	movs	r2, #2
 8003b94:	701a      	strb	r2, [r3, #0]
 8003b96:	e0bd      	b.n	8003d14 <UART_SetConfig+0x260>
 8003b98:	231b      	movs	r3, #27
 8003b9a:	2218      	movs	r2, #24
 8003b9c:	4694      	mov	ip, r2
 8003b9e:	44bc      	add	ip, r7
 8003ba0:	4463      	add	r3, ip
 8003ba2:	2204      	movs	r2, #4
 8003ba4:	701a      	strb	r2, [r3, #0]
 8003ba6:	e0b5      	b.n	8003d14 <UART_SetConfig+0x260>
 8003ba8:	231b      	movs	r3, #27
 8003baa:	2218      	movs	r2, #24
 8003bac:	4694      	mov	ip, r2
 8003bae:	44bc      	add	ip, r7
 8003bb0:	4463      	add	r3, ip
 8003bb2:	2208      	movs	r2, #8
 8003bb4:	701a      	strb	r2, [r3, #0]
 8003bb6:	e0ad      	b.n	8003d14 <UART_SetConfig+0x260>
 8003bb8:	231b      	movs	r3, #27
 8003bba:	2218      	movs	r2, #24
 8003bbc:	4694      	mov	ip, r2
 8003bbe:	44bc      	add	ip, r7
 8003bc0:	4463      	add	r3, ip
 8003bc2:	2210      	movs	r2, #16
 8003bc4:	701a      	strb	r2, [r3, #0]
 8003bc6:	46c0      	nop			; (mov r8, r8)
 8003bc8:	e0a4      	b.n	8003d14 <UART_SetConfig+0x260>
 8003bca:	69fb      	ldr	r3, [r7, #28]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	4a9c      	ldr	r2, [pc, #624]	; (8003e40 <UART_SetConfig+0x38c>)
 8003bd0:	4293      	cmp	r3, r2
 8003bd2:	d137      	bne.n	8003c44 <UART_SetConfig+0x190>
 8003bd4:	4b99      	ldr	r3, [pc, #612]	; (8003e3c <UART_SetConfig+0x388>)
 8003bd6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bd8:	220c      	movs	r2, #12
 8003bda:	4013      	ands	r3, r2
 8003bdc:	2b04      	cmp	r3, #4
 8003bde:	d018      	beq.n	8003c12 <UART_SetConfig+0x15e>
 8003be0:	d802      	bhi.n	8003be8 <UART_SetConfig+0x134>
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d005      	beq.n	8003bf2 <UART_SetConfig+0x13e>
 8003be6:	e024      	b.n	8003c32 <UART_SetConfig+0x17e>
 8003be8:	2b08      	cmp	r3, #8
 8003bea:	d00a      	beq.n	8003c02 <UART_SetConfig+0x14e>
 8003bec:	2b0c      	cmp	r3, #12
 8003bee:	d018      	beq.n	8003c22 <UART_SetConfig+0x16e>
 8003bf0:	e01f      	b.n	8003c32 <UART_SetConfig+0x17e>
 8003bf2:	231b      	movs	r3, #27
 8003bf4:	2218      	movs	r2, #24
 8003bf6:	4694      	mov	ip, r2
 8003bf8:	44bc      	add	ip, r7
 8003bfa:	4463      	add	r3, ip
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	701a      	strb	r2, [r3, #0]
 8003c00:	e088      	b.n	8003d14 <UART_SetConfig+0x260>
 8003c02:	231b      	movs	r3, #27
 8003c04:	2218      	movs	r2, #24
 8003c06:	4694      	mov	ip, r2
 8003c08:	44bc      	add	ip, r7
 8003c0a:	4463      	add	r3, ip
 8003c0c:	2202      	movs	r2, #2
 8003c0e:	701a      	strb	r2, [r3, #0]
 8003c10:	e080      	b.n	8003d14 <UART_SetConfig+0x260>
 8003c12:	231b      	movs	r3, #27
 8003c14:	2218      	movs	r2, #24
 8003c16:	4694      	mov	ip, r2
 8003c18:	44bc      	add	ip, r7
 8003c1a:	4463      	add	r3, ip
 8003c1c:	2204      	movs	r2, #4
 8003c1e:	701a      	strb	r2, [r3, #0]
 8003c20:	e078      	b.n	8003d14 <UART_SetConfig+0x260>
 8003c22:	231b      	movs	r3, #27
 8003c24:	2218      	movs	r2, #24
 8003c26:	4694      	mov	ip, r2
 8003c28:	44bc      	add	ip, r7
 8003c2a:	4463      	add	r3, ip
 8003c2c:	2208      	movs	r2, #8
 8003c2e:	701a      	strb	r2, [r3, #0]
 8003c30:	e070      	b.n	8003d14 <UART_SetConfig+0x260>
 8003c32:	231b      	movs	r3, #27
 8003c34:	2218      	movs	r2, #24
 8003c36:	4694      	mov	ip, r2
 8003c38:	44bc      	add	ip, r7
 8003c3a:	4463      	add	r3, ip
 8003c3c:	2210      	movs	r2, #16
 8003c3e:	701a      	strb	r2, [r3, #0]
 8003c40:	46c0      	nop			; (mov r8, r8)
 8003c42:	e067      	b.n	8003d14 <UART_SetConfig+0x260>
 8003c44:	69fb      	ldr	r3, [r7, #28]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	4a7e      	ldr	r2, [pc, #504]	; (8003e44 <UART_SetConfig+0x390>)
 8003c4a:	4293      	cmp	r3, r2
 8003c4c:	d107      	bne.n	8003c5e <UART_SetConfig+0x1aa>
 8003c4e:	231b      	movs	r3, #27
 8003c50:	2218      	movs	r2, #24
 8003c52:	4694      	mov	ip, r2
 8003c54:	44bc      	add	ip, r7
 8003c56:	4463      	add	r3, ip
 8003c58:	2200      	movs	r2, #0
 8003c5a:	701a      	strb	r2, [r3, #0]
 8003c5c:	e05a      	b.n	8003d14 <UART_SetConfig+0x260>
 8003c5e:	69fb      	ldr	r3, [r7, #28]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	4a79      	ldr	r2, [pc, #484]	; (8003e48 <UART_SetConfig+0x394>)
 8003c64:	4293      	cmp	r3, r2
 8003c66:	d107      	bne.n	8003c78 <UART_SetConfig+0x1c4>
 8003c68:	231b      	movs	r3, #27
 8003c6a:	2218      	movs	r2, #24
 8003c6c:	4694      	mov	ip, r2
 8003c6e:	44bc      	add	ip, r7
 8003c70:	4463      	add	r3, ip
 8003c72:	2200      	movs	r2, #0
 8003c74:	701a      	strb	r2, [r3, #0]
 8003c76:	e04d      	b.n	8003d14 <UART_SetConfig+0x260>
 8003c78:	69fb      	ldr	r3, [r7, #28]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	4a6c      	ldr	r2, [pc, #432]	; (8003e30 <UART_SetConfig+0x37c>)
 8003c7e:	4293      	cmp	r3, r2
 8003c80:	d141      	bne.n	8003d06 <UART_SetConfig+0x252>
 8003c82:	4b6e      	ldr	r3, [pc, #440]	; (8003e3c <UART_SetConfig+0x388>)
 8003c84:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003c86:	23c0      	movs	r3, #192	; 0xc0
 8003c88:	011b      	lsls	r3, r3, #4
 8003c8a:	4013      	ands	r3, r2
 8003c8c:	2280      	movs	r2, #128	; 0x80
 8003c8e:	00d2      	lsls	r2, r2, #3
 8003c90:	4293      	cmp	r3, r2
 8003c92:	d01f      	beq.n	8003cd4 <UART_SetConfig+0x220>
 8003c94:	2280      	movs	r2, #128	; 0x80
 8003c96:	00d2      	lsls	r2, r2, #3
 8003c98:	4293      	cmp	r3, r2
 8003c9a:	d802      	bhi.n	8003ca2 <UART_SetConfig+0x1ee>
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d009      	beq.n	8003cb4 <UART_SetConfig+0x200>
 8003ca0:	e028      	b.n	8003cf4 <UART_SetConfig+0x240>
 8003ca2:	2280      	movs	r2, #128	; 0x80
 8003ca4:	0112      	lsls	r2, r2, #4
 8003ca6:	4293      	cmp	r3, r2
 8003ca8:	d00c      	beq.n	8003cc4 <UART_SetConfig+0x210>
 8003caa:	22c0      	movs	r2, #192	; 0xc0
 8003cac:	0112      	lsls	r2, r2, #4
 8003cae:	4293      	cmp	r3, r2
 8003cb0:	d018      	beq.n	8003ce4 <UART_SetConfig+0x230>
 8003cb2:	e01f      	b.n	8003cf4 <UART_SetConfig+0x240>
 8003cb4:	231b      	movs	r3, #27
 8003cb6:	2218      	movs	r2, #24
 8003cb8:	4694      	mov	ip, r2
 8003cba:	44bc      	add	ip, r7
 8003cbc:	4463      	add	r3, ip
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	701a      	strb	r2, [r3, #0]
 8003cc2:	e027      	b.n	8003d14 <UART_SetConfig+0x260>
 8003cc4:	231b      	movs	r3, #27
 8003cc6:	2218      	movs	r2, #24
 8003cc8:	4694      	mov	ip, r2
 8003cca:	44bc      	add	ip, r7
 8003ccc:	4463      	add	r3, ip
 8003cce:	2202      	movs	r2, #2
 8003cd0:	701a      	strb	r2, [r3, #0]
 8003cd2:	e01f      	b.n	8003d14 <UART_SetConfig+0x260>
 8003cd4:	231b      	movs	r3, #27
 8003cd6:	2218      	movs	r2, #24
 8003cd8:	4694      	mov	ip, r2
 8003cda:	44bc      	add	ip, r7
 8003cdc:	4463      	add	r3, ip
 8003cde:	2204      	movs	r2, #4
 8003ce0:	701a      	strb	r2, [r3, #0]
 8003ce2:	e017      	b.n	8003d14 <UART_SetConfig+0x260>
 8003ce4:	231b      	movs	r3, #27
 8003ce6:	2218      	movs	r2, #24
 8003ce8:	4694      	mov	ip, r2
 8003cea:	44bc      	add	ip, r7
 8003cec:	4463      	add	r3, ip
 8003cee:	2208      	movs	r2, #8
 8003cf0:	701a      	strb	r2, [r3, #0]
 8003cf2:	e00f      	b.n	8003d14 <UART_SetConfig+0x260>
 8003cf4:	231b      	movs	r3, #27
 8003cf6:	2218      	movs	r2, #24
 8003cf8:	4694      	mov	ip, r2
 8003cfa:	44bc      	add	ip, r7
 8003cfc:	4463      	add	r3, ip
 8003cfe:	2210      	movs	r2, #16
 8003d00:	701a      	strb	r2, [r3, #0]
 8003d02:	46c0      	nop			; (mov r8, r8)
 8003d04:	e006      	b.n	8003d14 <UART_SetConfig+0x260>
 8003d06:	231b      	movs	r3, #27
 8003d08:	2218      	movs	r2, #24
 8003d0a:	4694      	mov	ip, r2
 8003d0c:	44bc      	add	ip, r7
 8003d0e:	4463      	add	r3, ip
 8003d10:	2210      	movs	r2, #16
 8003d12:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003d14:	69fb      	ldr	r3, [r7, #28]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	4a45      	ldr	r2, [pc, #276]	; (8003e30 <UART_SetConfig+0x37c>)
 8003d1a:	4293      	cmp	r3, r2
 8003d1c:	d000      	beq.n	8003d20 <UART_SetConfig+0x26c>
 8003d1e:	e09d      	b.n	8003e5c <UART_SetConfig+0x3a8>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003d20:	231b      	movs	r3, #27
 8003d22:	2218      	movs	r2, #24
 8003d24:	4694      	mov	ip, r2
 8003d26:	44bc      	add	ip, r7
 8003d28:	4463      	add	r3, ip
 8003d2a:	781b      	ldrb	r3, [r3, #0]
 8003d2c:	2b02      	cmp	r3, #2
 8003d2e:	d00d      	beq.n	8003d4c <UART_SetConfig+0x298>
 8003d30:	dc02      	bgt.n	8003d38 <UART_SetConfig+0x284>
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d005      	beq.n	8003d42 <UART_SetConfig+0x28e>
 8003d36:	e01d      	b.n	8003d74 <UART_SetConfig+0x2c0>
 8003d38:	2b04      	cmp	r3, #4
 8003d3a:	d012      	beq.n	8003d62 <UART_SetConfig+0x2ae>
 8003d3c:	2b08      	cmp	r3, #8
 8003d3e:	d015      	beq.n	8003d6c <UART_SetConfig+0x2b8>
 8003d40:	e018      	b.n	8003d74 <UART_SetConfig+0x2c0>
    {
      case UART_CLOCKSOURCE_PCLK1:
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 8003d42:	f7fe ff37 	bl	8002bb4 <HAL_RCC_GetPCLK1Freq>
 8003d46:	0003      	movs	r3, r0
 8003d48:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003d4a:	e01b      	b.n	8003d84 <UART_SetConfig+0x2d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003d4c:	4b3b      	ldr	r3, [pc, #236]	; (8003e3c <UART_SetConfig+0x388>)
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	2210      	movs	r2, #16
 8003d52:	4013      	ands	r3, r2
 8003d54:	d002      	beq.n	8003d5c <UART_SetConfig+0x2a8>
        {
          lpuart_ker_ck_pres = (uint32_t)(HSI_VALUE >> 2U);
 8003d56:	4b3d      	ldr	r3, [pc, #244]	; (8003e4c <UART_SetConfig+0x398>)
 8003d58:	627b      	str	r3, [r7, #36]	; 0x24
        }
        else
        {
          lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
        }
        break;
 8003d5a:	e013      	b.n	8003d84 <UART_SetConfig+0x2d0>
          lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 8003d5c:	4b3c      	ldr	r3, [pc, #240]	; (8003e50 <UART_SetConfig+0x39c>)
 8003d5e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003d60:	e010      	b.n	8003d84 <UART_SetConfig+0x2d0>
      case UART_CLOCKSOURCE_SYSCLK:
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 8003d62:	f7fe fe99 	bl	8002a98 <HAL_RCC_GetSysClockFreq>
 8003d66:	0003      	movs	r3, r0
 8003d68:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003d6a:	e00b      	b.n	8003d84 <UART_SetConfig+0x2d0>
      case UART_CLOCKSOURCE_LSE:
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 8003d6c:	2380      	movs	r3, #128	; 0x80
 8003d6e:	021b      	lsls	r3, r3, #8
 8003d70:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003d72:	e007      	b.n	8003d84 <UART_SetConfig+0x2d0>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8003d74:	2313      	movs	r3, #19
 8003d76:	2218      	movs	r2, #24
 8003d78:	4694      	mov	ip, r2
 8003d7a:	44bc      	add	ip, r7
 8003d7c:	4463      	add	r3, ip
 8003d7e:	2201      	movs	r2, #1
 8003d80:	701a      	strb	r2, [r3, #0]
        break;
 8003d82:	46c0      	nop			; (mov r8, r8)
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 8003d84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d100      	bne.n	8003d8c <UART_SetConfig+0x2d8>
 8003d8a:	e1a6      	b.n	80040da <UART_SetConfig+0x626>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003d8c:	69fb      	ldr	r3, [r7, #28]
 8003d8e:	685a      	ldr	r2, [r3, #4]
 8003d90:	0013      	movs	r3, r2
 8003d92:	005b      	lsls	r3, r3, #1
 8003d94:	189b      	adds	r3, r3, r2
 8003d96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d98:	429a      	cmp	r2, r3
 8003d9a:	d305      	bcc.n	8003da8 <UART_SetConfig+0x2f4>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003d9c:	69fb      	ldr	r3, [r7, #28]
 8003d9e:	685b      	ldr	r3, [r3, #4]
 8003da0:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003da2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003da4:	429a      	cmp	r2, r3
 8003da6:	d907      	bls.n	8003db8 <UART_SetConfig+0x304>
      {
        ret = HAL_ERROR;
 8003da8:	2313      	movs	r3, #19
 8003daa:	2218      	movs	r2, #24
 8003dac:	4694      	mov	ip, r2
 8003dae:	44bc      	add	ip, r7
 8003db0:	4463      	add	r3, ip
 8003db2:	2201      	movs	r2, #1
 8003db4:	701a      	strb	r2, [r3, #0]
 8003db6:	e190      	b.n	80040da <UART_SetConfig+0x626>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(lpuart_ker_ck_pres, huart->Init.BaudRate));
 8003db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dba:	613b      	str	r3, [r7, #16]
 8003dbc:	2300      	movs	r3, #0
 8003dbe:	617b      	str	r3, [r7, #20]
 8003dc0:	6939      	ldr	r1, [r7, #16]
 8003dc2:	697a      	ldr	r2, [r7, #20]
 8003dc4:	000b      	movs	r3, r1
 8003dc6:	0e1b      	lsrs	r3, r3, #24
 8003dc8:	0010      	movs	r0, r2
 8003dca:	0205      	lsls	r5, r0, #8
 8003dcc:	431d      	orrs	r5, r3
 8003dce:	000b      	movs	r3, r1
 8003dd0:	021c      	lsls	r4, r3, #8
 8003dd2:	69fb      	ldr	r3, [r7, #28]
 8003dd4:	685b      	ldr	r3, [r3, #4]
 8003dd6:	085b      	lsrs	r3, r3, #1
 8003dd8:	60bb      	str	r3, [r7, #8]
 8003dda:	2300      	movs	r3, #0
 8003ddc:	60fb      	str	r3, [r7, #12]
 8003dde:	68b8      	ldr	r0, [r7, #8]
 8003de0:	68f9      	ldr	r1, [r7, #12]
 8003de2:	1900      	adds	r0, r0, r4
 8003de4:	4169      	adcs	r1, r5
 8003de6:	69fb      	ldr	r3, [r7, #28]
 8003de8:	685b      	ldr	r3, [r3, #4]
 8003dea:	603b      	str	r3, [r7, #0]
 8003dec:	2300      	movs	r3, #0
 8003dee:	607b      	str	r3, [r7, #4]
 8003df0:	683a      	ldr	r2, [r7, #0]
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	f7fc fa14 	bl	8000220 <__aeabi_uldivmod>
 8003df8:	0003      	movs	r3, r0
 8003dfa:	000c      	movs	r4, r1
 8003dfc:	62fb      	str	r3, [r7, #44]	; 0x2c

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003dfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e00:	4a14      	ldr	r2, [pc, #80]	; (8003e54 <UART_SetConfig+0x3a0>)
 8003e02:	4293      	cmp	r3, r2
 8003e04:	d908      	bls.n	8003e18 <UART_SetConfig+0x364>
 8003e06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e08:	4a13      	ldr	r2, [pc, #76]	; (8003e58 <UART_SetConfig+0x3a4>)
 8003e0a:	4293      	cmp	r3, r2
 8003e0c:	d804      	bhi.n	8003e18 <UART_SetConfig+0x364>
        {
          huart->Instance->BRR = usartdiv;
 8003e0e:	69fb      	ldr	r3, [r7, #28]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003e14:	60da      	str	r2, [r3, #12]
 8003e16:	e160      	b.n	80040da <UART_SetConfig+0x626>
        }
        else
        {
          ret = HAL_ERROR;
 8003e18:	2313      	movs	r3, #19
 8003e1a:	2218      	movs	r2, #24
 8003e1c:	4694      	mov	ip, r2
 8003e1e:	44bc      	add	ip, r7
 8003e20:	4463      	add	r3, ip
 8003e22:	2201      	movs	r2, #1
 8003e24:	701a      	strb	r2, [r3, #0]
 8003e26:	e158      	b.n	80040da <UART_SetConfig+0x626>
 8003e28:	efff69f3 	.word	0xefff69f3
 8003e2c:	ffffcfff 	.word	0xffffcfff
 8003e30:	40004800 	.word	0x40004800
 8003e34:	fffff4ff 	.word	0xfffff4ff
 8003e38:	40013800 	.word	0x40013800
 8003e3c:	40021000 	.word	0x40021000
 8003e40:	40004400 	.word	0x40004400
 8003e44:	40004c00 	.word	0x40004c00
 8003e48:	40005000 	.word	0x40005000
 8003e4c:	003d0900 	.word	0x003d0900
 8003e50:	00f42400 	.word	0x00f42400
 8003e54:	000002ff 	.word	0x000002ff
 8003e58:	000fffff 	.word	0x000fffff
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003e5c:	69fb      	ldr	r3, [r7, #28]
 8003e5e:	69da      	ldr	r2, [r3, #28]
 8003e60:	2380      	movs	r3, #128	; 0x80
 8003e62:	021b      	lsls	r3, r3, #8
 8003e64:	429a      	cmp	r2, r3
 8003e66:	d000      	beq.n	8003e6a <UART_SetConfig+0x3b6>
 8003e68:	e0a9      	b.n	8003fbe <UART_SetConfig+0x50a>
  {
    switch (clocksource)
 8003e6a:	231b      	movs	r3, #27
 8003e6c:	2218      	movs	r2, #24
 8003e6e:	4694      	mov	ip, r2
 8003e70:	44bc      	add	ip, r7
 8003e72:	4463      	add	r3, ip
 8003e74:	781b      	ldrb	r3, [r3, #0]
 8003e76:	2b08      	cmp	r3, #8
 8003e78:	d86d      	bhi.n	8003f56 <UART_SetConfig+0x4a2>
 8003e7a:	009a      	lsls	r2, r3, #2
 8003e7c:	4b9f      	ldr	r3, [pc, #636]	; (80040fc <UART_SetConfig+0x648>)
 8003e7e:	18d3      	adds	r3, r2, r3
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8003e84:	f7fe fe96 	bl	8002bb4 <HAL_RCC_GetPCLK1Freq>
 8003e88:	0003      	movs	r3, r0
 8003e8a:	005a      	lsls	r2, r3, #1
 8003e8c:	69fb      	ldr	r3, [r7, #28]
 8003e8e:	685b      	ldr	r3, [r3, #4]
 8003e90:	085b      	lsrs	r3, r3, #1
 8003e92:	18d2      	adds	r2, r2, r3
 8003e94:	69fb      	ldr	r3, [r7, #28]
 8003e96:	685b      	ldr	r3, [r3, #4]
 8003e98:	0019      	movs	r1, r3
 8003e9a:	0010      	movs	r0, r2
 8003e9c:	f7fc f934 	bl	8000108 <__udivsi3>
 8003ea0:	0003      	movs	r3, r0
 8003ea2:	b29b      	uxth	r3, r3
 8003ea4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003ea6:	e05e      	b.n	8003f66 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8003ea8:	f7fe fe9a 	bl	8002be0 <HAL_RCC_GetPCLK2Freq>
 8003eac:	0003      	movs	r3, r0
 8003eae:	005a      	lsls	r2, r3, #1
 8003eb0:	69fb      	ldr	r3, [r7, #28]
 8003eb2:	685b      	ldr	r3, [r3, #4]
 8003eb4:	085b      	lsrs	r3, r3, #1
 8003eb6:	18d2      	adds	r2, r2, r3
 8003eb8:	69fb      	ldr	r3, [r7, #28]
 8003eba:	685b      	ldr	r3, [r3, #4]
 8003ebc:	0019      	movs	r1, r3
 8003ebe:	0010      	movs	r0, r2
 8003ec0:	f7fc f922 	bl	8000108 <__udivsi3>
 8003ec4:	0003      	movs	r3, r0
 8003ec6:	b29b      	uxth	r3, r3
 8003ec8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003eca:	e04c      	b.n	8003f66 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003ecc:	4b8c      	ldr	r3, [pc, #560]	; (8004100 <UART_SetConfig+0x64c>)
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	2210      	movs	r2, #16
 8003ed2:	4013      	ands	r3, r2
 8003ed4:	d00e      	beq.n	8003ef4 <UART_SetConfig+0x440>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8((HSI_VALUE >> 2U), huart->Init.BaudRate));
 8003ed6:	69fb      	ldr	r3, [r7, #28]
 8003ed8:	685b      	ldr	r3, [r3, #4]
 8003eda:	085b      	lsrs	r3, r3, #1
 8003edc:	4a89      	ldr	r2, [pc, #548]	; (8004104 <UART_SetConfig+0x650>)
 8003ede:	189a      	adds	r2, r3, r2
 8003ee0:	69fb      	ldr	r3, [r7, #28]
 8003ee2:	685b      	ldr	r3, [r3, #4]
 8003ee4:	0019      	movs	r1, r3
 8003ee6:	0010      	movs	r0, r2
 8003ee8:	f7fc f90e 	bl	8000108 <__udivsi3>
 8003eec:	0003      	movs	r3, r0
 8003eee:	b29b      	uxth	r3, r3
 8003ef0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
        }
        break;
 8003ef2:	e038      	b.n	8003f66 <UART_SetConfig+0x4b2>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8003ef4:	69fb      	ldr	r3, [r7, #28]
 8003ef6:	685b      	ldr	r3, [r3, #4]
 8003ef8:	085b      	lsrs	r3, r3, #1
 8003efa:	4a83      	ldr	r2, [pc, #524]	; (8004108 <UART_SetConfig+0x654>)
 8003efc:	189a      	adds	r2, r3, r2
 8003efe:	69fb      	ldr	r3, [r7, #28]
 8003f00:	685b      	ldr	r3, [r3, #4]
 8003f02:	0019      	movs	r1, r3
 8003f04:	0010      	movs	r0, r2
 8003f06:	f7fc f8ff 	bl	8000108 <__udivsi3>
 8003f0a:	0003      	movs	r3, r0
 8003f0c:	b29b      	uxth	r3, r3
 8003f0e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003f10:	e029      	b.n	8003f66 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8003f12:	f7fe fdc1 	bl	8002a98 <HAL_RCC_GetSysClockFreq>
 8003f16:	0003      	movs	r3, r0
 8003f18:	005a      	lsls	r2, r3, #1
 8003f1a:	69fb      	ldr	r3, [r7, #28]
 8003f1c:	685b      	ldr	r3, [r3, #4]
 8003f1e:	085b      	lsrs	r3, r3, #1
 8003f20:	18d2      	adds	r2, r2, r3
 8003f22:	69fb      	ldr	r3, [r7, #28]
 8003f24:	685b      	ldr	r3, [r3, #4]
 8003f26:	0019      	movs	r1, r3
 8003f28:	0010      	movs	r0, r2
 8003f2a:	f7fc f8ed 	bl	8000108 <__udivsi3>
 8003f2e:	0003      	movs	r3, r0
 8003f30:	b29b      	uxth	r3, r3
 8003f32:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003f34:	e017      	b.n	8003f66 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8003f36:	69fb      	ldr	r3, [r7, #28]
 8003f38:	685b      	ldr	r3, [r3, #4]
 8003f3a:	085b      	lsrs	r3, r3, #1
 8003f3c:	2280      	movs	r2, #128	; 0x80
 8003f3e:	0252      	lsls	r2, r2, #9
 8003f40:	189a      	adds	r2, r3, r2
 8003f42:	69fb      	ldr	r3, [r7, #28]
 8003f44:	685b      	ldr	r3, [r3, #4]
 8003f46:	0019      	movs	r1, r3
 8003f48:	0010      	movs	r0, r2
 8003f4a:	f7fc f8dd 	bl	8000108 <__udivsi3>
 8003f4e:	0003      	movs	r3, r0
 8003f50:	b29b      	uxth	r3, r3
 8003f52:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003f54:	e007      	b.n	8003f66 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8003f56:	2313      	movs	r3, #19
 8003f58:	2218      	movs	r2, #24
 8003f5a:	4694      	mov	ip, r2
 8003f5c:	44bc      	add	ip, r7
 8003f5e:	4463      	add	r3, ip
 8003f60:	2201      	movs	r2, #1
 8003f62:	701a      	strb	r2, [r3, #0]
        break;
 8003f64:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003f66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f68:	2b0f      	cmp	r3, #15
 8003f6a:	d920      	bls.n	8003fae <UART_SetConfig+0x4fa>
 8003f6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f6e:	4a67      	ldr	r2, [pc, #412]	; (800410c <UART_SetConfig+0x658>)
 8003f70:	4293      	cmp	r3, r2
 8003f72:	d81c      	bhi.n	8003fae <UART_SetConfig+0x4fa>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003f74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f76:	b29a      	uxth	r2, r3
 8003f78:	200a      	movs	r0, #10
 8003f7a:	2418      	movs	r4, #24
 8003f7c:	193b      	adds	r3, r7, r4
 8003f7e:	181b      	adds	r3, r3, r0
 8003f80:	210f      	movs	r1, #15
 8003f82:	438a      	bics	r2, r1
 8003f84:	801a      	strh	r2, [r3, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003f86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f88:	085b      	lsrs	r3, r3, #1
 8003f8a:	b29b      	uxth	r3, r3
 8003f8c:	2207      	movs	r2, #7
 8003f8e:	4013      	ands	r3, r2
 8003f90:	b299      	uxth	r1, r3
 8003f92:	193b      	adds	r3, r7, r4
 8003f94:	181b      	adds	r3, r3, r0
 8003f96:	193a      	adds	r2, r7, r4
 8003f98:	1812      	adds	r2, r2, r0
 8003f9a:	8812      	ldrh	r2, [r2, #0]
 8003f9c:	430a      	orrs	r2, r1
 8003f9e:	801a      	strh	r2, [r3, #0]
      huart->Instance->BRR = brrtemp;
 8003fa0:	69fb      	ldr	r3, [r7, #28]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	193a      	adds	r2, r7, r4
 8003fa6:	1812      	adds	r2, r2, r0
 8003fa8:	8812      	ldrh	r2, [r2, #0]
 8003faa:	60da      	str	r2, [r3, #12]
 8003fac:	e095      	b.n	80040da <UART_SetConfig+0x626>
    }
    else
    {
      ret = HAL_ERROR;
 8003fae:	2313      	movs	r3, #19
 8003fb0:	2218      	movs	r2, #24
 8003fb2:	4694      	mov	ip, r2
 8003fb4:	44bc      	add	ip, r7
 8003fb6:	4463      	add	r3, ip
 8003fb8:	2201      	movs	r2, #1
 8003fba:	701a      	strb	r2, [r3, #0]
 8003fbc:	e08d      	b.n	80040da <UART_SetConfig+0x626>
    }
  }
  else
  {
    switch (clocksource)
 8003fbe:	231b      	movs	r3, #27
 8003fc0:	2218      	movs	r2, #24
 8003fc2:	4694      	mov	ip, r2
 8003fc4:	44bc      	add	ip, r7
 8003fc6:	4463      	add	r3, ip
 8003fc8:	781b      	ldrb	r3, [r3, #0]
 8003fca:	2b08      	cmp	r3, #8
 8003fcc:	d86a      	bhi.n	80040a4 <UART_SetConfig+0x5f0>
 8003fce:	009a      	lsls	r2, r3, #2
 8003fd0:	4b4f      	ldr	r3, [pc, #316]	; (8004110 <UART_SetConfig+0x65c>)
 8003fd2:	18d3      	adds	r3, r2, r3
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8003fd8:	f7fe fdec 	bl	8002bb4 <HAL_RCC_GetPCLK1Freq>
 8003fdc:	0002      	movs	r2, r0
 8003fde:	69fb      	ldr	r3, [r7, #28]
 8003fe0:	685b      	ldr	r3, [r3, #4]
 8003fe2:	085b      	lsrs	r3, r3, #1
 8003fe4:	18d2      	adds	r2, r2, r3
 8003fe6:	69fb      	ldr	r3, [r7, #28]
 8003fe8:	685b      	ldr	r3, [r3, #4]
 8003fea:	0019      	movs	r1, r3
 8003fec:	0010      	movs	r0, r2
 8003fee:	f7fc f88b 	bl	8000108 <__udivsi3>
 8003ff2:	0003      	movs	r3, r0
 8003ff4:	b29b      	uxth	r3, r3
 8003ff6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003ff8:	e05c      	b.n	80040b4 <UART_SetConfig+0x600>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8003ffa:	f7fe fdf1 	bl	8002be0 <HAL_RCC_GetPCLK2Freq>
 8003ffe:	0002      	movs	r2, r0
 8004000:	69fb      	ldr	r3, [r7, #28]
 8004002:	685b      	ldr	r3, [r3, #4]
 8004004:	085b      	lsrs	r3, r3, #1
 8004006:	18d2      	adds	r2, r2, r3
 8004008:	69fb      	ldr	r3, [r7, #28]
 800400a:	685b      	ldr	r3, [r3, #4]
 800400c:	0019      	movs	r1, r3
 800400e:	0010      	movs	r0, r2
 8004010:	f7fc f87a 	bl	8000108 <__udivsi3>
 8004014:	0003      	movs	r3, r0
 8004016:	b29b      	uxth	r3, r3
 8004018:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800401a:	e04b      	b.n	80040b4 <UART_SetConfig+0x600>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800401c:	4b38      	ldr	r3, [pc, #224]	; (8004100 <UART_SetConfig+0x64c>)
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	2210      	movs	r2, #16
 8004022:	4013      	ands	r3, r2
 8004024:	d00e      	beq.n	8004044 <UART_SetConfig+0x590>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16((HSI_VALUE >> 2U), huart->Init.BaudRate));
 8004026:	69fb      	ldr	r3, [r7, #28]
 8004028:	685b      	ldr	r3, [r3, #4]
 800402a:	085b      	lsrs	r3, r3, #1
 800402c:	4a39      	ldr	r2, [pc, #228]	; (8004114 <UART_SetConfig+0x660>)
 800402e:	189a      	adds	r2, r3, r2
 8004030:	69fb      	ldr	r3, [r7, #28]
 8004032:	685b      	ldr	r3, [r3, #4]
 8004034:	0019      	movs	r1, r3
 8004036:	0010      	movs	r0, r2
 8004038:	f7fc f866 	bl	8000108 <__udivsi3>
 800403c:	0003      	movs	r3, r0
 800403e:	b29b      	uxth	r3, r3
 8004040:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
        }
        break;
 8004042:	e037      	b.n	80040b4 <UART_SetConfig+0x600>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8004044:	69fb      	ldr	r3, [r7, #28]
 8004046:	685b      	ldr	r3, [r3, #4]
 8004048:	085b      	lsrs	r3, r3, #1
 800404a:	4a33      	ldr	r2, [pc, #204]	; (8004118 <UART_SetConfig+0x664>)
 800404c:	189a      	adds	r2, r3, r2
 800404e:	69fb      	ldr	r3, [r7, #28]
 8004050:	685b      	ldr	r3, [r3, #4]
 8004052:	0019      	movs	r1, r3
 8004054:	0010      	movs	r0, r2
 8004056:	f7fc f857 	bl	8000108 <__udivsi3>
 800405a:	0003      	movs	r3, r0
 800405c:	b29b      	uxth	r3, r3
 800405e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004060:	e028      	b.n	80040b4 <UART_SetConfig+0x600>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8004062:	f7fe fd19 	bl	8002a98 <HAL_RCC_GetSysClockFreq>
 8004066:	0002      	movs	r2, r0
 8004068:	69fb      	ldr	r3, [r7, #28]
 800406a:	685b      	ldr	r3, [r3, #4]
 800406c:	085b      	lsrs	r3, r3, #1
 800406e:	18d2      	adds	r2, r2, r3
 8004070:	69fb      	ldr	r3, [r7, #28]
 8004072:	685b      	ldr	r3, [r3, #4]
 8004074:	0019      	movs	r1, r3
 8004076:	0010      	movs	r0, r2
 8004078:	f7fc f846 	bl	8000108 <__udivsi3>
 800407c:	0003      	movs	r3, r0
 800407e:	b29b      	uxth	r3, r3
 8004080:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004082:	e017      	b.n	80040b4 <UART_SetConfig+0x600>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8004084:	69fb      	ldr	r3, [r7, #28]
 8004086:	685b      	ldr	r3, [r3, #4]
 8004088:	085b      	lsrs	r3, r3, #1
 800408a:	2280      	movs	r2, #128	; 0x80
 800408c:	0212      	lsls	r2, r2, #8
 800408e:	189a      	adds	r2, r3, r2
 8004090:	69fb      	ldr	r3, [r7, #28]
 8004092:	685b      	ldr	r3, [r3, #4]
 8004094:	0019      	movs	r1, r3
 8004096:	0010      	movs	r0, r2
 8004098:	f7fc f836 	bl	8000108 <__udivsi3>
 800409c:	0003      	movs	r3, r0
 800409e:	b29b      	uxth	r3, r3
 80040a0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80040a2:	e007      	b.n	80040b4 <UART_SetConfig+0x600>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 80040a4:	2313      	movs	r3, #19
 80040a6:	2218      	movs	r2, #24
 80040a8:	4694      	mov	ip, r2
 80040aa:	44bc      	add	ip, r7
 80040ac:	4463      	add	r3, ip
 80040ae:	2201      	movs	r2, #1
 80040b0:	701a      	strb	r2, [r3, #0]
        break;
 80040b2:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80040b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040b6:	2b0f      	cmp	r3, #15
 80040b8:	d908      	bls.n	80040cc <UART_SetConfig+0x618>
 80040ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040bc:	4a13      	ldr	r2, [pc, #76]	; (800410c <UART_SetConfig+0x658>)
 80040be:	4293      	cmp	r3, r2
 80040c0:	d804      	bhi.n	80040cc <UART_SetConfig+0x618>
    {
      huart->Instance->BRR = usartdiv;
 80040c2:	69fb      	ldr	r3, [r7, #28]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80040c8:	60da      	str	r2, [r3, #12]
 80040ca:	e006      	b.n	80040da <UART_SetConfig+0x626>
    }
    else
    {
      ret = HAL_ERROR;
 80040cc:	2313      	movs	r3, #19
 80040ce:	2218      	movs	r2, #24
 80040d0:	4694      	mov	ip, r2
 80040d2:	44bc      	add	ip, r7
 80040d4:	4463      	add	r3, ip
 80040d6:	2201      	movs	r2, #1
 80040d8:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80040da:	69fb      	ldr	r3, [r7, #28]
 80040dc:	2200      	movs	r2, #0
 80040de:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 80040e0:	69fb      	ldr	r3, [r7, #28]
 80040e2:	2200      	movs	r2, #0
 80040e4:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 80040e6:	2313      	movs	r3, #19
 80040e8:	2218      	movs	r2, #24
 80040ea:	4694      	mov	ip, r2
 80040ec:	44bc      	add	ip, r7
 80040ee:	4463      	add	r3, ip
 80040f0:	781b      	ldrb	r3, [r3, #0]
}
 80040f2:	0018      	movs	r0, r3
 80040f4:	46bd      	mov	sp, r7
 80040f6:	b00e      	add	sp, #56	; 0x38
 80040f8:	bdb0      	pop	{r4, r5, r7, pc}
 80040fa:	46c0      	nop			; (mov r8, r8)
 80040fc:	08004678 	.word	0x08004678
 8004100:	40021000 	.word	0x40021000
 8004104:	007a1200 	.word	0x007a1200
 8004108:	01e84800 	.word	0x01e84800
 800410c:	0000ffff 	.word	0x0000ffff
 8004110:	0800469c 	.word	0x0800469c
 8004114:	003d0900 	.word	0x003d0900
 8004118:	00f42400 	.word	0x00f42400

0800411c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800411c:	b580      	push	{r7, lr}
 800411e:	b082      	sub	sp, #8
 8004120:	af00      	add	r7, sp, #0
 8004122:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004128:	2201      	movs	r2, #1
 800412a:	4013      	ands	r3, r2
 800412c:	d00b      	beq.n	8004146 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	685b      	ldr	r3, [r3, #4]
 8004134:	4a4a      	ldr	r2, [pc, #296]	; (8004260 <UART_AdvFeatureConfig+0x144>)
 8004136:	4013      	ands	r3, r2
 8004138:	0019      	movs	r1, r3
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	430a      	orrs	r2, r1
 8004144:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800414a:	2202      	movs	r2, #2
 800414c:	4013      	ands	r3, r2
 800414e:	d00b      	beq.n	8004168 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	685b      	ldr	r3, [r3, #4]
 8004156:	4a43      	ldr	r2, [pc, #268]	; (8004264 <UART_AdvFeatureConfig+0x148>)
 8004158:	4013      	ands	r3, r2
 800415a:	0019      	movs	r1, r3
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	430a      	orrs	r2, r1
 8004166:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800416c:	2204      	movs	r2, #4
 800416e:	4013      	ands	r3, r2
 8004170:	d00b      	beq.n	800418a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	685b      	ldr	r3, [r3, #4]
 8004178:	4a3b      	ldr	r2, [pc, #236]	; (8004268 <UART_AdvFeatureConfig+0x14c>)
 800417a:	4013      	ands	r3, r2
 800417c:	0019      	movs	r1, r3
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	430a      	orrs	r2, r1
 8004188:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800418e:	2208      	movs	r2, #8
 8004190:	4013      	ands	r3, r2
 8004192:	d00b      	beq.n	80041ac <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	685b      	ldr	r3, [r3, #4]
 800419a:	4a34      	ldr	r2, [pc, #208]	; (800426c <UART_AdvFeatureConfig+0x150>)
 800419c:	4013      	ands	r3, r2
 800419e:	0019      	movs	r1, r3
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	430a      	orrs	r2, r1
 80041aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041b0:	2210      	movs	r2, #16
 80041b2:	4013      	ands	r3, r2
 80041b4:	d00b      	beq.n	80041ce <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	689b      	ldr	r3, [r3, #8]
 80041bc:	4a2c      	ldr	r2, [pc, #176]	; (8004270 <UART_AdvFeatureConfig+0x154>)
 80041be:	4013      	ands	r3, r2
 80041c0:	0019      	movs	r1, r3
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	430a      	orrs	r2, r1
 80041cc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041d2:	2220      	movs	r2, #32
 80041d4:	4013      	ands	r3, r2
 80041d6:	d00b      	beq.n	80041f0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	689b      	ldr	r3, [r3, #8]
 80041de:	4a25      	ldr	r2, [pc, #148]	; (8004274 <UART_AdvFeatureConfig+0x158>)
 80041e0:	4013      	ands	r3, r2
 80041e2:	0019      	movs	r1, r3
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	430a      	orrs	r2, r1
 80041ee:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041f4:	2240      	movs	r2, #64	; 0x40
 80041f6:	4013      	ands	r3, r2
 80041f8:	d01d      	beq.n	8004236 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	685b      	ldr	r3, [r3, #4]
 8004200:	4a1d      	ldr	r2, [pc, #116]	; (8004278 <UART_AdvFeatureConfig+0x15c>)
 8004202:	4013      	ands	r3, r2
 8004204:	0019      	movs	r1, r3
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	430a      	orrs	r2, r1
 8004210:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004216:	2380      	movs	r3, #128	; 0x80
 8004218:	035b      	lsls	r3, r3, #13
 800421a:	429a      	cmp	r2, r3
 800421c:	d10b      	bne.n	8004236 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	685b      	ldr	r3, [r3, #4]
 8004224:	4a15      	ldr	r2, [pc, #84]	; (800427c <UART_AdvFeatureConfig+0x160>)
 8004226:	4013      	ands	r3, r2
 8004228:	0019      	movs	r1, r3
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	430a      	orrs	r2, r1
 8004234:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800423a:	2280      	movs	r2, #128	; 0x80
 800423c:	4013      	ands	r3, r2
 800423e:	d00b      	beq.n	8004258 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	685b      	ldr	r3, [r3, #4]
 8004246:	4a0e      	ldr	r2, [pc, #56]	; (8004280 <UART_AdvFeatureConfig+0x164>)
 8004248:	4013      	ands	r3, r2
 800424a:	0019      	movs	r1, r3
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	430a      	orrs	r2, r1
 8004256:	605a      	str	r2, [r3, #4]
  }
}
 8004258:	46c0      	nop			; (mov r8, r8)
 800425a:	46bd      	mov	sp, r7
 800425c:	b002      	add	sp, #8
 800425e:	bd80      	pop	{r7, pc}
 8004260:	fffdffff 	.word	0xfffdffff
 8004264:	fffeffff 	.word	0xfffeffff
 8004268:	fffbffff 	.word	0xfffbffff
 800426c:	ffff7fff 	.word	0xffff7fff
 8004270:	ffffefff 	.word	0xffffefff
 8004274:	ffffdfff 	.word	0xffffdfff
 8004278:	ffefffff 	.word	0xffefffff
 800427c:	ff9fffff 	.word	0xff9fffff
 8004280:	fff7ffff 	.word	0xfff7ffff

08004284 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004284:	b580      	push	{r7, lr}
 8004286:	b086      	sub	sp, #24
 8004288:	af02      	add	r7, sp, #8
 800428a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2200      	movs	r2, #0
 8004290:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8004292:	f7fd fa9f 	bl	80017d4 <HAL_GetTick>
 8004296:	0003      	movs	r3, r0
 8004298:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	2208      	movs	r2, #8
 80042a2:	4013      	ands	r3, r2
 80042a4:	2b08      	cmp	r3, #8
 80042a6:	d10d      	bne.n	80042c4 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80042a8:	68fa      	ldr	r2, [r7, #12]
 80042aa:	2380      	movs	r3, #128	; 0x80
 80042ac:	0399      	lsls	r1, r3, #14
 80042ae:	6878      	ldr	r0, [r7, #4]
 80042b0:	4b16      	ldr	r3, [pc, #88]	; (800430c <UART_CheckIdleState+0x88>)
 80042b2:	9300      	str	r3, [sp, #0]
 80042b4:	0013      	movs	r3, r2
 80042b6:	2200      	movs	r2, #0
 80042b8:	f000 f82a 	bl	8004310 <UART_WaitOnFlagUntilTimeout>
 80042bc:	1e03      	subs	r3, r0, #0
 80042be:	d001      	beq.n	80042c4 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80042c0:	2303      	movs	r3, #3
 80042c2:	e01f      	b.n	8004304 <UART_CheckIdleState+0x80>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	2204      	movs	r2, #4
 80042cc:	4013      	ands	r3, r2
 80042ce:	2b04      	cmp	r3, #4
 80042d0:	d10d      	bne.n	80042ee <UART_CheckIdleState+0x6a>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80042d2:	68fa      	ldr	r2, [r7, #12]
 80042d4:	2380      	movs	r3, #128	; 0x80
 80042d6:	03d9      	lsls	r1, r3, #15
 80042d8:	6878      	ldr	r0, [r7, #4]
 80042da:	4b0c      	ldr	r3, [pc, #48]	; (800430c <UART_CheckIdleState+0x88>)
 80042dc:	9300      	str	r3, [sp, #0]
 80042de:	0013      	movs	r3, r2
 80042e0:	2200      	movs	r2, #0
 80042e2:	f000 f815 	bl	8004310 <UART_WaitOnFlagUntilTimeout>
 80042e6:	1e03      	subs	r3, r0, #0
 80042e8:	d001      	beq.n	80042ee <UART_CheckIdleState+0x6a>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80042ea:	2303      	movs	r3, #3
 80042ec:	e00a      	b.n	8004304 <UART_CheckIdleState+0x80>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	2220      	movs	r2, #32
 80042f2:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2220      	movs	r2, #32
 80042f8:	679a      	str	r2, [r3, #120]	; 0x78

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	2270      	movs	r2, #112	; 0x70
 80042fe:	2100      	movs	r1, #0
 8004300:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004302:	2300      	movs	r3, #0
}
 8004304:	0018      	movs	r0, r3
 8004306:	46bd      	mov	sp, r7
 8004308:	b004      	add	sp, #16
 800430a:	bd80      	pop	{r7, pc}
 800430c:	01ffffff 	.word	0x01ffffff

08004310 <UART_WaitOnFlagUntilTimeout>:
  * @param Tickstart Tick start value
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8004310:	b580      	push	{r7, lr}
 8004312:	b084      	sub	sp, #16
 8004314:	af00      	add	r7, sp, #0
 8004316:	60f8      	str	r0, [r7, #12]
 8004318:	60b9      	str	r1, [r7, #8]
 800431a:	603b      	str	r3, [r7, #0]
 800431c:	1dfb      	adds	r3, r7, #7
 800431e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004320:	e029      	b.n	8004376 <UART_WaitOnFlagUntilTimeout+0x66>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004322:	69bb      	ldr	r3, [r7, #24]
 8004324:	3301      	adds	r3, #1
 8004326:	d026      	beq.n	8004376 <UART_WaitOnFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004328:	f7fd fa54 	bl	80017d4 <HAL_GetTick>
 800432c:	0002      	movs	r2, r0
 800432e:	683b      	ldr	r3, [r7, #0]
 8004330:	1ad3      	subs	r3, r2, r3
 8004332:	69ba      	ldr	r2, [r7, #24]
 8004334:	429a      	cmp	r2, r3
 8004336:	d302      	bcc.n	800433e <UART_WaitOnFlagUntilTimeout+0x2e>
 8004338:	69bb      	ldr	r3, [r7, #24]
 800433a:	2b00      	cmp	r3, #0
 800433c:	d11b      	bne.n	8004376 <UART_WaitOnFlagUntilTimeout+0x66>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	681a      	ldr	r2, [r3, #0]
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	4915      	ldr	r1, [pc, #84]	; (80043a0 <UART_WaitOnFlagUntilTimeout+0x90>)
 800434a:	400a      	ands	r2, r1
 800434c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	689a      	ldr	r2, [r3, #8]
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	2101      	movs	r1, #1
 800435a:	438a      	bics	r2, r1
 800435c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	2220      	movs	r2, #32
 8004362:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	2220      	movs	r2, #32
 8004368:	679a      	str	r2, [r3, #120]	; 0x78

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	2270      	movs	r2, #112	; 0x70
 800436e:	2100      	movs	r1, #0
 8004370:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004372:	2303      	movs	r3, #3
 8004374:	e00f      	b.n	8004396 <UART_WaitOnFlagUntilTimeout+0x86>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	69db      	ldr	r3, [r3, #28]
 800437c:	68ba      	ldr	r2, [r7, #8]
 800437e:	4013      	ands	r3, r2
 8004380:	68ba      	ldr	r2, [r7, #8]
 8004382:	1ad3      	subs	r3, r2, r3
 8004384:	425a      	negs	r2, r3
 8004386:	4153      	adcs	r3, r2
 8004388:	b2db      	uxtb	r3, r3
 800438a:	001a      	movs	r2, r3
 800438c:	1dfb      	adds	r3, r7, #7
 800438e:	781b      	ldrb	r3, [r3, #0]
 8004390:	429a      	cmp	r2, r3
 8004392:	d0c6      	beq.n	8004322 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004394:	2300      	movs	r3, #0
}
 8004396:	0018      	movs	r0, r3
 8004398:	46bd      	mov	sp, r7
 800439a:	b004      	add	sp, #16
 800439c:	bd80      	pop	{r7, pc}
 800439e:	46c0      	nop			; (mov r8, r8)
 80043a0:	fffffe5f 	.word	0xfffffe5f

080043a4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80043a4:	b580      	push	{r7, lr}
 80043a6:	b082      	sub	sp, #8
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	681a      	ldr	r2, [r3, #0]
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	490a      	ldr	r1, [pc, #40]	; (80043e0 <UART_EndRxTransfer+0x3c>)
 80043b8:	400a      	ands	r2, r1
 80043ba:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	689a      	ldr	r2, [r3, #8]
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	2101      	movs	r1, #1
 80043c8:	438a      	bics	r2, r1
 80043ca:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	2220      	movs	r2, #32
 80043d0:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	2200      	movs	r2, #0
 80043d6:	661a      	str	r2, [r3, #96]	; 0x60
}
 80043d8:	46c0      	nop			; (mov r8, r8)
 80043da:	46bd      	mov	sp, r7
 80043dc:	b002      	add	sp, #8
 80043de:	bd80      	pop	{r7, pc}
 80043e0:	fffffedf 	.word	0xfffffedf

080043e4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80043e4:	b580      	push	{r7, lr}
 80043e6:	b084      	sub	sp, #16
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043f0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	225a      	movs	r2, #90	; 0x5a
 80043f6:	2100      	movs	r1, #0
 80043f8:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	2252      	movs	r2, #82	; 0x52
 80043fe:	2100      	movs	r1, #0
 8004400:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	0018      	movs	r0, r3
 8004406:	f7ff fb4d 	bl	8003aa4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800440a:	46c0      	nop			; (mov r8, r8)
 800440c:	46bd      	mov	sp, r7
 800440e:	b004      	add	sp, #16
 8004410:	bd80      	pop	{r7, pc}

08004412 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004412:	b580      	push	{r7, lr}
 8004414:	b082      	sub	sp, #8
 8004416:	af00      	add	r7, sp, #0
 8004418:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	681a      	ldr	r2, [r3, #0]
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	2140      	movs	r1, #64	; 0x40
 8004426:	438a      	bics	r2, r1
 8004428:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	2220      	movs	r2, #32
 800442e:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2200      	movs	r2, #0
 8004434:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	0018      	movs	r0, r3
 800443a:	f7ff fb2b 	bl	8003a94 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800443e:	46c0      	nop			; (mov r8, r8)
 8004440:	46bd      	mov	sp, r7
 8004442:	b002      	add	sp, #8
 8004444:	bd80      	pop	{r7, pc}
	...

08004448 <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004448:	b580      	push	{r7, lr}
 800444a:	b084      	sub	sp, #16
 800444c:	af00      	add	r7, sp, #0
 800444e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8004450:	230e      	movs	r3, #14
 8004452:	18fb      	adds	r3, r7, r3
 8004454:	687a      	ldr	r2, [r7, #4]
 8004456:	215c      	movs	r1, #92	; 0x5c
 8004458:	5a52      	ldrh	r2, [r2, r1]
 800445a:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004460:	2b22      	cmp	r3, #34	; 0x22
 8004462:	d140      	bne.n	80044e6 <UART_RxISR_8BIT+0x9e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800446a:	210c      	movs	r1, #12
 800446c:	187b      	adds	r3, r7, r1
 800446e:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004470:	187b      	adds	r3, r7, r1
 8004472:	881b      	ldrh	r3, [r3, #0]
 8004474:	b2da      	uxtb	r2, r3
 8004476:	230e      	movs	r3, #14
 8004478:	18fb      	adds	r3, r7, r3
 800447a:	881b      	ldrh	r3, [r3, #0]
 800447c:	b2d9      	uxtb	r1, r3
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004482:	400a      	ands	r2, r1
 8004484:	b2d2      	uxtb	r2, r2
 8004486:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800448c:	1c5a      	adds	r2, r3, #1
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	225a      	movs	r2, #90	; 0x5a
 8004496:	5a9b      	ldrh	r3, [r3, r2]
 8004498:	b29b      	uxth	r3, r3
 800449a:	3b01      	subs	r3, #1
 800449c:	b299      	uxth	r1, r3
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	225a      	movs	r2, #90	; 0x5a
 80044a2:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	225a      	movs	r2, #90	; 0x5a
 80044a8:	5a9b      	ldrh	r3, [r3, r2]
 80044aa:	b29b      	uxth	r3, r3
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d122      	bne.n	80044f6 <UART_RxISR_8BIT+0xae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	681a      	ldr	r2, [r3, #0]
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	4911      	ldr	r1, [pc, #68]	; (8004500 <UART_RxISR_8BIT+0xb8>)
 80044bc:	400a      	ands	r2, r1
 80044be:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	689a      	ldr	r2, [r3, #8]
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	2101      	movs	r1, #1
 80044cc:	438a      	bics	r2, r1
 80044ce:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2220      	movs	r2, #32
 80044d4:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	2200      	movs	r2, #0
 80044da:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	0018      	movs	r0, r3
 80044e0:	f7fc fc86 	bl	8000df0 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80044e4:	e007      	b.n	80044f6 <UART_RxISR_8BIT+0xae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	699a      	ldr	r2, [r3, #24]
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	2108      	movs	r1, #8
 80044f2:	430a      	orrs	r2, r1
 80044f4:	619a      	str	r2, [r3, #24]
}
 80044f6:	46c0      	nop			; (mov r8, r8)
 80044f8:	46bd      	mov	sp, r7
 80044fa:	b004      	add	sp, #16
 80044fc:	bd80      	pop	{r7, pc}
 80044fe:	46c0      	nop			; (mov r8, r8)
 8004500:	fffffedf 	.word	0xfffffedf

08004504 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004504:	b580      	push	{r7, lr}
 8004506:	b084      	sub	sp, #16
 8004508:	af00      	add	r7, sp, #0
 800450a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800450c:	230e      	movs	r3, #14
 800450e:	18fb      	adds	r3, r7, r3
 8004510:	687a      	ldr	r2, [r7, #4]
 8004512:	215c      	movs	r1, #92	; 0x5c
 8004514:	5a52      	ldrh	r2, [r2, r1]
 8004516:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800451c:	2b22      	cmp	r3, #34	; 0x22
 800451e:	d140      	bne.n	80045a2 <UART_RxISR_16BIT+0x9e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004526:	210c      	movs	r1, #12
 8004528:	187b      	adds	r3, r7, r1
 800452a:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004530:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 8004532:	187b      	adds	r3, r7, r1
 8004534:	220e      	movs	r2, #14
 8004536:	18ba      	adds	r2, r7, r2
 8004538:	881b      	ldrh	r3, [r3, #0]
 800453a:	8812      	ldrh	r2, [r2, #0]
 800453c:	4013      	ands	r3, r2
 800453e:	b29a      	uxth	r2, r3
 8004540:	68bb      	ldr	r3, [r7, #8]
 8004542:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004548:	1c9a      	adds	r2, r3, #2
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	225a      	movs	r2, #90	; 0x5a
 8004552:	5a9b      	ldrh	r3, [r3, r2]
 8004554:	b29b      	uxth	r3, r3
 8004556:	3b01      	subs	r3, #1
 8004558:	b299      	uxth	r1, r3
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	225a      	movs	r2, #90	; 0x5a
 800455e:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	225a      	movs	r2, #90	; 0x5a
 8004564:	5a9b      	ldrh	r3, [r3, r2]
 8004566:	b29b      	uxth	r3, r3
 8004568:	2b00      	cmp	r3, #0
 800456a:	d122      	bne.n	80045b2 <UART_RxISR_16BIT+0xae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	681a      	ldr	r2, [r3, #0]
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	4911      	ldr	r1, [pc, #68]	; (80045bc <UART_RxISR_16BIT+0xb8>)
 8004578:	400a      	ands	r2, r1
 800457a:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	689a      	ldr	r2, [r3, #8]
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	2101      	movs	r1, #1
 8004588:	438a      	bics	r2, r1
 800458a:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	2220      	movs	r2, #32
 8004590:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	2200      	movs	r2, #0
 8004596:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	0018      	movs	r0, r3
 800459c:	f7fc fc28 	bl	8000df0 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80045a0:	e007      	b.n	80045b2 <UART_RxISR_16BIT+0xae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	699a      	ldr	r2, [r3, #24]
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	2108      	movs	r1, #8
 80045ae:	430a      	orrs	r2, r1
 80045b0:	619a      	str	r2, [r3, #24]
}
 80045b2:	46c0      	nop			; (mov r8, r8)
 80045b4:	46bd      	mov	sp, r7
 80045b6:	b004      	add	sp, #16
 80045b8:	bd80      	pop	{r7, pc}
 80045ba:	46c0      	nop			; (mov r8, r8)
 80045bc:	fffffedf 	.word	0xfffffedf

080045c0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80045c0:	b580      	push	{r7, lr}
 80045c2:	b082      	sub	sp, #8
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80045c8:	46c0      	nop			; (mov r8, r8)
 80045ca:	46bd      	mov	sp, r7
 80045cc:	b002      	add	sp, #8
 80045ce:	bd80      	pop	{r7, pc}

080045d0 <__libc_init_array>:
 80045d0:	b570      	push	{r4, r5, r6, lr}
 80045d2:	2600      	movs	r6, #0
 80045d4:	4d0c      	ldr	r5, [pc, #48]	; (8004608 <__libc_init_array+0x38>)
 80045d6:	4c0d      	ldr	r4, [pc, #52]	; (800460c <__libc_init_array+0x3c>)
 80045d8:	1b64      	subs	r4, r4, r5
 80045da:	10a4      	asrs	r4, r4, #2
 80045dc:	42a6      	cmp	r6, r4
 80045de:	d109      	bne.n	80045f4 <__libc_init_array+0x24>
 80045e0:	2600      	movs	r6, #0
 80045e2:	f000 f82b 	bl	800463c <_init>
 80045e6:	4d0a      	ldr	r5, [pc, #40]	; (8004610 <__libc_init_array+0x40>)
 80045e8:	4c0a      	ldr	r4, [pc, #40]	; (8004614 <__libc_init_array+0x44>)
 80045ea:	1b64      	subs	r4, r4, r5
 80045ec:	10a4      	asrs	r4, r4, #2
 80045ee:	42a6      	cmp	r6, r4
 80045f0:	d105      	bne.n	80045fe <__libc_init_array+0x2e>
 80045f2:	bd70      	pop	{r4, r5, r6, pc}
 80045f4:	00b3      	lsls	r3, r6, #2
 80045f6:	58eb      	ldr	r3, [r5, r3]
 80045f8:	4798      	blx	r3
 80045fa:	3601      	adds	r6, #1
 80045fc:	e7ee      	b.n	80045dc <__libc_init_array+0xc>
 80045fe:	00b3      	lsls	r3, r6, #2
 8004600:	58eb      	ldr	r3, [r5, r3]
 8004602:	4798      	blx	r3
 8004604:	3601      	adds	r6, #1
 8004606:	e7f2      	b.n	80045ee <__libc_init_array+0x1e>
 8004608:	080046c8 	.word	0x080046c8
 800460c:	080046c8 	.word	0x080046c8
 8004610:	080046c8 	.word	0x080046c8
 8004614:	080046cc 	.word	0x080046cc

08004618 <memcpy>:
 8004618:	2300      	movs	r3, #0
 800461a:	b510      	push	{r4, lr}
 800461c:	429a      	cmp	r2, r3
 800461e:	d100      	bne.n	8004622 <memcpy+0xa>
 8004620:	bd10      	pop	{r4, pc}
 8004622:	5ccc      	ldrb	r4, [r1, r3]
 8004624:	54c4      	strb	r4, [r0, r3]
 8004626:	3301      	adds	r3, #1
 8004628:	e7f8      	b.n	800461c <memcpy+0x4>

0800462a <memset>:
 800462a:	0003      	movs	r3, r0
 800462c:	1812      	adds	r2, r2, r0
 800462e:	4293      	cmp	r3, r2
 8004630:	d100      	bne.n	8004634 <memset+0xa>
 8004632:	4770      	bx	lr
 8004634:	7019      	strb	r1, [r3, #0]
 8004636:	3301      	adds	r3, #1
 8004638:	e7f9      	b.n	800462e <memset+0x4>
	...

0800463c <_init>:
 800463c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800463e:	46c0      	nop			; (mov r8, r8)
 8004640:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004642:	bc08      	pop	{r3}
 8004644:	469e      	mov	lr, r3
 8004646:	4770      	bx	lr

08004648 <_fini>:
 8004648:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800464a:	46c0      	nop			; (mov r8, r8)
 800464c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800464e:	bc08      	pop	{r3}
 8004650:	469e      	mov	lr, r3
 8004652:	4770      	bx	lr
